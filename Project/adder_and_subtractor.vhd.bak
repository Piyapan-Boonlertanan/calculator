library ieee;
use ieee.std_logic_1164.all;

entity adder_and_subtractor is
	generic (N : natural := 5);
	port ( clock : std_logic;
			 reset : std_logic;
			 M : in std_logic;
			 A,B : in std_logic_vector(N-1 downto 0);
			 seven_seg_digit_1 : out STD_LOGIC_VECTOR (6 downto 0);
			 seven_seg_digit_2 : out STD_LOGIC_VECTOR (6 downto 0);
			 sum : out STD_LOGIC_VECTOR (N-1 downto 0);
			 over : out std_logic );

end adder_and_subtractor;

architecture struct of adder_and_subtractor is

component Full_Adder is
	port ( Cin, x, y : in std_logic;
			 sum, Cout : out std_logic); 
end component;

	signal C : std_logic_vector (N downto 0);
	signal TMP : std_logic_vector (N-1 downto 0);
	signal S : std_logic_vector (N-1 downto 0);
	signal Cout, OVERFLOW : std_logic;
	signal BCD_data_digit_1 : STD_LOGIC_VECTOR (N-1 downto 0);
	signal BCD_data_digit_2 : STD_LOGIC_VECTOR (N-1 downto 0);

begin
	TMPG : for i in 0 to N-1 generate
		TMP(i) <= M xor B(i);
	end generate TMPG;
	
	FA0 : Full_Adder port map (A(0), TMP(0), M, S(0), C(1));
	
	FAG : for j in 1 to N-1 generate
		FA : Full_Adder port map (A(j), TMP(j), C(j), S(j), C(j+1));
	end generate FAG;
	
	OVERFLOW <= C(N);
	
	Cout <= C(N);
	
	sum <= S;
	over <= OVERFLOW;
	
	convert_binary : entity work.BCD_2_digit_7_seg_display(Behavioral)
							port map (
								clk_i => clock,
								rst_i => reset,
								data => S,
								overflow => OVERFLOW,
								mode => M,
								BCD_digit_1 => BCD_data_digit_1,
								BCD_digit_2 => BCD_data_digit_2);
								
	seven_seg_display_1 : entity work.BCD_to_7_segmen(data_process)
									port map (
									clk_i => clock,
									BCD_i => BCD_data_digit_1,
									seven_seg => seven_seg_digit_1);
									
	seven_seg_display_2 : entity work.BCD_to_7_segmen(data_process)
									port map (
									clk_i => clock,
									BCD_i => BCD_data_digit_2,
									seven_seg => seven_seg_digit_2);
end struct;
	
	
			 
