-- Copyright (C) 2020  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.

-- VENDOR "Altera"
-- PROGRAM "Quartus Prime"
-- VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

-- DATE "11/14/2022 19:41:05"

-- 
-- Device: Altera 5CEBA4F23C7 Package FBGA484
-- 

-- 
-- This VHDL file should be used for ModelSim-Altera (VHDL) only
-- 

LIBRARY ALTERA;
LIBRARY ALTERA_LNSIM;
LIBRARY CYCLONEV;
LIBRARY IEEE;
USE ALTERA.ALTERA_PRIMITIVES_COMPONENTS.ALL;
USE ALTERA_LNSIM.ALTERA_LNSIM_COMPONENTS.ALL;
USE CYCLONEV.CYCLONEV_COMPONENTS.ALL;
USE IEEE.STD_LOGIC_1164.ALL;

ENTITY 	calculator IS
    PORT (
	CLK : IN std_logic;
	RST_N : IN std_logic;
	Start : IN std_logic;
	Operation : IN std_logic_vector(1 DOWNTO 0);
	A : IN std_logic_vector(4 DOWNTO 0);
	B : IN std_logic_vector(4 DOWNTO 0);
	Result : OUT std_logic_vector(9 DOWNTO 0);
	Remainder : OUT std_logic_vector(9 DOWNTO 0);
	Done : OUT std_logic;
	seven_seg_digit_1 : OUT std_logic_vector(6 DOWNTO 0);
	seven_seg_digit_2 : OUT std_logic_vector(6 DOWNTO 0);
	seven_seg_digit_3 : OUT std_logic_vector(6 DOWNTO 0);
	seven_seg_digit_4r : OUT std_logic_vector(6 DOWNTO 0);
	seven_seg_digit_5r : OUT std_logic_vector(6 DOWNTO 0);
	seven_seg_digit_6r : OUT std_logic_vector(6 DOWNTO 0)
	);
END calculator;

ARCHITECTURE structure OF calculator IS
SIGNAL gnd : std_logic := '0';
SIGNAL vcc : std_logic := '1';
SIGNAL unknown : std_logic := 'X';
SIGNAL devoe : std_logic := '1';
SIGNAL devclrn : std_logic := '1';
SIGNAL devpor : std_logic := '1';
SIGNAL ww_devoe : std_logic;
SIGNAL ww_devclrn : std_logic;
SIGNAL ww_devpor : std_logic;
SIGNAL ww_CLK : std_logic;
SIGNAL ww_RST_N : std_logic;
SIGNAL ww_Start : std_logic;
SIGNAL ww_Operation : std_logic_vector(1 DOWNTO 0);
SIGNAL ww_A : std_logic_vector(4 DOWNTO 0);
SIGNAL ww_B : std_logic_vector(4 DOWNTO 0);
SIGNAL ww_Result : std_logic_vector(9 DOWNTO 0);
SIGNAL ww_Remainder : std_logic_vector(9 DOWNTO 0);
SIGNAL ww_Done : std_logic;
SIGNAL ww_seven_seg_digit_1 : std_logic_vector(6 DOWNTO 0);
SIGNAL ww_seven_seg_digit_2 : std_logic_vector(6 DOWNTO 0);
SIGNAL ww_seven_seg_digit_3 : std_logic_vector(6 DOWNTO 0);
SIGNAL ww_seven_seg_digit_4r : std_logic_vector(6 DOWNTO 0);
SIGNAL ww_seven_seg_digit_5r : std_logic_vector(6 DOWNTO 0);
SIGNAL ww_seven_seg_digit_6r : std_logic_vector(6 DOWNTO 0);
SIGNAL \Result[0]~output_o\ : std_logic;
SIGNAL \Result[1]~output_o\ : std_logic;
SIGNAL \Result[2]~output_o\ : std_logic;
SIGNAL \Result[3]~output_o\ : std_logic;
SIGNAL \Result[4]~output_o\ : std_logic;
SIGNAL \Result[5]~output_o\ : std_logic;
SIGNAL \Result[6]~output_o\ : std_logic;
SIGNAL \Result[7]~output_o\ : std_logic;
SIGNAL \Result[8]~output_o\ : std_logic;
SIGNAL \Result[9]~output_o\ : std_logic;
SIGNAL \Remainder[0]~output_o\ : std_logic;
SIGNAL \Remainder[1]~output_o\ : std_logic;
SIGNAL \Remainder[2]~output_o\ : std_logic;
SIGNAL \Remainder[3]~output_o\ : std_logic;
SIGNAL \Remainder[4]~output_o\ : std_logic;
SIGNAL \Remainder[5]~output_o\ : std_logic;
SIGNAL \Remainder[6]~output_o\ : std_logic;
SIGNAL \Remainder[7]~output_o\ : std_logic;
SIGNAL \Remainder[8]~output_o\ : std_logic;
SIGNAL \Remainder[9]~output_o\ : std_logic;
SIGNAL \Done~output_o\ : std_logic;
SIGNAL \seven_seg_digit_1[0]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_1[1]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_1[2]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_1[3]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_1[4]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_1[5]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_1[6]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_2[0]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_2[1]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_2[2]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_2[3]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_2[4]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_2[5]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_2[6]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_3[0]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_3[1]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_3[2]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_3[3]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_3[4]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_3[5]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_3[6]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_4r[0]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_4r[1]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_4r[2]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_4r[3]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_4r[4]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_4r[5]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_4r[6]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_5r[0]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_5r[1]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_5r[2]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_5r[3]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_5r[4]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_5r[5]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_5r[6]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_6r[0]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_6r[1]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_6r[2]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_6r[3]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_6r[4]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_6r[5]~output_o\ : std_logic;
SIGNAL \seven_seg_digit_6r[6]~output_o\ : std_logic;
SIGNAL \CLK~input_o\ : std_logic;
SIGNAL \RST_N~input_o\ : std_logic;
SIGNAL \division|Add2~125_sumout\ : std_logic;
SIGNAL \division|Add2~6\ : std_logic;
SIGNAL \division|Add2~49_sumout\ : std_logic;
SIGNAL \division|Add2~50\ : std_logic;
SIGNAL \division|Add2~45_sumout\ : std_logic;
SIGNAL \division|Add2~46\ : std_logic;
SIGNAL \division|Add2~41_sumout\ : std_logic;
SIGNAL \division|Add2~42\ : std_logic;
SIGNAL \division|Add2~37_sumout\ : std_logic;
SIGNAL \division|Add2~38\ : std_logic;
SIGNAL \division|Add2~33_sumout\ : std_logic;
SIGNAL \division|Add2~34\ : std_logic;
SIGNAL \division|Add2~29_sumout\ : std_logic;
SIGNAL \division|LessThan0~1_combout\ : std_logic;
SIGNAL \division|Add2~30\ : std_logic;
SIGNAL \division|Add2~73_sumout\ : std_logic;
SIGNAL \division|Add2~74\ : std_logic;
SIGNAL \division|Add2~69_sumout\ : std_logic;
SIGNAL \division|Add2~70\ : std_logic;
SIGNAL \division|Add2~65_sumout\ : std_logic;
SIGNAL \division|Add2~66\ : std_logic;
SIGNAL \division|Add2~61_sumout\ : std_logic;
SIGNAL \division|Add2~62\ : std_logic;
SIGNAL \division|Add2~57_sumout\ : std_logic;
SIGNAL \division|Add2~58\ : std_logic;
SIGNAL \division|Add2~53_sumout\ : std_logic;
SIGNAL \division|LessThan0~2_combout\ : std_logic;
SIGNAL \division|LessThan0~3_combout\ : std_logic;
SIGNAL \division|Add2~54\ : std_logic;
SIGNAL \division|Add2~121_sumout\ : std_logic;
SIGNAL \division|Add2~122\ : std_logic;
SIGNAL \division|Add2~117_sumout\ : std_logic;
SIGNAL \division|Add2~118\ : std_logic;
SIGNAL \division|Add2~113_sumout\ : std_logic;
SIGNAL \division|Add2~114\ : std_logic;
SIGNAL \division|Add2~109_sumout\ : std_logic;
SIGNAL \division|Add2~110\ : std_logic;
SIGNAL \division|Add2~101_sumout\ : std_logic;
SIGNAL \division|Add2~102\ : std_logic;
SIGNAL \division|Add2~105_sumout\ : std_logic;
SIGNAL \division|LessThan0~4_combout\ : std_logic;
SIGNAL \division|LessThan0~5_combout\ : std_logic;
SIGNAL \Start~input_o\ : std_logic;
SIGNAL \B[0]~input_o\ : std_logic;
SIGNAL \B[1]~input_o\ : std_logic;
SIGNAL \B[2]~input_o\ : std_logic;
SIGNAL \B[3]~input_o\ : std_logic;
SIGNAL \B[4]~input_o\ : std_logic;
SIGNAL \division|Selector10~0_combout\ : std_logic;
SIGNAL \division|Selector11~0_combout\ : std_logic;
SIGNAL \division|Data_B[5]~0_combout\ : std_logic;
SIGNAL \division|Selector12~0_combout\ : std_logic;
SIGNAL \division|Selector13~0_combout\ : std_logic;
SIGNAL \division|Selector14~0_combout\ : std_logic;
SIGNAL \division|bit_counter[6]~0_combout\ : std_logic;
SIGNAL \division|Equal0~0_combout\ : std_logic;
SIGNAL \division|Equal0~1_combout\ : std_logic;
SIGNAL \division|Equal0~2_combout\ : std_logic;
SIGNAL \division|Selector20~1_combout\ : std_logic;
SIGNAL \division|state.S0~q\ : std_logic;
SIGNAL \division|Selector21~0_combout\ : std_logic;
SIGNAL \division|state.S1~q\ : std_logic;
SIGNAL \division|bit_counter[2]~2_combout\ : std_logic;
SIGNAL \division|Add2~126\ : std_logic;
SIGNAL \division|Add2~81_sumout\ : std_logic;
SIGNAL \division|Add2~82\ : std_logic;
SIGNAL \division|Add2~77_sumout\ : std_logic;
SIGNAL \division|Add2~78\ : std_logic;
SIGNAL \division|Add2~97_sumout\ : std_logic;
SIGNAL \division|Add2~98\ : std_logic;
SIGNAL \division|Add2~93_sumout\ : std_logic;
SIGNAL \division|Add2~94\ : std_logic;
SIGNAL \division|Add2~89_sumout\ : std_logic;
SIGNAL \division|Add2~90\ : std_logic;
SIGNAL \division|Add2~85_sumout\ : std_logic;
SIGNAL \division|Add2~86\ : std_logic;
SIGNAL \division|Add2~25_sumout\ : std_logic;
SIGNAL \division|Add2~26\ : std_logic;
SIGNAL \division|Add2~21_sumout\ : std_logic;
SIGNAL \division|Add2~22\ : std_logic;
SIGNAL \division|Add2~17_sumout\ : std_logic;
SIGNAL \division|Add2~18\ : std_logic;
SIGNAL \division|Add2~13_sumout\ : std_logic;
SIGNAL \division|Add2~14\ : std_logic;
SIGNAL \division|Add2~9_sumout\ : std_logic;
SIGNAL \division|Add2~10\ : std_logic;
SIGNAL \division|Add2~5_sumout\ : std_logic;
SIGNAL \division|LessThan0~0_combout\ : std_logic;
SIGNAL \division|bit_counter[6]~3_combout\ : std_logic;
SIGNAL \division|state.S2~q\ : std_logic;
SIGNAL \division|Add2~106\ : std_logic;
SIGNAL \division|Add2~1_sumout\ : std_logic;
SIGNAL \division|bit_counter[31]~1_combout\ : std_logic;
SIGNAL \division|LessThan0~6_combout\ : std_logic;
SIGNAL \A[4]~input_o\ : std_logic;
SIGNAL \A[3]~input_o\ : std_logic;
SIGNAL \A[2]~input_o\ : std_logic;
SIGNAL \A[1]~input_o\ : std_logic;
SIGNAL \A[0]~input_o\ : std_logic;
SIGNAL \division|Add1~1_sumout\ : std_logic;
SIGNAL \division|Add0~1_sumout\ : std_logic;
SIGNAL \division|Selector9~0_combout\ : std_logic;
SIGNAL \division|Data_A[0]~0_combout\ : std_logic;
SIGNAL \division|Add1~2\ : std_logic;
SIGNAL \division|Add1~5_sumout\ : std_logic;
SIGNAL \division|Add0~2\ : std_logic;
SIGNAL \division|Add0~3\ : std_logic;
SIGNAL \division|Add0~5_sumout\ : std_logic;
SIGNAL \division|Selector8~0_combout\ : std_logic;
SIGNAL \division|Add1~6\ : std_logic;
SIGNAL \division|Add1~9_sumout\ : std_logic;
SIGNAL \division|Add0~6\ : std_logic;
SIGNAL \division|Add0~7\ : std_logic;
SIGNAL \division|Add0~9_sumout\ : std_logic;
SIGNAL \division|Selector7~0_combout\ : std_logic;
SIGNAL \division|Add1~10\ : std_logic;
SIGNAL \division|Add1~13_sumout\ : std_logic;
SIGNAL \division|Add0~10\ : std_logic;
SIGNAL \division|Add0~11\ : std_logic;
SIGNAL \division|Add0~13_sumout\ : std_logic;
SIGNAL \division|Selector6~0_combout\ : std_logic;
SIGNAL \division|Add1~14\ : std_logic;
SIGNAL \division|Add1~17_sumout\ : std_logic;
SIGNAL \division|Add0~14\ : std_logic;
SIGNAL \division|Add0~15\ : std_logic;
SIGNAL \division|Add0~17_sumout\ : std_logic;
SIGNAL \division|Selector5~0_combout\ : std_logic;
SIGNAL \division|Add1~18\ : std_logic;
SIGNAL \division|Add1~21_sumout\ : std_logic;
SIGNAL \division|Add0~18\ : std_logic;
SIGNAL \division|Add0~19\ : std_logic;
SIGNAL \division|Add0~21_sumout\ : std_logic;
SIGNAL \division|Selector4~0_combout\ : std_logic;
SIGNAL \division|Data_A[5]~1_combout\ : std_logic;
SIGNAL \division|Add1~22\ : std_logic;
SIGNAL \division|Add1~25_sumout\ : std_logic;
SIGNAL \division|Add0~22\ : std_logic;
SIGNAL \division|Add0~23\ : std_logic;
SIGNAL \division|Add0~25_sumout\ : std_logic;
SIGNAL \division|Selector3~0_combout\ : std_logic;
SIGNAL \division|Add1~26\ : std_logic;
SIGNAL \division|Add1~29_sumout\ : std_logic;
SIGNAL \division|Add0~26\ : std_logic;
SIGNAL \division|Add0~27\ : std_logic;
SIGNAL \division|Add0~29_sumout\ : std_logic;
SIGNAL \division|Selector2~0_combout\ : std_logic;
SIGNAL \division|Add1~30\ : std_logic;
SIGNAL \division|Add1~33_sumout\ : std_logic;
SIGNAL \division|Add0~30\ : std_logic;
SIGNAL \division|Add0~31\ : std_logic;
SIGNAL \division|Add0~33_sumout\ : std_logic;
SIGNAL \division|Selector1~0_combout\ : std_logic;
SIGNAL \division|Add0~34\ : std_logic;
SIGNAL \division|Add0~35\ : std_logic;
SIGNAL \division|Add0~37_sumout\ : std_logic;
SIGNAL \division|Add1~34\ : std_logic;
SIGNAL \division|Add1~37_sumout\ : std_logic;
SIGNAL \division|Selector0~0_combout\ : std_logic;
SIGNAL \division|Data_A[9]~_wirecell_combout\ : std_logic;
SIGNAL \division|Selector20~0_combout\ : std_logic;
SIGNAL \multiplication|Data_A~0_combout\ : std_logic;
SIGNAL \multiplication|Add1~125_sumout\ : std_logic;
SIGNAL \multiplication|bit_counter[9]~0_combout\ : std_logic;
SIGNAL \multiplication|Add1~126\ : std_logic;
SIGNAL \multiplication|Add1~81_sumout\ : std_logic;
SIGNAL \multiplication|Add1~82\ : std_logic;
SIGNAL \multiplication|Add1~77_sumout\ : std_logic;
SIGNAL \multiplication|Add1~78\ : std_logic;
SIGNAL \multiplication|Add1~17_sumout\ : std_logic;
SIGNAL \multiplication|Add1~18\ : std_logic;
SIGNAL \multiplication|Add1~13_sumout\ : std_logic;
SIGNAL \multiplication|Add1~14\ : std_logic;
SIGNAL \multiplication|Add1~9_sumout\ : std_logic;
SIGNAL \multiplication|Add1~10\ : std_logic;
SIGNAL \multiplication|Add1~49_sumout\ : std_logic;
SIGNAL \multiplication|Add1~50\ : std_logic;
SIGNAL \multiplication|Add1~45_sumout\ : std_logic;
SIGNAL \multiplication|Add1~46\ : std_logic;
SIGNAL \multiplication|Add1~41_sumout\ : std_logic;
SIGNAL \multiplication|Add1~42\ : std_logic;
SIGNAL \multiplication|Add1~37_sumout\ : std_logic;
SIGNAL \multiplication|Add1~38\ : std_logic;
SIGNAL \multiplication|Add1~33_sumout\ : std_logic;
SIGNAL \multiplication|Add1~34\ : std_logic;
SIGNAL \multiplication|Add1~29_sumout\ : std_logic;
SIGNAL \multiplication|Add1~30\ : std_logic;
SIGNAL \multiplication|Add1~73_sumout\ : std_logic;
SIGNAL \multiplication|Add1~74\ : std_logic;
SIGNAL \multiplication|Add1~69_sumout\ : std_logic;
SIGNAL \multiplication|Add1~70\ : std_logic;
SIGNAL \multiplication|Add1~61_sumout\ : std_logic;
SIGNAL \multiplication|Add1~62\ : std_logic;
SIGNAL \multiplication|Add1~57_sumout\ : std_logic;
SIGNAL \multiplication|Add1~58\ : std_logic;
SIGNAL \multiplication|Add1~53_sumout\ : std_logic;
SIGNAL \multiplication|Add1~54\ : std_logic;
SIGNAL \multiplication|Add1~121_sumout\ : std_logic;
SIGNAL \multiplication|Add1~122\ : std_logic;
SIGNAL \multiplication|Add1~117_sumout\ : std_logic;
SIGNAL \multiplication|Add1~118\ : std_logic;
SIGNAL \multiplication|Add1~113_sumout\ : std_logic;
SIGNAL \multiplication|Add1~114\ : std_logic;
SIGNAL \multiplication|Add1~109_sumout\ : std_logic;
SIGNAL \multiplication|Add1~110\ : std_logic;
SIGNAL \multiplication|Add1~105_sumout\ : std_logic;
SIGNAL \multiplication|Add1~106\ : std_logic;
SIGNAL \multiplication|Add1~101_sumout\ : std_logic;
SIGNAL \multiplication|Add1~102\ : std_logic;
SIGNAL \multiplication|Add1~97_sumout\ : std_logic;
SIGNAL \multiplication|Add1~98\ : std_logic;
SIGNAL \multiplication|Add1~65_sumout\ : std_logic;
SIGNAL \multiplication|Add1~66\ : std_logic;
SIGNAL \multiplication|Add1~93_sumout\ : std_logic;
SIGNAL \multiplication|Add1~94\ : std_logic;
SIGNAL \multiplication|Add1~5_sumout\ : std_logic;
SIGNAL \multiplication|Add1~6\ : std_logic;
SIGNAL \multiplication|Add1~89_sumout\ : std_logic;
SIGNAL \multiplication|Add1~90\ : std_logic;
SIGNAL \multiplication|Add1~85_sumout\ : std_logic;
SIGNAL \multiplication|Add1~86\ : std_logic;
SIGNAL \multiplication|Add1~25_sumout\ : std_logic;
SIGNAL \multiplication|Add1~26\ : std_logic;
SIGNAL \multiplication|Add1~21_sumout\ : std_logic;
SIGNAL \multiplication|Add1~22\ : std_logic;
SIGNAL \multiplication|Add1~1_sumout\ : std_logic;
SIGNAL \multiplication|LessThan0~0_combout\ : std_logic;
SIGNAL \multiplication|LessThan0~1_combout\ : std_logic;
SIGNAL \multiplication|LessThan0~2_combout\ : std_logic;
SIGNAL \multiplication|LessThan0~3_combout\ : std_logic;
SIGNAL \multiplication|LessThan0~4_combout\ : std_logic;
SIGNAL \multiplication|LessThan0~5_combout\ : std_logic;
SIGNAL \multiplication|state~0_combout\ : std_logic;
SIGNAL \multiplication|state~q\ : std_logic;
SIGNAL \multiplication|Add0~1_sumout\ : std_logic;
SIGNAL \multiplication|Data_B~0_combout\ : std_logic;
SIGNAL \multiplication|Data_B~1_combout\ : std_logic;
SIGNAL \multiplication|Data_B~2_combout\ : std_logic;
SIGNAL \multiplication|Data_B~3_combout\ : std_logic;
SIGNAL \multiplication|Data_B~4_combout\ : std_logic;
SIGNAL \multiplication|Data_B~5_combout\ : std_logic;
SIGNAL \multiplication|Mux0~0_combout\ : std_logic;
SIGNAL \multiplication|Data_Product[0]~0_combout\ : std_logic;
SIGNAL \multiplication|R[3]~0_combout\ : std_logic;
SIGNAL \add|Add0~5_sumout\ : std_logic;
SIGNAL \add|Add0~2\ : std_logic;
SIGNAL \add|Add0~13_sumout\ : std_logic;
SIGNAL \add|state~0_combout\ : std_logic;
SIGNAL \add|state~q\ : std_logic;
SIGNAL \sub|cout[5]~0_combout\ : std_logic;
SIGNAL \add|Add0~14\ : std_logic;
SIGNAL \add|Add0~81_sumout\ : std_logic;
SIGNAL \add|Add0~82\ : std_logic;
SIGNAL \add|Add0~93_sumout\ : std_logic;
SIGNAL \add|Add0~94\ : std_logic;
SIGNAL \add|Add0~97_sumout\ : std_logic;
SIGNAL \add|Add0~98\ : std_logic;
SIGNAL \add|Add0~25_sumout\ : std_logic;
SIGNAL \add|Add0~26\ : std_logic;
SIGNAL \add|Add0~41_sumout\ : std_logic;
SIGNAL \add|Add0~42\ : std_logic;
SIGNAL \add|Add0~113_sumout\ : std_logic;
SIGNAL \add|Add0~114\ : std_logic;
SIGNAL \add|Add0~121_sumout\ : std_logic;
SIGNAL \add|Add0~122\ : std_logic;
SIGNAL \add|Add0~125_sumout\ : std_logic;
SIGNAL \add|Add0~126\ : std_logic;
SIGNAL \add|Add0~101_sumout\ : std_logic;
SIGNAL \add|Add0~102\ : std_logic;
SIGNAL \add|Add0~105_sumout\ : std_logic;
SIGNAL \add|Add0~106\ : std_logic;
SIGNAL \add|Add0~57_sumout\ : std_logic;
SIGNAL \add|Add0~58\ : std_logic;
SIGNAL \add|Add0~49_sumout\ : std_logic;
SIGNAL \add|Add0~50\ : std_logic;
SIGNAL \add|Add0~45_sumout\ : std_logic;
SIGNAL \add|Add0~46\ : std_logic;
SIGNAL \add|Add0~85_sumout\ : std_logic;
SIGNAL \add|Add0~86\ : std_logic;
SIGNAL \add|Add0~89_sumout\ : std_logic;
SIGNAL \add|Add0~90\ : std_logic;
SIGNAL \add|Add0~33_sumout\ : std_logic;
SIGNAL \add|Add0~34\ : std_logic;
SIGNAL \add|Add0~117_sumout\ : std_logic;
SIGNAL \add|Add0~118\ : std_logic;
SIGNAL \add|Add0~109_sumout\ : std_logic;
SIGNAL \add|Add0~110\ : std_logic;
SIGNAL \add|Add0~53_sumout\ : std_logic;
SIGNAL \add|Add0~54\ : std_logic;
SIGNAL \add|Add0~61_sumout\ : std_logic;
SIGNAL \add|Add0~62\ : std_logic;
SIGNAL \add|Add0~77_sumout\ : std_logic;
SIGNAL \add|Add0~78\ : std_logic;
SIGNAL \add|Add0~73_sumout\ : std_logic;
SIGNAL \add|Add0~74\ : std_logic;
SIGNAL \add|Add0~69_sumout\ : std_logic;
SIGNAL \add|Add0~70\ : std_logic;
SIGNAL \add|Add0~65_sumout\ : std_logic;
SIGNAL \add|Add0~66\ : std_logic;
SIGNAL \add|Add0~37_sumout\ : std_logic;
SIGNAL \add|Add0~38\ : std_logic;
SIGNAL \add|Add0~29_sumout\ : std_logic;
SIGNAL \add|Add0~30\ : std_logic;
SIGNAL \add|Add0~21_sumout\ : std_logic;
SIGNAL \add|Add0~22\ : std_logic;
SIGNAL \add|Add0~17_sumout\ : std_logic;
SIGNAL \add|LessThan0~0_combout\ : std_logic;
SIGNAL \add|LessThan0~1_combout\ : std_logic;
SIGNAL \add|LessThan0~2_combout\ : std_logic;
SIGNAL \add|LessThan0~3_combout\ : std_logic;
SIGNAL \add|LessThan0~4_combout\ : std_logic;
SIGNAL \add|LessThan0~5_combout\ : std_logic;
SIGNAL \add|Add0~6\ : std_logic;
SIGNAL \add|Add0~9_sumout\ : std_logic;
SIGNAL \add|Add0~10\ : std_logic;
SIGNAL \add|Add0~1_sumout\ : std_logic;
SIGNAL \add|Mux1~0_combout\ : std_logic;
SIGNAL \add|Mux0~0_combout\ : std_logic;
SIGNAL \sub|Mux1~0_combout\ : std_logic;
SIGNAL \sub|Mux0~0_combout\ : std_logic;
SIGNAL \add|Decoder0~9_combout\ : std_logic;
SIGNAL \sub|cout[0]~1_combout\ : std_logic;
SIGNAL \sub|cout[0]~2_combout\ : std_logic;
SIGNAL \add|Decoder0~0_combout\ : std_logic;
SIGNAL \sub|cout[1]~3_combout\ : std_logic;
SIGNAL \sub|cout[1]~4_combout\ : std_logic;
SIGNAL \sub|cout[2]~5_combout\ : std_logic;
SIGNAL \sub|cout[2]~6_combout\ : std_logic;
SIGNAL \add|Decoder0~3_combout\ : std_logic;
SIGNAL \sub|cout[3]~7_combout\ : std_logic;
SIGNAL \sub|cout[3]~8_combout\ : std_logic;
SIGNAL \sub|Mux2~0_combout\ : std_logic;
SIGNAL \add|Decoder0~6_combout\ : std_logic;
SIGNAL \sub|cout[5]~9_combout\ : std_logic;
SIGNAL \sub|cout[5]~10_combout\ : std_logic;
SIGNAL \sub|cout[4]~11_combout\ : std_logic;
SIGNAL \sub|cout[4]~12_combout\ : std_logic;
SIGNAL \sub|Mux2~1_combout\ : std_logic;
SIGNAL \sub|sum~0_combout\ : std_logic;
SIGNAL \add|Decoder0~1_combout\ : std_logic;
SIGNAL \add|cout~0_combout\ : std_logic;
SIGNAL \add|cout[0]~1_combout\ : std_logic;
SIGNAL \add|cout[0]~2_combout\ : std_logic;
SIGNAL \add|cout[5]~3_combout\ : std_logic;
SIGNAL \add|cout[1]~4_combout\ : std_logic;
SIGNAL \add|cout[3]~5_combout\ : std_logic;
SIGNAL \add|cout[2]~6_combout\ : std_logic;
SIGNAL \add|cout[3]~7_combout\ : std_logic;
SIGNAL \add|Mux2~0_combout\ : std_logic;
SIGNAL \add|cout[5]~8_combout\ : std_logic;
SIGNAL \add|cout[4]~9_combout\ : std_logic;
SIGNAL \add|cout[4]~10_combout\ : std_logic;
SIGNAL \add|Mux2~1_combout\ : std_logic;
SIGNAL \add|sum~0_combout\ : std_logic;
SIGNAL \Operation[0]~input_o\ : std_logic;
SIGNAL \Operation[1]~input_o\ : std_logic;
SIGNAL \convert_binary|Mux9~0_combout\ : std_logic;
SIGNAL \multiplication|Data_A~1_combout\ : std_logic;
SIGNAL \multiplication|Data_A[3]~2_combout\ : std_logic;
SIGNAL \multiplication|Add0~2\ : std_logic;
SIGNAL \multiplication|Add0~5_sumout\ : std_logic;
SIGNAL \add|Decoder0~2_combout\ : std_logic;
SIGNAL \convert_binary|Mux8~0_combout\ : std_logic;
SIGNAL \multiplication|Data_A~3_combout\ : std_logic;
SIGNAL \multiplication|Add0~6\ : std_logic;
SIGNAL \multiplication|Add0~9_sumout\ : std_logic;
SIGNAL \add|Decoder0~4_combout\ : std_logic;
SIGNAL \convert_binary|Mux7~0_combout\ : std_logic;
SIGNAL \multiplication|Data_A~4_combout\ : std_logic;
SIGNAL \multiplication|Add0~10\ : std_logic;
SIGNAL \multiplication|Add0~13_sumout\ : std_logic;
SIGNAL \add|Decoder0~5_combout\ : std_logic;
SIGNAL \convert_binary|Mux6~0_combout\ : std_logic;
SIGNAL \multiplication|Data_A~5_combout\ : std_logic;
SIGNAL \multiplication|Add0~14\ : std_logic;
SIGNAL \multiplication|Add0~17_sumout\ : std_logic;
SIGNAL \add|Decoder0~7_combout\ : std_logic;
SIGNAL \convert_binary|Mux5~0_combout\ : std_logic;
SIGNAL \multiplication|Add0~18\ : std_logic;
SIGNAL \multiplication|Add0~21_sumout\ : std_logic;
SIGNAL \add|Decoder0~8_combout\ : std_logic;
SIGNAL \convert_binary|Mux4~0_combout\ : std_logic;
SIGNAL \multiplication|Add0~22\ : std_logic;
SIGNAL \multiplication|Add0~25_sumout\ : std_logic;
SIGNAL \add|Decoder0~10_combout\ : std_logic;
SIGNAL \convert_binary|Mux3~0_combout\ : std_logic;
SIGNAL \multiplication|Add0~26\ : std_logic;
SIGNAL \multiplication|Add0~29_sumout\ : std_logic;
SIGNAL \add|Decoder0~11_combout\ : std_logic;
SIGNAL \convert_binary|Mux2~0_combout\ : std_logic;
SIGNAL \multiplication|Add0~30\ : std_logic;
SIGNAL \multiplication|Add0~33_sumout\ : std_logic;
SIGNAL \add|Decoder0~12_combout\ : std_logic;
SIGNAL \convert_binary|Mux1~0_combout\ : std_logic;
SIGNAL \multiplication|Add0~34\ : std_logic;
SIGNAL \multiplication|Add0~37_sumout\ : std_logic;
SIGNAL \add|Decoder0~13_combout\ : std_logic;
SIGNAL \convert_binary|Mux0~0_combout\ : std_logic;
SIGNAL \convert_binary|Remainder[0]~0_combout\ : std_logic;
SIGNAL \add|DONE~0_combout\ : std_logic;
SIGNAL \add|DONE~q\ : std_logic;
SIGNAL \multiplication|DONE~0_combout\ : std_logic;
SIGNAL \multiplication|DONE~q\ : std_logic;
SIGNAL \division|DONE~0_combout\ : std_logic;
SIGNAL \division|DONE~q\ : std_logic;
SIGNAL \convert_binary|Mux10~0_combout\ : std_logic;
SIGNAL \convert_binary|Done~q\ : std_logic;
SIGNAL \sub|cout_sub_overflow~0_combout\ : std_logic;
SIGNAL \sub|cout_sub_overflow~q\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~38_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~18\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~6_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~38_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~22\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~6_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[59]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[57]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[56]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~18_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~14_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~10_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~6_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~38_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~18\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~6_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[48]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~38_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~22\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~6_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[61]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[61]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[60]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[60]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[59]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[58]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[58]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[57]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|StageOut[56]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_10~18_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_10~14_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_10~10_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_10~6_cout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~38_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~18\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~6_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~38_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~22\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~6_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[59]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[57]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[56]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~18_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~14_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~10_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~6_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mux34~0_combout\ : std_logic;
SIGNAL \convert_binary|Mux33~0_combout\ : std_logic;
SIGNAL \convert_binary|Mux32~0_combout\ : std_logic;
SIGNAL \convert_binary|Mux31~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux6~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux5~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux4~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux3~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux2~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux1~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux0~0_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~22_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~23_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~22_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~6\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~10\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~14\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~26\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~18_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~26_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~22_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~26\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~22\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~26_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~14\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~6_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~14_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~6\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~34\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~30\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~26\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~26_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~18\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~6_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~18_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~6\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~38\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~26_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~22\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~6_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~6\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~42\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~38\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[75]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[73]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[36]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[35]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~18_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~14_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~10_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~6_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~6\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~10\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~14\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~18\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~46_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~42_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[18]~22_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[18]~23_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_5~22_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_5~6\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_5~10\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_5~14\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_5~26\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_5~18_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[17]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_5~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[17]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[15]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_6~26_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_6~22_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[22]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[22]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[21]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[20]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_7~26_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_7~14\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_7~6_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[27]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[27]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[26]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_7~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[25]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_8~26_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_8~18\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_8~6_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[32]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[32]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[31]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[30]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_9~26_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_9~22\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_9~6_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[37]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[37]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[36]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|StageOut[35]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_10~18_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_10~14_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_10~10_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_10~6_cout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~26\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~22\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[41]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[40]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~14_cout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~6\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~34\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~30\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~26\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[53]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[51]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[50]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~18_cout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~6\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~38\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[65]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[63]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[61]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[60]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~6\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~42\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~38\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[77]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[77]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[76]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[76]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[75]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[74]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[74]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[73]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[72]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[72]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[71]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|StageOut[70]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~6\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~10\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~14\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~18\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~46_cout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~42_cout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mux30~2_combout\ : std_logic;
SIGNAL \convert_binary|Mux30~0_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~22_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~23_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~22_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~6\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~10\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~14\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~26\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~18_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~26_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~22_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~26_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~14\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~6_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~26_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~18\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~6_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~26_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~22\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~6_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[36]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[35]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~18_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~14_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~10_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~6_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~26\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~22\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~14_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~6\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~34\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~30\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~26\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~18_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~6\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~38\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~6\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~42\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~38\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[75]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[73]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~6\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~10\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~14\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~18\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~46_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~42_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mux30~3_combout\ : std_logic;
SIGNAL \convert_binary|Mux30~1_combout\ : std_logic;
SIGNAL \convert_binary|int_data_2[3]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mux33~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mux29~0_combout\ : std_logic;
SIGNAL \convert_binary|Mux29~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mux29~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mux29~3_combout\ : std_logic;
SIGNAL \convert_binary|Mux29~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mux28~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mux28~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mux28~2_combout\ : std_logic;
SIGNAL \convert_binary|Mux28~3_combout\ : std_logic;
SIGNAL \convert_binary|Mux28~4_combout\ : std_logic;
SIGNAL \convert_binary|Mux28~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mux27~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mux27~1_combout\ : std_logic;
SIGNAL \convert_binary|Mux27~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mux27~3_combout\ : std_logic;
SIGNAL \convert_binary|Mux27~4_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux6~0_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux5~0_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux4~0_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux3~0_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux2~0_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux1~0_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux0~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~22\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~18\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~14\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~6\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~26\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~22\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~38_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~14_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~6\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~34\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~30\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~26\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~39_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~43_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~18_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~6\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~38\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~35_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~37_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~40_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~44_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~6\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~42\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~38\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[75]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~36_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[73]~41_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~42_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~45_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~6\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~14\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~18\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~46_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~42_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mux26~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_5~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_5~22\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_5~18\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_5~14\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_5~10\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_5~6\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[30]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_5~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_5~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~26\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~22\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[43]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[41]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[40]~38_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~14_cout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~6\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~34\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~30\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~26\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[53]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[51]~39_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[50]~43_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~18_cout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~6\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~38\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[65]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[63]~35_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~37_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~40_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[61]~44_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[60]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~6\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~42\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~38\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[77]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[77]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[76]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[76]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[75]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[74]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[74]~36_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[73]~41_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[72]~42_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[72]~45_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[71]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|StageOut[70]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~6\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~10\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~14\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~18\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~46_cout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~42_cout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mux26~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~22\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~18\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~14\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~6\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~26\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~22\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~38_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~14_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~6\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~34\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~30\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~26\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~39_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~43_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~18_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~6\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~38\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~35_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~37_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~40_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~44_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~6\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~42\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~38\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[75]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~36_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[73]~41_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~42_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~45_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~6\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~14\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~18\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~46_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~42_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mux26~2_combout\ : std_logic;
SIGNAL \convert_binary|Mux26~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mux25~0_combout\ : std_logic;
SIGNAL \convert_binary|Mux25~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mux25~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mux25~3_combout\ : std_logic;
SIGNAL \convert_binary|Mux25~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mux24~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mux24~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mux24~2_combout\ : std_logic;
SIGNAL \convert_binary|Mux24~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mux23~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mux23~1_combout\ : std_logic;
SIGNAL \convert_binary|Mux23~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mux23~3_combout\ : std_logic;
SIGNAL \convert_binary|Mux23~4_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux6~0_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux5~0_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux4~0_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux3~0_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux2~0_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux1~0_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux0~0_combout\ : std_logic;
SIGNAL \convert_binary|Mux21~0_combout\ : std_logic;
SIGNAL \seven_seg_display_4|seven_seg[6]~0_combout\ : std_logic;
SIGNAL \seven_seg_display_5|seven_seg[6]~0_combout\ : std_logic;
SIGNAL \seven_seg_display_6|seven_seg[6]~0_combout\ : std_logic;
SIGNAL \add|cout\ : std_logic_vector(5 DOWNTO 0);
SIGNAL \convert_binary|int_data_1\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \division|Data_Quotient\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \multiplication|Data_Product\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \convert_binary|int_data_4r\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \division|bit_counter\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \multiplication|bit_counter\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \seven_seg_display_5|seven_seg\ : std_logic_vector(6 DOWNTO 0);
SIGNAL \add|bit_counter\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \division|Data_B\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \convert_binary|Result\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \multiplication|Data_A\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \division|Data_A\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \convert_binary|Remainder\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \seven_seg_display_1|seven_seg\ : std_logic_vector(6 DOWNTO 0);
SIGNAL \seven_seg_display_2|seven_seg\ : std_logic_vector(6 DOWNTO 0);
SIGNAL \seven_seg_display_3|seven_seg\ : std_logic_vector(6 DOWNTO 0);
SIGNAL \seven_seg_display_4|seven_seg\ : std_logic_vector(6 DOWNTO 0);
SIGNAL \seven_seg_display_6|seven_seg\ : std_logic_vector(6 DOWNTO 0);
SIGNAL \convert_binary|int_data_2\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \add|sum\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \division|Q\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \multiplication|R\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \sub|sum\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \convert_binary|int_data_3\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \division|R\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \sub|cout\ : std_logic_vector(5 DOWNTO 0);
SIGNAL \multiplication|Data_B\ : std_logic_vector(4 DOWNTO 0);
SIGNAL \add|ALT_INV_bit_counter\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \multiplication|ALT_INV_bit_counter\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \multiplication|ALT_INV_Data_Product\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \division|ALT_INV_bit_counter\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add2~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \add|ALT_INV_Add0~9_sumout\ : std_logic;
SIGNAL \add|ALT_INV_Add0~5_sumout\ : std_logic;
SIGNAL \add|ALT_INV_Add0~1_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Data_B\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add1~37_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add0~37_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add0~33_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add1~33_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add0~29_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add1~29_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add0~25_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add1~25_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add0~21_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add1~21_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add0~17_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add1~17_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add0~13_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add1~13_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add0~9_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add1~9_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add0~5_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add1~5_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add0~1_sumout\ : std_logic;
SIGNAL \division|ALT_INV_Add1~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \multiplication|ALT_INV_Data_A\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\ : std_logic;
SIGNAL \division|ALT_INV_LessThan0~2_combout\ : std_logic;
SIGNAL \division|ALT_INV_LessThan0~1_combout\ : std_logic;
SIGNAL \division|ALT_INV_LessThan0~0_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_int_data_4r\ : std_logic_vector(1 DOWNTO 1);
SIGNAL \convert_binary|ALT_INV_int_data_3\ : std_logic_vector(3 DOWNTO 0);
SIGNAL \convert_binary|ALT_INV_int_data_2\ : std_logic_vector(3 DOWNTO 0);
SIGNAL \convert_binary|ALT_INV_int_data_1\ : std_logic_vector(3 DOWNTO 0);
SIGNAL \division|ALT_INV_DONE~q\ : std_logic;
SIGNAL \multiplication|ALT_INV_DONE~q\ : std_logic;
SIGNAL \add|ALT_INV_DONE~q\ : std_logic;
SIGNAL \add|ALT_INV_sum\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \sub|ALT_INV_sum\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \multiplication|ALT_INV_R\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \division|ALT_INV_Q\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux23~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux23~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux24~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux24~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux24~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux25~3_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux25~2_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux25~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux25~0_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux26~2_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux26~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux26~0_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux27~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux27~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux27~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux27~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux28~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux28~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux28~2_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux28~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux28~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux29~3_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux29~2_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux29~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux29~0_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux33~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_int_data_2[3]~0_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux30~0_combout\ : std_logic;
SIGNAL \sub|ALT_INV_cout_sub_overflow~q\ : std_logic;
SIGNAL \division|ALT_INV_state.S2~q\ : std_logic;
SIGNAL \division|ALT_INV_LessThan0~6_combout\ : std_logic;
SIGNAL \division|ALT_INV_Data_A\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \add|ALT_INV_Decoder0~9_combout\ : std_logic;
SIGNAL \add|ALT_INV_Decoder0~6_combout\ : std_logic;
SIGNAL \add|ALT_INV_Decoder0~3_combout\ : std_logic;
SIGNAL \add|ALT_INV_Mux2~1_combout\ : std_logic;
SIGNAL \add|ALT_INV_cout\ : std_logic_vector(5 DOWNTO 0);
SIGNAL \add|ALT_INV_Mux2~0_combout\ : std_logic;
SIGNAL \add|ALT_INV_LessThan0~5_combout\ : std_logic;
SIGNAL \add|ALT_INV_LessThan0~4_combout\ : std_logic;
SIGNAL \add|ALT_INV_LessThan0~3_combout\ : std_logic;
SIGNAL \add|ALT_INV_LessThan0~2_combout\ : std_logic;
SIGNAL \add|ALT_INV_LessThan0~1_combout\ : std_logic;
SIGNAL \add|ALT_INV_LessThan0~0_combout\ : std_logic;
SIGNAL \add|ALT_INV_state~q\ : std_logic;
SIGNAL \add|ALT_INV_Decoder0~0_combout\ : std_logic;
SIGNAL \sub|ALT_INV_Mux2~1_combout\ : std_logic;
SIGNAL \sub|ALT_INV_cout\ : std_logic_vector(5 DOWNTO 0);
SIGNAL \sub|ALT_INV_Mux2~0_combout\ : std_logic;
SIGNAL \add|ALT_INV_Mux0~0_combout\ : std_logic;
SIGNAL \add|ALT_INV_Mux1~0_combout\ : std_logic;
SIGNAL \multiplication|ALT_INV_LessThan0~5_combout\ : std_logic;
SIGNAL \multiplication|ALT_INV_LessThan0~4_combout\ : std_logic;
SIGNAL \multiplication|ALT_INV_LessThan0~3_combout\ : std_logic;
SIGNAL \multiplication|ALT_INV_LessThan0~2_combout\ : std_logic;
SIGNAL \multiplication|ALT_INV_LessThan0~1_combout\ : std_logic;
SIGNAL \multiplication|ALT_INV_LessThan0~0_combout\ : std_logic;
SIGNAL \multiplication|ALT_INV_state~q\ : std_logic;
SIGNAL \division|ALT_INV_state.S1~q\ : std_logic;
SIGNAL \division|ALT_INV_LessThan0~5_combout\ : std_logic;
SIGNAL \division|ALT_INV_LessThan0~4_combout\ : std_logic;
SIGNAL \division|ALT_INV_LessThan0~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[77]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[77]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\ : std_logic;
SIGNAL \add|ALT_INV_cout[4]~9_combout\ : std_logic;
SIGNAL \add|ALT_INV_cout[3]~5_combout\ : std_logic;
SIGNAL \add|ALT_INV_cout[5]~3_combout\ : std_logic;
SIGNAL \add|ALT_INV_cout[0]~1_combout\ : std_logic;
SIGNAL \add|ALT_INV_cout~0_combout\ : std_logic;
SIGNAL \sub|ALT_INV_cout[4]~11_combout\ : std_logic;
SIGNAL \sub|ALT_INV_cout[5]~9_combout\ : std_logic;
SIGNAL \sub|ALT_INV_cout[3]~7_combout\ : std_logic;
SIGNAL \sub|ALT_INV_cout[2]~5_combout\ : std_logic;
SIGNAL \sub|ALT_INV_cout[1]~3_combout\ : std_logic;
SIGNAL \sub|ALT_INV_cout[0]~1_combout\ : std_logic;
SIGNAL \sub|ALT_INV_Mux0~0_combout\ : std_logic;
SIGNAL \sub|ALT_INV_Mux1~0_combout\ : std_logic;
SIGNAL \multiplication|ALT_INV_Mux0~0_combout\ : std_logic;
SIGNAL \multiplication|ALT_INV_Data_B\ : std_logic_vector(4 DOWNTO 0);
SIGNAL \division|ALT_INV_Equal0~2_combout\ : std_logic;
SIGNAL \division|ALT_INV_Equal0~1_combout\ : std_logic;
SIGNAL \division|ALT_INV_Equal0~0_combout\ : std_logic;
SIGNAL \division|ALT_INV_state.S0~q\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux23~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux23~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[32]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[54]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[76]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[65]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[43]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[65]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[54]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[54]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[76]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[65]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[76]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[65]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[76]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[77]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[77]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[66]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[55]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[44]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[44]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[77]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[77]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[66]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[55]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[41]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[30]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[74]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[74]~36_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[63]~35_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[52]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[41]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[30]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[52]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[74]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[31]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[31]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[74]~36_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[63]~35_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[41]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[30]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[74]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[74]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[63]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[41]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[52]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[74]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[74]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[63]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[41]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[74]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[74]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[63]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[41]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[74]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[75]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[53]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[75]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[64]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[53]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[31]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[42]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[64]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[75]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[53]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[75]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[53]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[64]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[75]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[53]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[75]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[53]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[76]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[65]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[43]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[76]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[65]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[54]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[43]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[32]~16_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux30~3_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_Mux30~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[72]~45_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[61]~44_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[50]~43_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[72]~42_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[72]~45_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[61]~44_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[50]~43_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[72]~42_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[72]~45_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[61]~44_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[50]~43_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[72]~42_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[72]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[61]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[50]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[72]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[72]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[61]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[50]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[72]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[72]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[61]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[50]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[72]~29_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[73]~41_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~40_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[51]~39_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[40]~38_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~37_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[73]~41_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[62]~40_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[51]~39_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[40]~38_combout\ : std_logic;
SIGNAL \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[62]~37_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[73]~41_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~40_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[51]~39_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[40]~38_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~37_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[73]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[62]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[51]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[40]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[62]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[73]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[51]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[40]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[73]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[51]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[40]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~24_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[74]~36_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[63]~35_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~34_combout\ : std_logic;
SIGNAL \ALT_INV_Start~input_o\ : std_logic;
SIGNAL \ALT_INV_A[3]~input_o\ : std_logic;
SIGNAL \ALT_INV_A[2]~input_o\ : std_logic;
SIGNAL \ALT_INV_A[1]~input_o\ : std_logic;
SIGNAL \ALT_INV_A[0]~input_o\ : std_logic;
SIGNAL \ALT_INV_A[4]~input_o\ : std_logic;
SIGNAL \ALT_INV_B[3]~input_o\ : std_logic;
SIGNAL \ALT_INV_B[2]~input_o\ : std_logic;
SIGNAL \ALT_INV_B[1]~input_o\ : std_logic;
SIGNAL \ALT_INV_B[0]~input_o\ : std_logic;
SIGNAL \ALT_INV_B[4]~input_o\ : std_logic;
SIGNAL \ALT_INV_RST_N~input_o\ : std_logic;
SIGNAL \ALT_INV_Operation[1]~input_o\ : std_logic;
SIGNAL \ALT_INV_Operation[0]~input_o\ : std_logic;

BEGIN

ww_CLK <= CLK;
ww_RST_N <= RST_N;
ww_Start <= Start;
ww_Operation <= Operation;
ww_A <= A;
ww_B <= B;
Result <= ww_Result;
Remainder <= ww_Remainder;
Done <= ww_Done;
seven_seg_digit_1 <= ww_seven_seg_digit_1;
seven_seg_digit_2 <= ww_seven_seg_digit_2;
seven_seg_digit_3 <= ww_seven_seg_digit_3;
seven_seg_digit_4r <= ww_seven_seg_digit_4r;
seven_seg_digit_5r <= ww_seven_seg_digit_5r;
seven_seg_digit_6r <= ww_seven_seg_digit_6r;
ww_devoe <= devoe;
ww_devclrn <= devclrn;
ww_devpor <= devpor;
\add|ALT_INV_bit_counter\(5) <= NOT \add|bit_counter\(5);
\add|ALT_INV_bit_counter\(18) <= NOT \add|bit_counter\(18);
\add|ALT_INV_bit_counter\(17) <= NOT \add|bit_counter\(17);
\add|ALT_INV_bit_counter\(4) <= NOT \add|bit_counter\(4);
\add|ALT_INV_bit_counter\(24) <= NOT \add|bit_counter\(24);
\add|ALT_INV_bit_counter\(25) <= NOT \add|bit_counter\(25);
\add|ALT_INV_bit_counter\(26) <= NOT \add|bit_counter\(26);
\add|ALT_INV_bit_counter\(27) <= NOT \add|bit_counter\(27);
\add|ALT_INV_bit_counter\(23) <= NOT \add|bit_counter\(23);
\add|ALT_INV_bit_counter\(14) <= NOT \add|bit_counter\(14);
\add|ALT_INV_bit_counter\(22) <= NOT \add|bit_counter\(22);
\add|ALT_INV_bit_counter\(15) <= NOT \add|bit_counter\(15);
\add|ALT_INV_bit_counter\(16) <= NOT \add|bit_counter\(16);
\add|ALT_INV_bit_counter\(8) <= NOT \add|bit_counter\(8);
\add|ALT_INV_bit_counter\(28) <= NOT \add|bit_counter\(28);
\add|ALT_INV_bit_counter\(19) <= NOT \add|bit_counter\(19);
\add|ALT_INV_bit_counter\(29) <= NOT \add|bit_counter\(29);
\add|ALT_INV_bit_counter\(7) <= NOT \add|bit_counter\(7);
\add|ALT_INV_bit_counter\(30) <= NOT \add|bit_counter\(30);
\add|ALT_INV_bit_counter\(31) <= NOT \add|bit_counter\(31);
\add|ALT_INV_bit_counter\(3) <= NOT \add|bit_counter\(3);
\add|ALT_INV_bit_counter\(1) <= NOT \add|bit_counter\(1);
\add|ALT_INV_bit_counter\(0) <= NOT \add|bit_counter\(0);
\add|ALT_INV_bit_counter\(2) <= NOT \add|bit_counter\(2);
\multiplication|ALT_INV_bit_counter\(17) <= NOT \multiplication|bit_counter\(17);
\multiplication|ALT_INV_bit_counter\(18) <= NOT \multiplication|bit_counter\(18);
\multiplication|ALT_INV_bit_counter\(19) <= NOT \multiplication|bit_counter\(19);
\multiplication|ALT_INV_bit_counter\(20) <= NOT \multiplication|bit_counter\(20);
\multiplication|ALT_INV_bit_counter\(21) <= NOT \multiplication|bit_counter\(21);
\multiplication|ALT_INV_bit_counter\(22) <= NOT \multiplication|bit_counter\(22);
\multiplication|ALT_INV_bit_counter\(23) <= NOT \multiplication|bit_counter\(23);
\multiplication|ALT_INV_bit_counter\(25) <= NOT \multiplication|bit_counter\(25);
\multiplication|ALT_INV_bit_counter\(27) <= NOT \multiplication|bit_counter\(27);
\multiplication|ALT_INV_bit_counter\(28) <= NOT \multiplication|bit_counter\(28);
\multiplication|ALT_INV_bit_counter\(1) <= NOT \multiplication|bit_counter\(1);
\multiplication|ALT_INV_bit_counter\(2) <= NOT \multiplication|bit_counter\(2);
\multiplication|ALT_INV_bit_counter\(12) <= NOT \multiplication|bit_counter\(12);
\multiplication|ALT_INV_bit_counter\(13) <= NOT \multiplication|bit_counter\(13);
\multiplication|ALT_INV_bit_counter\(24) <= NOT \multiplication|bit_counter\(24);
\multiplication|ALT_INV_bit_counter\(14) <= NOT \multiplication|bit_counter\(14);
\multiplication|ALT_INV_bit_counter\(15) <= NOT \multiplication|bit_counter\(15);
\multiplication|ALT_INV_bit_counter\(16) <= NOT \multiplication|bit_counter\(16);
\multiplication|ALT_INV_bit_counter\(6) <= NOT \multiplication|bit_counter\(6);
\multiplication|ALT_INV_bit_counter\(7) <= NOT \multiplication|bit_counter\(7);
\multiplication|ALT_INV_bit_counter\(8) <= NOT \multiplication|bit_counter\(8);
\multiplication|ALT_INV_bit_counter\(9) <= NOT \multiplication|bit_counter\(9);
\multiplication|ALT_INV_bit_counter\(10) <= NOT \multiplication|bit_counter\(10);
\multiplication|ALT_INV_bit_counter\(11) <= NOT \multiplication|bit_counter\(11);
\multiplication|ALT_INV_bit_counter\(29) <= NOT \multiplication|bit_counter\(29);
\multiplication|ALT_INV_bit_counter\(30) <= NOT \multiplication|bit_counter\(30);
\multiplication|ALT_INV_bit_counter\(3) <= NOT \multiplication|bit_counter\(3);
\multiplication|ALT_INV_bit_counter\(4) <= NOT \multiplication|bit_counter\(4);
\multiplication|ALT_INV_bit_counter\(5) <= NOT \multiplication|bit_counter\(5);
\multiplication|ALT_INV_bit_counter\(26) <= NOT \multiplication|bit_counter\(26);
\multiplication|ALT_INV_bit_counter\(31) <= NOT \multiplication|bit_counter\(31);
\multiplication|ALT_INV_Data_Product\(0) <= NOT \multiplication|Data_Product\(0);
\division|ALT_INV_bit_counter\(25) <= NOT \division|bit_counter\(25);
\division|ALT_INV_bit_counter\(26) <= NOT \division|bit_counter\(26);
\division|ALT_INV_bit_counter\(27) <= NOT \division|bit_counter\(27);
\division|ALT_INV_bit_counter\(28) <= NOT \division|bit_counter\(28);
\division|ALT_INV_bit_counter\(30) <= NOT \division|bit_counter\(30);
\division|ALT_INV_bit_counter\(29) <= NOT \division|bit_counter\(29);
\division|ALT_INV_bit_counter\(3) <= NOT \division|bit_counter\(3);
\division|ALT_INV_bit_counter\(4) <= NOT \division|bit_counter\(4);
\division|ALT_INV_bit_counter\(5) <= NOT \division|bit_counter\(5);
\division|ALT_INV_bit_counter\(6) <= NOT \division|bit_counter\(6);
\division|ALT_INV_bit_counter\(1) <= NOT \division|bit_counter\(1);
\division|ALT_INV_bit_counter\(2) <= NOT \division|bit_counter\(2);
\division|ALT_INV_bit_counter\(19) <= NOT \division|bit_counter\(19);
\division|ALT_INV_bit_counter\(20) <= NOT \division|bit_counter\(20);
\division|ALT_INV_bit_counter\(21) <= NOT \division|bit_counter\(21);
\division|ALT_INV_bit_counter\(22) <= NOT \division|bit_counter\(22);
\division|ALT_INV_bit_counter\(23) <= NOT \division|bit_counter\(23);
\division|ALT_INV_bit_counter\(24) <= NOT \division|bit_counter\(24);
\division|ALT_INV_bit_counter\(13) <= NOT \division|bit_counter\(13);
\division|ALT_INV_bit_counter\(14) <= NOT \division|bit_counter\(14);
\division|ALT_INV_bit_counter\(15) <= NOT \division|bit_counter\(15);
\division|ALT_INV_bit_counter\(16) <= NOT \division|bit_counter\(16);
\division|ALT_INV_bit_counter\(17) <= NOT \division|bit_counter\(17);
\division|ALT_INV_bit_counter\(18) <= NOT \division|bit_counter\(18);
\division|ALT_INV_bit_counter\(7) <= NOT \division|bit_counter\(7);
\division|ALT_INV_bit_counter\(8) <= NOT \division|bit_counter\(8);
\division|ALT_INV_bit_counter\(9) <= NOT \division|bit_counter\(9);
\division|ALT_INV_bit_counter\(10) <= NOT \division|bit_counter\(10);
\division|ALT_INV_bit_counter\(11) <= NOT \division|bit_counter\(11);
\division|ALT_INV_bit_counter\(12) <= NOT \division|bit_counter\(12);
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_10~5_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_10~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_10~17_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_7~5_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_8~5_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_10~13_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_10~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_10~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_10~9_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_9~5_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_10~5_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_10~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_10~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\;
\multiplication|ALT_INV_Data_Product\(9) <= NOT \multiplication|Data_Product\(9);
\multiplication|ALT_INV_Data_Product\(8) <= NOT \multiplication|Data_Product\(8);
\multiplication|ALT_INV_Data_Product\(7) <= NOT \multiplication|Data_Product\(7);
\multiplication|ALT_INV_Data_Product\(6) <= NOT \multiplication|Data_Product\(6);
\multiplication|ALT_INV_Data_Product\(5) <= NOT \multiplication|Data_Product\(5);
\multiplication|ALT_INV_Data_Product\(4) <= NOT \multiplication|Data_Product\(4);
\multiplication|ALT_INV_Data_Product\(3) <= NOT \multiplication|Data_Product\(3);
\multiplication|ALT_INV_Data_Product\(2) <= NOT \multiplication|Data_Product\(2);
\multiplication|ALT_INV_Data_Product\(1) <= NOT \multiplication|Data_Product\(1);
\add|ALT_INV_bit_counter\(11) <= NOT \add|bit_counter\(11);
\add|ALT_INV_bit_counter\(10) <= NOT \add|bit_counter\(10);
\add|ALT_INV_bit_counter\(20) <= NOT \add|bit_counter\(20);
\add|ALT_INV_bit_counter\(9) <= NOT \add|bit_counter\(9);
\add|ALT_INV_bit_counter\(21) <= NOT \add|bit_counter\(21);
\add|ALT_INV_bit_counter\(13) <= NOT \add|bit_counter\(13);
\add|ALT_INV_bit_counter\(12) <= NOT \add|bit_counter\(12);
\add|ALT_INV_bit_counter\(6) <= NOT \add|bit_counter\(6);
\division|ALT_INV_Add2~1_sumout\ <= NOT \division|Add2~1_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_10~17_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_7~5_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_10~13_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_10~13_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_8~5_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_10~13_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_10~9_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_9~5_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_10~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\;
\add|ALT_INV_Add0~9_sumout\ <= NOT \add|Add0~9_sumout\;
\add|ALT_INV_Add0~5_sumout\ <= NOT \add|Add0~5_sumout\;
\add|ALT_INV_Add0~1_sumout\ <= NOT \add|Add0~1_sumout\;
\multiplication|ALT_INV_bit_counter\(0) <= NOT \multiplication|bit_counter\(0);
\division|ALT_INV_Data_B\(5) <= NOT \division|Data_B\(5);
\division|ALT_INV_Data_B\(6) <= NOT \division|Data_B\(6);
\division|ALT_INV_Data_B\(7) <= NOT \division|Data_B\(7);
\division|ALT_INV_Data_B\(8) <= NOT \division|Data_B\(8);
\division|ALT_INV_Data_B\(2) <= NOT \division|Data_B\(2);
\division|ALT_INV_Data_B\(3) <= NOT \division|Data_B\(3);
\division|ALT_INV_Data_B\(4) <= NOT \division|Data_B\(4);
\division|ALT_INV_Data_B\(0) <= NOT \division|Data_B\(0);
\division|ALT_INV_Data_B\(1) <= NOT \division|Data_B\(1);
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\;
\division|ALT_INV_Add1~37_sumout\ <= NOT \division|Add1~37_sumout\;
\division|ALT_INV_Add0~37_sumout\ <= NOT \division|Add0~37_sumout\;
\division|ALT_INV_Add0~33_sumout\ <= NOT \division|Add0~33_sumout\;
\division|ALT_INV_Add1~33_sumout\ <= NOT \division|Add1~33_sumout\;
\division|ALT_INV_Add0~29_sumout\ <= NOT \division|Add0~29_sumout\;
\division|ALT_INV_Add1~29_sumout\ <= NOT \division|Add1~29_sumout\;
\division|ALT_INV_Add0~25_sumout\ <= NOT \division|Add0~25_sumout\;
\division|ALT_INV_Add1~25_sumout\ <= NOT \division|Add1~25_sumout\;
\division|ALT_INV_Add0~21_sumout\ <= NOT \division|Add0~21_sumout\;
\division|ALT_INV_Add1~21_sumout\ <= NOT \division|Add1~21_sumout\;
\division|ALT_INV_Add0~17_sumout\ <= NOT \division|Add0~17_sumout\;
\division|ALT_INV_Add1~17_sumout\ <= NOT \division|Add1~17_sumout\;
\division|ALT_INV_Add0~13_sumout\ <= NOT \division|Add0~13_sumout\;
\division|ALT_INV_Add1~13_sumout\ <= NOT \division|Add1~13_sumout\;
\division|ALT_INV_Add0~9_sumout\ <= NOT \division|Add0~9_sumout\;
\division|ALT_INV_Add1~9_sumout\ <= NOT \division|Add1~9_sumout\;
\division|ALT_INV_Add0~5_sumout\ <= NOT \division|Add0~5_sumout\;
\division|ALT_INV_Add1~5_sumout\ <= NOT \division|Add1~5_sumout\;
\division|ALT_INV_Add0~1_sumout\ <= NOT \division|Add0~1_sumout\;
\division|ALT_INV_Add1~1_sumout\ <= NOT \division|Add1~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\;
\multiplication|ALT_INV_Data_A\(9) <= NOT \multiplication|Data_A\(9);
\multiplication|ALT_INV_Data_A\(8) <= NOT \multiplication|Data_A\(8);
\multiplication|ALT_INV_Data_A\(7) <= NOT \multiplication|Data_A\(7);
\multiplication|ALT_INV_Data_A\(6) <= NOT \multiplication|Data_A\(6);
\multiplication|ALT_INV_Data_A\(5) <= NOT \multiplication|Data_A\(5);
\multiplication|ALT_INV_Data_A\(0) <= NOT \multiplication|Data_A\(0);
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_5~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_5~9_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_5~5_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_7~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_8~17_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_8~17_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\;
\division|ALT_INV_bit_counter\(0) <= NOT \division|bit_counter\(0);
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_5~5_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_5~25_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_5~25_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_5~25_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_5~9_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_9~37_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~37_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~37_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|op_9~21_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_9~21_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_9~21_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~21_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_9~21_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~21_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_7~25_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_5~13_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_7~25_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_6~21_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_7~33_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_8~37_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_9~41_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~41_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~41_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_6~21_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_7~29_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_9~37_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~37_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~37_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_5~17_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_7~29_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_6~25_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|op_6~25_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_7~33_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_8~37_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_9~41_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~41_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~41_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|op_5~21_sumout\;
\division|ALT_INV_LessThan0~2_combout\ <= NOT \division|LessThan0~2_combout\;
\division|ALT_INV_LessThan0~1_combout\ <= NOT \division|LessThan0~1_combout\;
\division|ALT_INV_LessThan0~0_combout\ <= NOT \division|LessThan0~0_combout\;
\division|ALT_INV_bit_counter\(31) <= NOT \division|bit_counter\(31);
\convert_binary|ALT_INV_int_data_4r\(1) <= NOT \convert_binary|int_data_4r\(1);
\convert_binary|ALT_INV_int_data_3\(3) <= NOT \convert_binary|int_data_3\(3);
\convert_binary|ALT_INV_int_data_3\(2) <= NOT \convert_binary|int_data_3\(2);
\convert_binary|ALT_INV_int_data_3\(1) <= NOT \convert_binary|int_data_3\(1);
\convert_binary|ALT_INV_int_data_3\(0) <= NOT \convert_binary|int_data_3\(0);
\convert_binary|ALT_INV_int_data_2\(3) <= NOT \convert_binary|int_data_2\(3);
\convert_binary|ALT_INV_int_data_2\(2) <= NOT \convert_binary|int_data_2\(2);
\convert_binary|ALT_INV_int_data_2\(1) <= NOT \convert_binary|int_data_2\(1);
\convert_binary|ALT_INV_int_data_2\(0) <= NOT \convert_binary|int_data_2\(0);
\convert_binary|ALT_INV_int_data_1\(3) <= NOT \convert_binary|int_data_1\(3);
\convert_binary|ALT_INV_int_data_1\(2) <= NOT \convert_binary|int_data_1\(2);
\convert_binary|ALT_INV_int_data_1\(1) <= NOT \convert_binary|int_data_1\(1);
\convert_binary|ALT_INV_int_data_1\(0) <= NOT \convert_binary|int_data_1\(0);
\division|ALT_INV_DONE~q\ <= NOT \division|DONE~q\;
\multiplication|ALT_INV_DONE~q\ <= NOT \multiplication|DONE~q\;
\add|ALT_INV_DONE~q\ <= NOT \add|DONE~q\;
\add|ALT_INV_sum\(9) <= NOT \add|sum\(9);
\sub|ALT_INV_sum\(9) <= NOT \sub|sum\(9);
\multiplication|ALT_INV_R\(9) <= NOT \multiplication|R\(9);
\division|ALT_INV_Q\(9) <= NOT \division|Q\(9);
\add|ALT_INV_sum\(8) <= NOT \add|sum\(8);
\sub|ALT_INV_sum\(8) <= NOT \sub|sum\(8);
\multiplication|ALT_INV_R\(8) <= NOT \multiplication|R\(8);
\division|ALT_INV_Q\(8) <= NOT \division|Q\(8);
\add|ALT_INV_sum\(7) <= NOT \add|sum\(7);
\sub|ALT_INV_sum\(7) <= NOT \sub|sum\(7);
\multiplication|ALT_INV_R\(7) <= NOT \multiplication|R\(7);
\division|ALT_INV_Q\(7) <= NOT \division|Q\(7);
\add|ALT_INV_sum\(6) <= NOT \add|sum\(6);
\sub|ALT_INV_sum\(6) <= NOT \sub|sum\(6);
\multiplication|ALT_INV_R\(6) <= NOT \multiplication|R\(6);
\division|ALT_INV_Q\(6) <= NOT \division|Q\(6);
\add|ALT_INV_sum\(5) <= NOT \add|sum\(5);
\sub|ALT_INV_sum\(5) <= NOT \sub|sum\(5);
\multiplication|ALT_INV_R\(5) <= NOT \multiplication|R\(5);
\division|ALT_INV_Q\(5) <= NOT \division|Q\(5);
\add|ALT_INV_sum\(4) <= NOT \add|sum\(4);
\sub|ALT_INV_sum\(4) <= NOT \sub|sum\(4);
\multiplication|ALT_INV_R\(4) <= NOT \multiplication|R\(4);
\division|ALT_INV_Q\(4) <= NOT \division|Q\(4);
\add|ALT_INV_sum\(3) <= NOT \add|sum\(3);
\sub|ALT_INV_sum\(3) <= NOT \sub|sum\(3);
\multiplication|ALT_INV_R\(3) <= NOT \multiplication|R\(3);
\division|ALT_INV_Q\(3) <= NOT \division|Q\(3);
\add|ALT_INV_sum\(2) <= NOT \add|sum\(2);
\sub|ALT_INV_sum\(2) <= NOT \sub|sum\(2);
\multiplication|ALT_INV_R\(2) <= NOT \multiplication|R\(2);
\division|ALT_INV_Q\(2) <= NOT \division|Q\(2);
\add|ALT_INV_sum\(1) <= NOT \add|sum\(1);
\sub|ALT_INV_sum\(1) <= NOT \sub|sum\(1);
\multiplication|ALT_INV_R\(1) <= NOT \multiplication|R\(1);
\division|ALT_INV_Q\(1) <= NOT \division|Q\(1);
\add|ALT_INV_sum\(0) <= NOT \add|sum\(0);
\sub|ALT_INV_sum\(0) <= NOT \sub|sum\(0);
\multiplication|ALT_INV_R\(0) <= NOT \multiplication|R\(0);
\division|ALT_INV_Q\(0) <= NOT \division|Q\(0);
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~1_combout\;
\convert_binary|ALT_INV_Mux23~1_combout\ <= NOT \convert_binary|Mux23~1_combout\;
\convert_binary|ALT_INV_Mux23~0_combout\ <= NOT \convert_binary|Mux23~0_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[71]~2_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[60]~1_combout\;
\convert_binary|ALT_INV_Mux24~2_combout\ <= NOT \convert_binary|Mux24~2_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~0_combout\;
\convert_binary|ALT_INV_Mux24~1_combout\ <= NOT \convert_binary|Mux24~1_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[70]~0_combout\;
\convert_binary|ALT_INV_Mux24~0_combout\ <= NOT \convert_binary|Mux24~0_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~0_combout\;
\convert_binary|ALT_INV_Mux25~3_combout\ <= NOT \convert_binary|Mux25~3_combout\;
\convert_binary|ALT_INV_Mux25~2_combout\ <= NOT \convert_binary|Mux25~2_combout\;
\convert_binary|ALT_INV_Mux25~1_combout\ <= NOT \convert_binary|Mux25~1_combout\;
\convert_binary|ALT_INV_Mux25~0_combout\ <= NOT \convert_binary|Mux25~0_combout\;
\convert_binary|ALT_INV_Mux26~2_combout\ <= NOT \convert_binary|Mux26~2_combout\;
\convert_binary|ALT_INV_Mux26~1_combout\ <= NOT \convert_binary|Mux26~1_combout\;
\convert_binary|ALT_INV_Mux26~0_combout\ <= NOT \convert_binary|Mux26~0_combout\;
\convert_binary|ALT_INV_Mux27~3_combout\ <= NOT \convert_binary|Mux27~3_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~2_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~1_combout\;
\convert_binary|ALT_INV_Mux27~2_combout\ <= NOT \convert_binary|Mux27~2_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~2_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~1_combout\;
\convert_binary|ALT_INV_Mux27~1_combout\ <= NOT \convert_binary|Mux27~1_combout\;
\convert_binary|ALT_INV_Mux27~0_combout\ <= NOT \convert_binary|Mux27~0_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[71]~2_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[60]~1_combout\;
\convert_binary|ALT_INV_Mux28~4_combout\ <= NOT \convert_binary|Mux28~4_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~0_combout\;
\convert_binary|ALT_INV_Mux28~3_combout\ <= NOT \convert_binary|Mux28~3_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[70]~0_combout\;
\convert_binary|ALT_INV_Mux28~2_combout\ <= NOT \convert_binary|Mux28~2_combout\;
\convert_binary|ALT_INV_Mux28~1_combout\ <= NOT \convert_binary|Mux28~1_combout\;
\convert_binary|ALT_INV_Mux28~0_combout\ <= NOT \convert_binary|Mux28~0_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~0_combout\;
\convert_binary|ALT_INV_Mux29~3_combout\ <= NOT \convert_binary|Mux29~3_combout\;
\convert_binary|ALT_INV_Mux29~2_combout\ <= NOT \convert_binary|Mux29~2_combout\;
\convert_binary|ALT_INV_Mux29~1_combout\ <= NOT \convert_binary|Mux29~1_combout\;
\convert_binary|ALT_INV_Mux29~0_combout\ <= NOT \convert_binary|Mux29~0_combout\;
\convert_binary|ALT_INV_Mux33~1_combout\ <= NOT \convert_binary|Mux33~1_combout\;
\convert_binary|ALT_INV_int_data_2[3]~0_combout\ <= NOT \convert_binary|int_data_2[3]~0_combout\;
\convert_binary|ALT_INV_Mux30~0_combout\ <= NOT \convert_binary|Mux30~0_combout\;
\sub|ALT_INV_cout_sub_overflow~q\ <= NOT \sub|cout_sub_overflow~q\;
\division|ALT_INV_state.S2~q\ <= NOT \division|state.S2~q\;
\division|ALT_INV_LessThan0~6_combout\ <= NOT \division|LessThan0~6_combout\;
\division|ALT_INV_Data_A\(9) <= NOT \division|Data_A\(9);
\division|ALT_INV_Data_A\(8) <= NOT \division|Data_A\(8);
\division|ALT_INV_Data_A\(7) <= NOT \division|Data_A\(7);
\division|ALT_INV_Data_A\(6) <= NOT \division|Data_A\(6);
\division|ALT_INV_Data_A\(5) <= NOT \division|Data_A\(5);
\division|ALT_INV_Data_A\(4) <= NOT \division|Data_A\(4);
\division|ALT_INV_Data_A\(3) <= NOT \division|Data_A\(3);
\division|ALT_INV_Data_A\(2) <= NOT \division|Data_A\(2);
\division|ALT_INV_Data_A\(1) <= NOT \division|Data_A\(1);
\division|ALT_INV_Data_A\(0) <= NOT \division|Data_A\(0);
\add|ALT_INV_Decoder0~9_combout\ <= NOT \add|Decoder0~9_combout\;
\add|ALT_INV_Decoder0~6_combout\ <= NOT \add|Decoder0~6_combout\;
\add|ALT_INV_Decoder0~3_combout\ <= NOT \add|Decoder0~3_combout\;
\add|ALT_INV_Mux2~1_combout\ <= NOT \add|Mux2~1_combout\;
\add|ALT_INV_cout\(4) <= NOT \add|cout\(4);
\add|ALT_INV_cout\(5) <= NOT \add|cout\(5);
\add|ALT_INV_Mux2~0_combout\ <= NOT \add|Mux2~0_combout\;
\add|ALT_INV_cout\(3) <= NOT \add|cout\(3);
\add|ALT_INV_cout\(2) <= NOT \add|cout\(2);
\add|ALT_INV_cout\(1) <= NOT \add|cout\(1);
\add|ALT_INV_cout\(0) <= NOT \add|cout\(0);
\add|ALT_INV_LessThan0~5_combout\ <= NOT \add|LessThan0~5_combout\;
\add|ALT_INV_LessThan0~4_combout\ <= NOT \add|LessThan0~4_combout\;
\add|ALT_INV_LessThan0~3_combout\ <= NOT \add|LessThan0~3_combout\;
\add|ALT_INV_LessThan0~2_combout\ <= NOT \add|LessThan0~2_combout\;
\add|ALT_INV_LessThan0~1_combout\ <= NOT \add|LessThan0~1_combout\;
\add|ALT_INV_LessThan0~0_combout\ <= NOT \add|LessThan0~0_combout\;
\add|ALT_INV_state~q\ <= NOT \add|state~q\;
\add|ALT_INV_Decoder0~0_combout\ <= NOT \add|Decoder0~0_combout\;
\sub|ALT_INV_Mux2~1_combout\ <= NOT \sub|Mux2~1_combout\;
\sub|ALT_INV_cout\(4) <= NOT \sub|cout\(4);
\sub|ALT_INV_cout\(5) <= NOT \sub|cout\(5);
\sub|ALT_INV_Mux2~0_combout\ <= NOT \sub|Mux2~0_combout\;
\sub|ALT_INV_cout\(3) <= NOT \sub|cout\(3);
\sub|ALT_INV_cout\(2) <= NOT \sub|cout\(2);
\sub|ALT_INV_cout\(1) <= NOT \sub|cout\(1);
\sub|ALT_INV_cout\(0) <= NOT \sub|cout\(0);
\add|ALT_INV_Mux0~0_combout\ <= NOT \add|Mux0~0_combout\;
\add|ALT_INV_Mux1~0_combout\ <= NOT \add|Mux1~0_combout\;
\multiplication|ALT_INV_LessThan0~5_combout\ <= NOT \multiplication|LessThan0~5_combout\;
\multiplication|ALT_INV_LessThan0~4_combout\ <= NOT \multiplication|LessThan0~4_combout\;
\multiplication|ALT_INV_LessThan0~3_combout\ <= NOT \multiplication|LessThan0~3_combout\;
\multiplication|ALT_INV_LessThan0~2_combout\ <= NOT \multiplication|LessThan0~2_combout\;
\multiplication|ALT_INV_LessThan0~1_combout\ <= NOT \multiplication|LessThan0~1_combout\;
\multiplication|ALT_INV_LessThan0~0_combout\ <= NOT \multiplication|LessThan0~0_combout\;
\multiplication|ALT_INV_state~q\ <= NOT \multiplication|state~q\;
\division|ALT_INV_state.S1~q\ <= NOT \division|state.S1~q\;
\division|ALT_INV_LessThan0~5_combout\ <= NOT \division|LessThan0~5_combout\;
\division|ALT_INV_LessThan0~4_combout\ <= NOT \division|LessThan0~4_combout\;
\division|ALT_INV_LessThan0~3_combout\ <= NOT \division|LessThan0~3_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[77]~3_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[37]~3_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[31]~2_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[25]~1_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[37]~0_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~3_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~0_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[77]~8_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~8_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~7_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~7_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~6_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~6_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~5_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~4_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~3_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[77]~8_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~8_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~7_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~7_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~6_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~6_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~5_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~4_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~3_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~3_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~0_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~5_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~4_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~3_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~0_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[61]~3_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~2_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~1_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[61]~0_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~3_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~0_combout\;
\multiplication|ALT_INV_Data_A\(4) <= NOT \multiplication|Data_A\(4);
\multiplication|ALT_INV_Data_A\(3) <= NOT \multiplication|Data_A\(3);
\multiplication|ALT_INV_Data_A\(2) <= NOT \multiplication|Data_A\(2);
\multiplication|ALT_INV_Data_A\(1) <= NOT \multiplication|Data_A\(1);
\add|ALT_INV_cout[4]~9_combout\ <= NOT \add|cout[4]~9_combout\;
\add|ALT_INV_cout[3]~5_combout\ <= NOT \add|cout[3]~5_combout\;
\add|ALT_INV_cout[5]~3_combout\ <= NOT \add|cout[5]~3_combout\;
\add|ALT_INV_cout[0]~1_combout\ <= NOT \add|cout[0]~1_combout\;
\add|ALT_INV_cout~0_combout\ <= NOT \add|cout~0_combout\;
\sub|ALT_INV_cout[4]~11_combout\ <= NOT \sub|cout[4]~11_combout\;
\sub|ALT_INV_cout[5]~9_combout\ <= NOT \sub|cout[5]~9_combout\;
\sub|ALT_INV_cout[3]~7_combout\ <= NOT \sub|cout[3]~7_combout\;
\sub|ALT_INV_cout[2]~5_combout\ <= NOT \sub|cout[2]~5_combout\;
\sub|ALT_INV_cout[1]~3_combout\ <= NOT \sub|cout[1]~3_combout\;
\sub|ALT_INV_cout[0]~1_combout\ <= NOT \sub|cout[0]~1_combout\;
\sub|ALT_INV_Mux0~0_combout\ <= NOT \sub|Mux0~0_combout\;
\sub|ALT_INV_Mux1~0_combout\ <= NOT \sub|Mux1~0_combout\;
\multiplication|ALT_INV_Mux0~0_combout\ <= NOT \multiplication|Mux0~0_combout\;
\multiplication|ALT_INV_Data_B\(3) <= NOT \multiplication|Data_B\(3);
\multiplication|ALT_INV_Data_B\(2) <= NOT \multiplication|Data_B\(2);
\multiplication|ALT_INV_Data_B\(1) <= NOT \multiplication|Data_B\(1);
\multiplication|ALT_INV_Data_B\(0) <= NOT \multiplication|Data_B\(0);
\multiplication|ALT_INV_Data_B\(4) <= NOT \multiplication|Data_B\(4);
\division|ALT_INV_Equal0~2_combout\ <= NOT \division|Equal0~2_combout\;
\division|ALT_INV_Equal0~1_combout\ <= NOT \division|Equal0~1_combout\;
\division|ALT_INV_Equal0~0_combout\ <= NOT \division|Equal0~0_combout\;
\division|ALT_INV_Data_B\(9) <= NOT \division|Data_B\(9);
\division|ALT_INV_state.S0~q\ <= NOT \division|state.S0~q\;
\convert_binary|ALT_INV_Mux23~3_combout\ <= NOT \convert_binary|Mux23~3_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~2_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~1_combout\;
\convert_binary|ALT_INV_Mux23~2_combout\ <= NOT \convert_binary|Mux23~2_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~2_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[32]~15_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~15_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[54]~14_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~14_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[76]~13_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[76]~20_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~20_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[65]~19_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~19_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~18_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~18_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[43]~17_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~17_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~16_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~16_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~15_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~15_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~14_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~14_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~13_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~18_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~17_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[76]~13_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[65]~12_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[65]~12_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[54]~11_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~11_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[54]~10_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~10_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[76]~9_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[76]~9_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[36]~16_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[30]~15_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[36]~16_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~13_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[65]~12_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~12_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~11_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~11_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~10_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~10_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[76]~9_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~9_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~13_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[65]~12_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~12_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~11_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~11_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~10_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~10_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[76]~9_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~9_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[36]~16_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~10_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~6_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[60]~10_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~9_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~8_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~7_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[60]~6_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~10_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~6_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[77]~12_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~12_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~11_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~11_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~10_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~10_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~9_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~9_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~8_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~7_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~6_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~6_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~5_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~4_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~3_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[77]~12_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[77]~12_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[66]~11_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~11_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[55]~10_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~10_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[44]~9_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~9_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~8_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~7_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[44]~6_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~6_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~5_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~4_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[77]~3_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[77]~12_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~12_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~11_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~11_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~10_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~10_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~9_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~9_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~8_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~7_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~6_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~6_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~5_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~4_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~3_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~14_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~12_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~14_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~12_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[22]~14_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~13_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[22]~12_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~11_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~8_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[27]~11_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[21]~10_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[15]~9_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[27]~8_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~11_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~8_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[32]~7_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[26]~6_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[20]~5_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[32]~4_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~7_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~4_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~7_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~4_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[77]~8_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[77]~8_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[66]~7_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~7_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[55]~6_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~6_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~5_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~4_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[41]~33_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~33_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[30]~32_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~32_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~31_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~31_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[74]~30_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~30_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~29_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~29_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~28_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~28_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[74]~36_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[74]~36_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[63]~35_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[63]~35_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[52]~34_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~34_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[41]~33_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[41]~33_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[30]~32_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[30]~32_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[52]~31_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~31_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[74]~30_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[74]~30_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[31]~29_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~29_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[31]~28_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~28_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[74]~36_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~36_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[63]~35_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~35_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~34_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~34_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[41]~33_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~33_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[30]~32_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~32_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~31_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~31_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[74]~30_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~30_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~29_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~29_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~28_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~28_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[74]~23_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[74]~23_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[63]~22_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[63]~22_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~21_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[41]~20_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[41]~20_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[52]~19_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~19_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[74]~18_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[74]~18_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[74]~23_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~23_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[63]~22_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~22_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[41]~20_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~20_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~19_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~19_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[74]~18_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~18_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[74]~23_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~23_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[63]~22_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~22_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[41]~20_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~20_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~19_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~19_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[74]~18_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~18_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~18_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~14_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[58]~18_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~17_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~16_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~15_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[58]~14_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~18_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~14_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[75]~27_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[75]~27_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~26_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~26_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[53]~25_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~25_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~23_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~23_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~22_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~22_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~21_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~21_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[75]~27_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[75]~27_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[64]~26_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~26_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[53]~25_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[53]~25_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~24_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[31]~23_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~23_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[42]~22_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~22_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[64]~21_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~21_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[75]~27_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[75]~27_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~26_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~26_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[53]~25_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~25_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~23_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~23_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~22_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~22_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~21_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~21_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[18]~23_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[18]~22_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~23_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~22_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~23_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~22_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[75]~17_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[75]~17_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~16_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[53]~15_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[53]~15_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[64]~14_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~14_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[35]~21_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[17]~20_combout\;
\convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\ <= NOT \convert_binary|Div4|auto_generated|divider|divider|StageOut[17]~19_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[35]~21_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~20_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~19_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[75]~17_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[75]~17_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[53]~15_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~15_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~14_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~14_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[75]~17_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[75]~17_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[53]~15_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~15_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~14_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~14_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[35]~21_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~20_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~19_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[59]~13_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[59]~13_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~12_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~11_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[59]~13_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[76]~20_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~20_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[65]~19_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~19_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~18_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~18_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[43]~17_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~17_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~16_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~16_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~15_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~15_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~14_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~14_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~13_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[76]~20_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[76]~20_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[65]~19_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[65]~19_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[54]~18_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~18_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[43]~17_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[43]~17_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[32]~16_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~16_combout\;
\convert_binary|ALT_INV_Mux30~3_combout\ <= NOT \convert_binary|Mux30~3_combout\;
\convert_binary|ALT_INV_Mux30~2_combout\ <= NOT \convert_binary|Mux30~2_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[72]~45_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~45_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[61]~44_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~44_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[50]~43_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~43_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[72]~42_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~42_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[72]~45_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[72]~45_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[61]~44_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[61]~44_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[50]~43_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[50]~43_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[72]~42_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[72]~42_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[72]~45_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~45_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[61]~44_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~44_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[50]~43_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~43_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[72]~42_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~42_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[72]~32_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[72]~32_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[61]~31_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[61]~31_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[50]~30_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[50]~30_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[72]~29_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[72]~29_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[72]~32_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~32_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[61]~31_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~31_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[50]~30_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~30_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[72]~29_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~29_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[72]~32_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~32_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[61]~31_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~31_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[50]~30_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~30_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[72]~29_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~29_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[56]~21_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[56]~21_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[56]~21_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[73]~41_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[73]~41_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~40_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~40_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[51]~39_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~39_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[40]~38_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~38_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~37_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~37_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[73]~41_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[73]~41_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[62]~40_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~40_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[51]~39_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[51]~39_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[40]~38_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[40]~38_combout\;
\convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[62]~37_combout\ <= NOT \convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~37_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[73]~41_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[73]~41_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~40_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~40_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[51]~39_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~39_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[40]~38_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~38_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~37_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~37_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[73]~28_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[73]~28_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[62]~27_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~27_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[51]~26_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[51]~26_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[40]~25_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[40]~25_combout\;
\convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[62]~24_combout\ <= NOT \convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~24_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[73]~28_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[73]~28_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~27_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~27_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[51]~26_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~26_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[40]~25_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~25_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~24_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~24_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[73]~28_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[73]~28_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~27_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~27_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[51]~26_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~26_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[40]~25_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~25_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~24_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~24_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[57]~20_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[57]~20_combout\;
\convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\ <= NOT \convert_binary|Div5|auto_generated|divider|divider|StageOut[48]~19_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[57]~20_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[74]~36_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~36_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[63]~35_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~35_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~34_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~34_combout\;
\ALT_INV_Start~input_o\ <= NOT \Start~input_o\;
\ALT_INV_A[3]~input_o\ <= NOT \A[3]~input_o\;
\ALT_INV_A[2]~input_o\ <= NOT \A[2]~input_o\;
\ALT_INV_A[1]~input_o\ <= NOT \A[1]~input_o\;
\ALT_INV_A[0]~input_o\ <= NOT \A[0]~input_o\;
\ALT_INV_A[4]~input_o\ <= NOT \A[4]~input_o\;
\ALT_INV_B[3]~input_o\ <= NOT \B[3]~input_o\;
\ALT_INV_B[2]~input_o\ <= NOT \B[2]~input_o\;
\ALT_INV_B[1]~input_o\ <= NOT \B[1]~input_o\;
\ALT_INV_B[0]~input_o\ <= NOT \B[0]~input_o\;
\ALT_INV_B[4]~input_o\ <= NOT \B[4]~input_o\;
\ALT_INV_RST_N~input_o\ <= NOT \RST_N~input_o\;
\ALT_INV_Operation[1]~input_o\ <= NOT \Operation[1]~input_o\;
\ALT_INV_Operation[0]~input_o\ <= NOT \Operation[0]~input_o\;

\Result[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Result\(0),
	devoe => ww_devoe,
	o => \Result[0]~output_o\);

\Result[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Result\(1),
	devoe => ww_devoe,
	o => \Result[1]~output_o\);

\Result[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Result\(2),
	devoe => ww_devoe,
	o => \Result[2]~output_o\);

\Result[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Result\(3),
	devoe => ww_devoe,
	o => \Result[3]~output_o\);

\Result[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Result\(4),
	devoe => ww_devoe,
	o => \Result[4]~output_o\);

\Result[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Result\(5),
	devoe => ww_devoe,
	o => \Result[5]~output_o\);

\Result[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Result\(6),
	devoe => ww_devoe,
	o => \Result[6]~output_o\);

\Result[7]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Result\(7),
	devoe => ww_devoe,
	o => \Result[7]~output_o\);

\Result[8]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Result\(8),
	devoe => ww_devoe,
	o => \Result[8]~output_o\);

\Result[9]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Result\(9),
	devoe => ww_devoe,
	o => \Result[9]~output_o\);

\Remainder[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Remainder\(0),
	devoe => ww_devoe,
	o => \Remainder[0]~output_o\);

\Remainder[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Remainder\(1),
	devoe => ww_devoe,
	o => \Remainder[1]~output_o\);

\Remainder[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Remainder\(2),
	devoe => ww_devoe,
	o => \Remainder[2]~output_o\);

\Remainder[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Remainder\(3),
	devoe => ww_devoe,
	o => \Remainder[3]~output_o\);

\Remainder[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Remainder\(4),
	devoe => ww_devoe,
	o => \Remainder[4]~output_o\);

\Remainder[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Remainder\(5),
	devoe => ww_devoe,
	o => \Remainder[5]~output_o\);

\Remainder[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Remainder\(6),
	devoe => ww_devoe,
	o => \Remainder[6]~output_o\);

\Remainder[7]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Remainder\(7),
	devoe => ww_devoe,
	o => \Remainder[7]~output_o\);

\Remainder[8]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Remainder\(8),
	devoe => ww_devoe,
	o => \Remainder[8]~output_o\);

\Remainder[9]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Remainder\(9),
	devoe => ww_devoe,
	o => \Remainder[9]~output_o\);

\Done~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \convert_binary|Done~q\,
	devoe => ww_devoe,
	o => \Done~output_o\);

\seven_seg_digit_1[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(0),
	devoe => ww_devoe,
	o => \seven_seg_digit_1[0]~output_o\);

\seven_seg_digit_1[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(1),
	devoe => ww_devoe,
	o => \seven_seg_digit_1[1]~output_o\);

\seven_seg_digit_1[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(2),
	devoe => ww_devoe,
	o => \seven_seg_digit_1[2]~output_o\);

\seven_seg_digit_1[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(3),
	devoe => ww_devoe,
	o => \seven_seg_digit_1[3]~output_o\);

\seven_seg_digit_1[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(4),
	devoe => ww_devoe,
	o => \seven_seg_digit_1[4]~output_o\);

\seven_seg_digit_1[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(5),
	devoe => ww_devoe,
	o => \seven_seg_digit_1[5]~output_o\);

\seven_seg_digit_1[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(6),
	devoe => ww_devoe,
	o => \seven_seg_digit_1[6]~output_o\);

\seven_seg_digit_2[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(0),
	devoe => ww_devoe,
	o => \seven_seg_digit_2[0]~output_o\);

\seven_seg_digit_2[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(1),
	devoe => ww_devoe,
	o => \seven_seg_digit_2[1]~output_o\);

\seven_seg_digit_2[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(2),
	devoe => ww_devoe,
	o => \seven_seg_digit_2[2]~output_o\);

\seven_seg_digit_2[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(3),
	devoe => ww_devoe,
	o => \seven_seg_digit_2[3]~output_o\);

\seven_seg_digit_2[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(4),
	devoe => ww_devoe,
	o => \seven_seg_digit_2[4]~output_o\);

\seven_seg_digit_2[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(5),
	devoe => ww_devoe,
	o => \seven_seg_digit_2[5]~output_o\);

\seven_seg_digit_2[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(6),
	devoe => ww_devoe,
	o => \seven_seg_digit_2[6]~output_o\);

\seven_seg_digit_3[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(0),
	devoe => ww_devoe,
	o => \seven_seg_digit_3[0]~output_o\);

\seven_seg_digit_3[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(1),
	devoe => ww_devoe,
	o => \seven_seg_digit_3[1]~output_o\);

\seven_seg_digit_3[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(2),
	devoe => ww_devoe,
	o => \seven_seg_digit_3[2]~output_o\);

\seven_seg_digit_3[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(3),
	devoe => ww_devoe,
	o => \seven_seg_digit_3[3]~output_o\);

\seven_seg_digit_3[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(4),
	devoe => ww_devoe,
	o => \seven_seg_digit_3[4]~output_o\);

\seven_seg_digit_3[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(5),
	devoe => ww_devoe,
	o => \seven_seg_digit_3[5]~output_o\);

\seven_seg_digit_3[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(6),
	devoe => ww_devoe,
	o => \seven_seg_digit_3[6]~output_o\);

\seven_seg_digit_4r[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_4|seven_seg\(0),
	devoe => ww_devoe,
	o => \seven_seg_digit_4r[0]~output_o\);

\seven_seg_digit_4r[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_4|seven_seg\(1),
	devoe => ww_devoe,
	o => \seven_seg_digit_4r[1]~output_o\);

\seven_seg_digit_4r[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_4|seven_seg\(2),
	devoe => ww_devoe,
	o => \seven_seg_digit_4r[2]~output_o\);

\seven_seg_digit_4r[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => GND,
	devoe => ww_devoe,
	o => \seven_seg_digit_4r[3]~output_o\);

\seven_seg_digit_4r[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => GND,
	devoe => ww_devoe,
	o => \seven_seg_digit_4r[4]~output_o\);

\seven_seg_digit_4r[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => GND,
	devoe => ww_devoe,
	o => \seven_seg_digit_4r[5]~output_o\);

\seven_seg_digit_4r[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_4|seven_seg\(6),
	devoe => ww_devoe,
	o => \seven_seg_digit_4r[6]~output_o\);

\seven_seg_digit_5r[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_5|seven_seg\(0),
	devoe => ww_devoe,
	o => \seven_seg_digit_5r[0]~output_o\);

\seven_seg_digit_5r[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_5|seven_seg\(1),
	devoe => ww_devoe,
	o => \seven_seg_digit_5r[1]~output_o\);

\seven_seg_digit_5r[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_5|seven_seg\(2),
	devoe => ww_devoe,
	o => \seven_seg_digit_5r[2]~output_o\);

\seven_seg_digit_5r[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => GND,
	devoe => ww_devoe,
	o => \seven_seg_digit_5r[3]~output_o\);

\seven_seg_digit_5r[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => GND,
	devoe => ww_devoe,
	o => \seven_seg_digit_5r[4]~output_o\);

\seven_seg_digit_5r[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => GND,
	devoe => ww_devoe,
	o => \seven_seg_digit_5r[5]~output_o\);

\seven_seg_digit_5r[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_5|seven_seg\(6),
	devoe => ww_devoe,
	o => \seven_seg_digit_5r[6]~output_o\);

\seven_seg_digit_6r[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_6|seven_seg\(0),
	devoe => ww_devoe,
	o => \seven_seg_digit_6r[0]~output_o\);

\seven_seg_digit_6r[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_6|seven_seg\(1),
	devoe => ww_devoe,
	o => \seven_seg_digit_6r[1]~output_o\);

\seven_seg_digit_6r[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_6|seven_seg\(2),
	devoe => ww_devoe,
	o => \seven_seg_digit_6r[2]~output_o\);

\seven_seg_digit_6r[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => GND,
	devoe => ww_devoe,
	o => \seven_seg_digit_6r[3]~output_o\);

\seven_seg_digit_6r[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => GND,
	devoe => ww_devoe,
	o => \seven_seg_digit_6r[4]~output_o\);

\seven_seg_digit_6r[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => GND,
	devoe => ww_devoe,
	o => \seven_seg_digit_6r[5]~output_o\);

\seven_seg_digit_6r[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_6|seven_seg\(6),
	devoe => ww_devoe,
	o => \seven_seg_digit_6r[6]~output_o\);

\CLK~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_CLK,
	o => \CLK~input_o\);

\RST_N~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_RST_N,
	o => \RST_N~input_o\);

\division|Add2~125\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~125_sumout\ = SUM(( \division|bit_counter\(0) ) + ( VCC ) + ( !VCC ))
-- \division|Add2~126\ = CARRY(( \division|bit_counter\(0) ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(0),
	cin => GND,
	sumout => \division|Add2~125_sumout\,
	cout => \division|Add2~126\);

\division|Add2~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~5_sumout\ = SUM(( \division|bit_counter\(12) ) + ( GND ) + ( \division|Add2~10\ ))
-- \division|Add2~6\ = CARRY(( \division|bit_counter\(12) ) + ( GND ) + ( \division|Add2~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(12),
	cin => \division|Add2~10\,
	sumout => \division|Add2~5_sumout\,
	cout => \division|Add2~6\);

\division|Add2~49\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~49_sumout\ = SUM(( \division|bit_counter\(13) ) + ( GND ) + ( \division|Add2~6\ ))
-- \division|Add2~50\ = CARRY(( \division|bit_counter\(13) ) + ( GND ) + ( \division|Add2~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(13),
	cin => \division|Add2~6\,
	sumout => \division|Add2~49_sumout\,
	cout => \division|Add2~50\);

\division|bit_counter[13]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~49_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(13));

\division|Add2~45\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~45_sumout\ = SUM(( \division|bit_counter\(14) ) + ( GND ) + ( \division|Add2~50\ ))
-- \division|Add2~46\ = CARRY(( \division|bit_counter\(14) ) + ( GND ) + ( \division|Add2~50\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(14),
	cin => \division|Add2~50\,
	sumout => \division|Add2~45_sumout\,
	cout => \division|Add2~46\);

\division|bit_counter[14]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~45_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(14));

\division|Add2~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~41_sumout\ = SUM(( \division|bit_counter\(15) ) + ( GND ) + ( \division|Add2~46\ ))
-- \division|Add2~42\ = CARRY(( \division|bit_counter\(15) ) + ( GND ) + ( \division|Add2~46\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(15),
	cin => \division|Add2~46\,
	sumout => \division|Add2~41_sumout\,
	cout => \division|Add2~42\);

\division|bit_counter[15]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~41_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(15));

\division|Add2~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~37_sumout\ = SUM(( \division|bit_counter\(16) ) + ( GND ) + ( \division|Add2~42\ ))
-- \division|Add2~38\ = CARRY(( \division|bit_counter\(16) ) + ( GND ) + ( \division|Add2~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(16),
	cin => \division|Add2~42\,
	sumout => \division|Add2~37_sumout\,
	cout => \division|Add2~38\);

\division|bit_counter[16]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~37_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(16));

\division|Add2~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~33_sumout\ = SUM(( \division|bit_counter\(17) ) + ( GND ) + ( \division|Add2~38\ ))
-- \division|Add2~34\ = CARRY(( \division|bit_counter\(17) ) + ( GND ) + ( \division|Add2~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(17),
	cin => \division|Add2~38\,
	sumout => \division|Add2~33_sumout\,
	cout => \division|Add2~34\);

\division|bit_counter[17]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~33_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(17));

\division|Add2~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~29_sumout\ = SUM(( \division|bit_counter\(18) ) + ( GND ) + ( \division|Add2~34\ ))
-- \division|Add2~30\ = CARRY(( \division|bit_counter\(18) ) + ( GND ) + ( \division|Add2~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(18),
	cin => \division|Add2~34\,
	sumout => \division|Add2~29_sumout\,
	cout => \division|Add2~30\);

\division|bit_counter[18]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~29_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(18));

\division|LessThan0~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|LessThan0~1_combout\ = ( !\division|bit_counter\(14) & ( !\division|bit_counter\(13) & ( (!\division|bit_counter\(18) & (!\division|bit_counter\(17) & (!\division|bit_counter\(16) & !\division|bit_counter\(15)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_bit_counter\(18),
	datab => \division|ALT_INV_bit_counter\(17),
	datac => \division|ALT_INV_bit_counter\(16),
	datad => \division|ALT_INV_bit_counter\(15),
	datae => \division|ALT_INV_bit_counter\(14),
	dataf => \division|ALT_INV_bit_counter\(13),
	combout => \division|LessThan0~1_combout\);

\division|Add2~73\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~73_sumout\ = SUM(( \division|bit_counter\(19) ) + ( GND ) + ( \division|Add2~30\ ))
-- \division|Add2~74\ = CARRY(( \division|bit_counter\(19) ) + ( GND ) + ( \division|Add2~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(19),
	cin => \division|Add2~30\,
	sumout => \division|Add2~73_sumout\,
	cout => \division|Add2~74\);

\division|bit_counter[19]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~73_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(19));

\division|Add2~69\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~69_sumout\ = SUM(( \division|bit_counter\(20) ) + ( GND ) + ( \division|Add2~74\ ))
-- \division|Add2~70\ = CARRY(( \division|bit_counter\(20) ) + ( GND ) + ( \division|Add2~74\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(20),
	cin => \division|Add2~74\,
	sumout => \division|Add2~69_sumout\,
	cout => \division|Add2~70\);

\division|bit_counter[20]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~69_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(20));

\division|Add2~65\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~65_sumout\ = SUM(( \division|bit_counter\(21) ) + ( GND ) + ( \division|Add2~70\ ))
-- \division|Add2~66\ = CARRY(( \division|bit_counter\(21) ) + ( GND ) + ( \division|Add2~70\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(21),
	cin => \division|Add2~70\,
	sumout => \division|Add2~65_sumout\,
	cout => \division|Add2~66\);

\division|bit_counter[21]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~65_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(21));

\division|Add2~61\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~61_sumout\ = SUM(( \division|bit_counter\(22) ) + ( GND ) + ( \division|Add2~66\ ))
-- \division|Add2~62\ = CARRY(( \division|bit_counter\(22) ) + ( GND ) + ( \division|Add2~66\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(22),
	cin => \division|Add2~66\,
	sumout => \division|Add2~61_sumout\,
	cout => \division|Add2~62\);

\division|bit_counter[22]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~61_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(22));

\division|Add2~57\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~57_sumout\ = SUM(( \division|bit_counter\(23) ) + ( GND ) + ( \division|Add2~62\ ))
-- \division|Add2~58\ = CARRY(( \division|bit_counter\(23) ) + ( GND ) + ( \division|Add2~62\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(23),
	cin => \division|Add2~62\,
	sumout => \division|Add2~57_sumout\,
	cout => \division|Add2~58\);

\division|bit_counter[23]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~57_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(23));

\division|Add2~53\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~53_sumout\ = SUM(( \division|bit_counter\(24) ) + ( GND ) + ( \division|Add2~58\ ))
-- \division|Add2~54\ = CARRY(( \division|bit_counter\(24) ) + ( GND ) + ( \division|Add2~58\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(24),
	cin => \division|Add2~58\,
	sumout => \division|Add2~53_sumout\,
	cout => \division|Add2~54\);

\division|bit_counter[24]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~53_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(24));

\division|LessThan0~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|LessThan0~2_combout\ = ( !\division|bit_counter\(20) & ( !\division|bit_counter\(19) & ( (!\division|bit_counter\(24) & (!\division|bit_counter\(23) & (!\division|bit_counter\(22) & !\division|bit_counter\(21)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_bit_counter\(24),
	datab => \division|ALT_INV_bit_counter\(23),
	datac => \division|ALT_INV_bit_counter\(22),
	datad => \division|ALT_INV_bit_counter\(21),
	datae => \division|ALT_INV_bit_counter\(20),
	dataf => \division|ALT_INV_bit_counter\(19),
	combout => \division|LessThan0~2_combout\);

\division|LessThan0~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|LessThan0~3_combout\ = ( !\division|bit_counter\(4) & ( !\division|bit_counter\(3) & ( (!\division|bit_counter\(6) & (!\division|bit_counter\(5) & ((!\division|bit_counter\(2)) # (!\division|bit_counter\(1))))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1110000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_bit_counter\(2),
	datab => \division|ALT_INV_bit_counter\(1),
	datac => \division|ALT_INV_bit_counter\(6),
	datad => \division|ALT_INV_bit_counter\(5),
	datae => \division|ALT_INV_bit_counter\(4),
	dataf => \division|ALT_INV_bit_counter\(3),
	combout => \division|LessThan0~3_combout\);

\division|Add2~121\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~121_sumout\ = SUM(( \division|bit_counter\(25) ) + ( GND ) + ( \division|Add2~54\ ))
-- \division|Add2~122\ = CARRY(( \division|bit_counter\(25) ) + ( GND ) + ( \division|Add2~54\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(25),
	cin => \division|Add2~54\,
	sumout => \division|Add2~121_sumout\,
	cout => \division|Add2~122\);

\division|bit_counter[25]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~121_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(25));

\division|Add2~117\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~117_sumout\ = SUM(( \division|bit_counter\(26) ) + ( GND ) + ( \division|Add2~122\ ))
-- \division|Add2~118\ = CARRY(( \division|bit_counter\(26) ) + ( GND ) + ( \division|Add2~122\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(26),
	cin => \division|Add2~122\,
	sumout => \division|Add2~117_sumout\,
	cout => \division|Add2~118\);

\division|bit_counter[26]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~117_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(26));

\division|Add2~113\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~113_sumout\ = SUM(( \division|bit_counter\(27) ) + ( GND ) + ( \division|Add2~118\ ))
-- \division|Add2~114\ = CARRY(( \division|bit_counter\(27) ) + ( GND ) + ( \division|Add2~118\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(27),
	cin => \division|Add2~118\,
	sumout => \division|Add2~113_sumout\,
	cout => \division|Add2~114\);

\division|bit_counter[27]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~113_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(27));

\division|Add2~109\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~109_sumout\ = SUM(( \division|bit_counter\(28) ) + ( GND ) + ( \division|Add2~114\ ))
-- \division|Add2~110\ = CARRY(( \division|bit_counter\(28) ) + ( GND ) + ( \division|Add2~114\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(28),
	cin => \division|Add2~114\,
	sumout => \division|Add2~109_sumout\,
	cout => \division|Add2~110\);

\division|bit_counter[28]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~109_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(28));

\division|Add2~101\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~101_sumout\ = SUM(( \division|bit_counter\(29) ) + ( GND ) + ( \division|Add2~110\ ))
-- \division|Add2~102\ = CARRY(( \division|bit_counter\(29) ) + ( GND ) + ( \division|Add2~110\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(29),
	cin => \division|Add2~110\,
	sumout => \division|Add2~101_sumout\,
	cout => \division|Add2~102\);

\division|bit_counter[29]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~101_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(29));

\division|Add2~105\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~105_sumout\ = SUM(( \division|bit_counter\(30) ) + ( GND ) + ( \division|Add2~102\ ))
-- \division|Add2~106\ = CARRY(( \division|bit_counter\(30) ) + ( GND ) + ( \division|Add2~102\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(30),
	cin => \division|Add2~102\,
	sumout => \division|Add2~105_sumout\,
	cout => \division|Add2~106\);

\division|bit_counter[30]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~105_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(30));

\division|LessThan0~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|LessThan0~4_combout\ = ( !\division|bit_counter\(26) & ( !\division|bit_counter\(25) & ( (!\division|bit_counter\(29) & (!\division|bit_counter\(30) & (!\division|bit_counter\(28) & !\division|bit_counter\(27)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_bit_counter\(29),
	datab => \division|ALT_INV_bit_counter\(30),
	datac => \division|ALT_INV_bit_counter\(28),
	datad => \division|ALT_INV_bit_counter\(27),
	datae => \division|ALT_INV_bit_counter\(26),
	dataf => \division|ALT_INV_bit_counter\(25),
	combout => \division|LessThan0~4_combout\);

\division|LessThan0~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|LessThan0~5_combout\ = (\division|LessThan0~1_combout\ & (\division|LessThan0~2_combout\ & (\division|LessThan0~3_combout\ & \division|LessThan0~4_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000001000000000000000100000000000000010000000000000001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~1_combout\,
	datab => \division|ALT_INV_LessThan0~2_combout\,
	datac => \division|ALT_INV_LessThan0~3_combout\,
	datad => \division|ALT_INV_LessThan0~4_combout\,
	combout => \division|LessThan0~5_combout\);

\Start~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_Start,
	o => \Start~input_o\);

\B[0]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_B(0),
	o => \B[0]~input_o\);

\B[1]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_B(1),
	o => \B[1]~input_o\);

\B[2]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_B(2),
	o => \B[2]~input_o\);

\B[3]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_B(3),
	o => \B[3]~input_o\);

\B[4]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_B(4),
	o => \B[4]~input_o\);

\division|Selector10~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector10~0_combout\ = ( \division|state.S0~q\ & ( \division|Data_B\(9) & ( (!\division|LessThan0~6_combout\ & \division|state.S1~q\) ) ) ) # ( !\division|state.S0~q\ & ( \division|Data_B\(9) & ( (((!\division|LessThan0~6_combout\ & 
-- \division|state.S1~q\)) # (\Start~input_o\)) # (\B[4]~input_o\) ) ) ) # ( !\division|state.S0~q\ & ( !\division|Data_B\(9) & ( (\B[4]~input_o\ & !\Start~input_o\) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111100000000000000000000000000101111111111110010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~6_combout\,
	datab => \division|ALT_INV_state.S1~q\,
	datac => \ALT_INV_B[4]~input_o\,
	datad => \ALT_INV_Start~input_o\,
	datae => \division|ALT_INV_state.S0~q\,
	dataf => \division|ALT_INV_Data_B\(9),
	combout => \division|Selector10~0_combout\);

\division|Data_B[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector10~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_B\(9));

\division|Selector11~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector11~0_combout\ = (!\division|state.S2~q\ & (\B[3]~input_o\)) # (\division|state.S2~q\ & ((\division|Data_B\(9))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100011101000111010001110100011101000111010001110100011101000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_B[3]~input_o\,
	datab => \division|ALT_INV_state.S2~q\,
	datac => \division|ALT_INV_Data_B\(9),
	combout => \division|Selector11~0_combout\);

\division|Data_B[5]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Data_B[5]~0_combout\ = ( \Start~input_o\ & ( \division|state.S0~q\ & ( (!\division|state.S1~q\) # ((!\division|bit_counter\(31) & ((!\division|LessThan0~0_combout\) # (!\division|LessThan0~5_combout\)))) ) ) ) # ( !\Start~input_o\ & ( 
-- \division|state.S0~q\ & ( (!\division|state.S1~q\) # ((!\division|bit_counter\(31) & ((!\division|LessThan0~0_combout\) # (!\division|LessThan0~5_combout\)))) ) ) ) # ( !\Start~input_o\ & ( !\division|state.S0~q\ & ( (!\division|state.S1~q\) # 
-- ((!\division|bit_counter\(31) & ((!\division|LessThan0~0_combout\) # (!\division|LessThan0~5_combout\)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1111111110101000000000000000000011111111101010001111111110101000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_bit_counter\(31),
	datab => \division|ALT_INV_LessThan0~0_combout\,
	datac => \division|ALT_INV_LessThan0~5_combout\,
	datad => \division|ALT_INV_state.S1~q\,
	datae => \ALT_INV_Start~input_o\,
	dataf => \division|ALT_INV_state.S0~q\,
	combout => \division|Data_B[5]~0_combout\);

\division|Data_B[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector11~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|state.S1~q\,
	ena => \division|Data_B[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_B\(8));

\division|Selector12~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector12~0_combout\ = (!\division|state.S2~q\ & (\B[2]~input_o\)) # (\division|state.S2~q\ & ((\division|Data_B\(8))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100011101000111010001110100011101000111010001110100011101000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_B[2]~input_o\,
	datab => \division|ALT_INV_state.S2~q\,
	datac => \division|ALT_INV_Data_B\(8),
	combout => \division|Selector12~0_combout\);

\division|Data_B[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector12~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|state.S1~q\,
	ena => \division|Data_B[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_B\(7));

\division|Selector13~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector13~0_combout\ = (!\division|state.S2~q\ & (\B[1]~input_o\)) # (\division|state.S2~q\ & ((\division|Data_B\(7))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100011101000111010001110100011101000111010001110100011101000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_B[1]~input_o\,
	datab => \division|ALT_INV_state.S2~q\,
	datac => \division|ALT_INV_Data_B\(7),
	combout => \division|Selector13~0_combout\);

\division|Data_B[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector13~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|state.S1~q\,
	ena => \division|Data_B[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_B\(6));

\division|Selector14~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector14~0_combout\ = (!\division|state.S2~q\ & (\B[0]~input_o\)) # (\division|state.S2~q\ & ((\division|Data_B\(6))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100011101000111010001110100011101000111010001110100011101000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_B[0]~input_o\,
	datab => \division|ALT_INV_state.S2~q\,
	datac => \division|ALT_INV_Data_B\(6),
	combout => \division|Selector14~0_combout\);

\division|Data_B[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector14~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|state.S1~q\,
	ena => \division|Data_B[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_B\(5));

\division|bit_counter[6]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|bit_counter[6]~0_combout\ = ( \division|state.S0~q\ & ( (!\division|state.S1~q\) # ((!\division|bit_counter\(31) & ((!\division|LessThan0~0_combout\) # (!\division|LessThan0~5_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111010100000000000000000001111111110101000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_bit_counter\(31),
	datab => \division|ALT_INV_LessThan0~0_combout\,
	datac => \division|ALT_INV_LessThan0~5_combout\,
	datad => \division|ALT_INV_state.S1~q\,
	datae => \division|ALT_INV_state.S0~q\,
	combout => \division|bit_counter[6]~0_combout\);

\division|Data_B[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_B\(5),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_B\(4));

\division|Data_B[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_B\(4),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_B\(3));

\division|Data_B[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_B\(3),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_B\(2));

\division|Data_B[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_B\(2),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_B\(1));

\division|Data_B[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_B\(1),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_B\(0));

\division|Equal0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Equal0~0_combout\ = (!\division|Data_B\(9) & (!\division|Data_B\(4) & (!\division|Data_B\(3) & !\division|Data_B\(2))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000100000000000000010000000000000001000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Data_B\(9),
	datab => \division|ALT_INV_Data_B\(4),
	datac => \division|ALT_INV_Data_B\(3),
	datad => \division|ALT_INV_Data_B\(2),
	combout => \division|Equal0~0_combout\);

\division|Equal0~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Equal0~1_combout\ = (!\division|Data_B\(8) & (!\division|Data_B\(7) & (!\division|Data_B\(6) & !\division|Data_B\(5))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000100000000000000010000000000000001000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Data_B\(8),
	datab => \division|ALT_INV_Data_B\(7),
	datac => \division|ALT_INV_Data_B\(6),
	datad => \division|ALT_INV_Data_B\(5),
	combout => \division|Equal0~1_combout\);

\division|Equal0~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Equal0~2_combout\ = (!\division|Data_B\(1) & (!\division|Data_B\(0) & (\division|Equal0~0_combout\ & \division|Equal0~1_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000001000000000000000100000000000000010000000000000001000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Data_B\(1),
	datab => \division|ALT_INV_Data_B\(0),
	datac => \division|ALT_INV_Equal0~0_combout\,
	datad => \division|ALT_INV_Equal0~1_combout\,
	combout => \division|Equal0~2_combout\);

\division|Selector20~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector20~1_combout\ = ( \division|Equal0~2_combout\ & ( (\division|state.S0~q\ & ((!\division|LessThan0~6_combout\) # (!\division|state.S1~q\))) ) ) # ( !\division|Equal0~2_combout\ & ( (!\division|LessThan0~6_combout\ & (((!\Start~input_o\) # 
-- (\division|state.S0~q\)))) # (\division|LessThan0~6_combout\ & (!\division|state.S1~q\ & ((!\Start~input_o\) # (\division|state.S0~q\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1110000011101110000000001110111011100000111011100000000011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~6_combout\,
	datab => \division|ALT_INV_state.S1~q\,
	datac => \ALT_INV_Start~input_o\,
	datad => \division|ALT_INV_state.S0~q\,
	datae => \division|ALT_INV_Equal0~2_combout\,
	combout => \division|Selector20~1_combout\);

\division|state.S0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector20~1_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|state.S0~q\);

\division|Selector21~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector21~0_combout\ = ((!\Start~input_o\ & (!\division|state.S0~q\ & !\division|Equal0~2_combout\))) # (\division|state.S2~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1011001100110011101100110011001110110011001100111011001100110011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Start~input_o\,
	datab => \division|ALT_INV_state.S2~q\,
	datac => \division|ALT_INV_state.S0~q\,
	datad => \division|ALT_INV_Equal0~2_combout\,
	combout => \division|Selector21~0_combout\);

\division|state.S1\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector21~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|state.S1~q\);

\division|bit_counter[2]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|bit_counter[2]~2_combout\ = ( \division|state.S1~q\ & ( \division|state.S0~q\ & ( (!\RST_N~input_o\ & (!\division|bit_counter\(31) & ((!\division|LessThan0~0_combout\) # (!\division|LessThan0~5_combout\)))) ) ) ) # ( !\division|state.S1~q\ & ( 
-- \division|state.S0~q\ & ( !\RST_N~input_o\ ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000010101010101010101000100010000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \division|ALT_INV_bit_counter\(31),
	datac => \division|ALT_INV_LessThan0~0_combout\,
	datad => \division|ALT_INV_LessThan0~5_combout\,
	datae => \division|ALT_INV_state.S1~q\,
	dataf => \division|ALT_INV_state.S0~q\,
	combout => \division|bit_counter[2]~2_combout\);

\division|bit_counter[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~125_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(0));

\division|Add2~81\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~81_sumout\ = SUM(( \division|bit_counter\(1) ) + ( GND ) + ( \division|Add2~126\ ))
-- \division|Add2~82\ = CARRY(( \division|bit_counter\(1) ) + ( GND ) + ( \division|Add2~126\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(1),
	cin => \division|Add2~126\,
	sumout => \division|Add2~81_sumout\,
	cout => \division|Add2~82\);

\division|bit_counter[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~81_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(1));

\division|Add2~77\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~77_sumout\ = SUM(( \division|bit_counter\(2) ) + ( GND ) + ( \division|Add2~82\ ))
-- \division|Add2~78\ = CARRY(( \division|bit_counter\(2) ) + ( GND ) + ( \division|Add2~82\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(2),
	cin => \division|Add2~82\,
	sumout => \division|Add2~77_sumout\,
	cout => \division|Add2~78\);

\division|bit_counter[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~77_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(2));

\division|Add2~97\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~97_sumout\ = SUM(( \division|bit_counter\(3) ) + ( GND ) + ( \division|Add2~78\ ))
-- \division|Add2~98\ = CARRY(( \division|bit_counter\(3) ) + ( GND ) + ( \division|Add2~78\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(3),
	cin => \division|Add2~78\,
	sumout => \division|Add2~97_sumout\,
	cout => \division|Add2~98\);

\division|bit_counter[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~97_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(3));

\division|Add2~93\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~93_sumout\ = SUM(( \division|bit_counter\(4) ) + ( GND ) + ( \division|Add2~98\ ))
-- \division|Add2~94\ = CARRY(( \division|bit_counter\(4) ) + ( GND ) + ( \division|Add2~98\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(4),
	cin => \division|Add2~98\,
	sumout => \division|Add2~93_sumout\,
	cout => \division|Add2~94\);

\division|bit_counter[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~93_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(4));

\division|Add2~89\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~89_sumout\ = SUM(( \division|bit_counter\(5) ) + ( GND ) + ( \division|Add2~94\ ))
-- \division|Add2~90\ = CARRY(( \division|bit_counter\(5) ) + ( GND ) + ( \division|Add2~94\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(5),
	cin => \division|Add2~94\,
	sumout => \division|Add2~89_sumout\,
	cout => \division|Add2~90\);

\division|bit_counter[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~89_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(5));

\division|Add2~85\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~85_sumout\ = SUM(( \division|bit_counter\(6) ) + ( GND ) + ( \division|Add2~90\ ))
-- \division|Add2~86\ = CARRY(( \division|bit_counter\(6) ) + ( GND ) + ( \division|Add2~90\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(6),
	cin => \division|Add2~90\,
	sumout => \division|Add2~85_sumout\,
	cout => \division|Add2~86\);

\division|bit_counter[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~85_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(6));

\division|Add2~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~25_sumout\ = SUM(( \division|bit_counter\(7) ) + ( GND ) + ( \division|Add2~86\ ))
-- \division|Add2~26\ = CARRY(( \division|bit_counter\(7) ) + ( GND ) + ( \division|Add2~86\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(7),
	cin => \division|Add2~86\,
	sumout => \division|Add2~25_sumout\,
	cout => \division|Add2~26\);

\division|bit_counter[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~25_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(7));

\division|Add2~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~21_sumout\ = SUM(( \division|bit_counter\(8) ) + ( GND ) + ( \division|Add2~26\ ))
-- \division|Add2~22\ = CARRY(( \division|bit_counter\(8) ) + ( GND ) + ( \division|Add2~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(8),
	cin => \division|Add2~26\,
	sumout => \division|Add2~21_sumout\,
	cout => \division|Add2~22\);

\division|bit_counter[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~21_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(8));

\division|Add2~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~17_sumout\ = SUM(( \division|bit_counter\(9) ) + ( GND ) + ( \division|Add2~22\ ))
-- \division|Add2~18\ = CARRY(( \division|bit_counter\(9) ) + ( GND ) + ( \division|Add2~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(9),
	cin => \division|Add2~22\,
	sumout => \division|Add2~17_sumout\,
	cout => \division|Add2~18\);

\division|bit_counter[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~17_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(9));

\division|Add2~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~13_sumout\ = SUM(( \division|bit_counter\(10) ) + ( GND ) + ( \division|Add2~18\ ))
-- \division|Add2~14\ = CARRY(( \division|bit_counter\(10) ) + ( GND ) + ( \division|Add2~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(10),
	cin => \division|Add2~18\,
	sumout => \division|Add2~13_sumout\,
	cout => \division|Add2~14\);

\division|bit_counter[10]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~13_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(10));

\division|Add2~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~9_sumout\ = SUM(( \division|bit_counter\(11) ) + ( GND ) + ( \division|Add2~14\ ))
-- \division|Add2~10\ = CARRY(( \division|bit_counter\(11) ) + ( GND ) + ( \division|Add2~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(11),
	cin => \division|Add2~14\,
	sumout => \division|Add2~9_sumout\,
	cout => \division|Add2~10\);

\division|bit_counter[11]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~9_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(11));

\division|bit_counter[12]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Add2~5_sumout\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[2]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(12));

\division|LessThan0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|LessThan0~0_combout\ = ( !\division|bit_counter\(8) & ( !\division|bit_counter\(7) & ( (!\division|bit_counter\(12) & (!\division|bit_counter\(11) & (!\division|bit_counter\(10) & !\division|bit_counter\(9)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_bit_counter\(12),
	datab => \division|ALT_INV_bit_counter\(11),
	datac => \division|ALT_INV_bit_counter\(10),
	datad => \division|ALT_INV_bit_counter\(9),
	datae => \division|ALT_INV_bit_counter\(8),
	dataf => \division|ALT_INV_bit_counter\(7),
	combout => \division|LessThan0~0_combout\);

\division|bit_counter[6]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|bit_counter[6]~3_combout\ = (\division|state.S1~q\ & (((\division|LessThan0~0_combout\ & \division|LessThan0~5_combout\)) # (\division|bit_counter\(31))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000001010111000000000101011100000000010101110000000001010111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_bit_counter\(31),
	datab => \division|ALT_INV_LessThan0~0_combout\,
	datac => \division|ALT_INV_LessThan0~5_combout\,
	datad => \division|ALT_INV_state.S1~q\,
	combout => \division|bit_counter[6]~3_combout\);

\division|state.S2\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|bit_counter[6]~3_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|state.S2~q\);

\division|Add2~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add2~1_sumout\ = SUM(( \division|bit_counter\(31) ) + ( GND ) + ( \division|Add2~106\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_bit_counter\(31),
	cin => \division|Add2~106\,
	sumout => \division|Add2~1_sumout\);

\division|bit_counter[31]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|bit_counter[31]~1_combout\ = (!\RST_N~input_o\ & ((!\division|state.S2~q\ & (\division|bit_counter\(31))) # (\division|state.S2~q\ & ((\division|Add2~1_sumout\))))) # (\RST_N~input_o\ & (\division|bit_counter\(31)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0011000100111011001100010011101100110001001110110011000100111011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \division|ALT_INV_bit_counter\(31),
	datac => \division|ALT_INV_state.S2~q\,
	datad => \division|ALT_INV_Add2~1_sumout\,
	combout => \division|bit_counter[31]~1_combout\);

\division|bit_counter[31]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|bit_counter[31]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|bit_counter\(31));

\division|LessThan0~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|LessThan0~6_combout\ = ( \division|LessThan0~3_combout\ & ( \division|LessThan0~4_combout\ & ( (!\division|bit_counter\(31) & ((!\division|LessThan0~0_combout\) # ((!\division|LessThan0~1_combout\) # (!\division|LessThan0~2_combout\)))) ) ) ) # 
-- ( !\division|LessThan0~3_combout\ & ( \division|LessThan0~4_combout\ & ( !\division|bit_counter\(31) ) ) ) # ( \division|LessThan0~3_combout\ & ( !\division|LessThan0~4_combout\ & ( !\division|bit_counter\(31) ) ) ) # ( !\division|LessThan0~3_combout\ & ( 
-- !\division|LessThan0~4_combout\ & ( !\division|bit_counter\(31) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_bit_counter\(31),
	datab => \division|ALT_INV_LessThan0~0_combout\,
	datac => \division|ALT_INV_LessThan0~1_combout\,
	datad => \division|ALT_INV_LessThan0~2_combout\,
	datae => \division|ALT_INV_LessThan0~3_combout\,
	dataf => \division|ALT_INV_LessThan0~4_combout\,
	combout => \division|LessThan0~6_combout\);

\A[4]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_A(4),
	o => \A[4]~input_o\);

\A[3]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_A(3),
	o => \A[3]~input_o\);

\A[2]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_A(2),
	o => \A[2]~input_o\);

\A[1]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_A(1),
	o => \A[1]~input_o\);

\A[0]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_A(0),
	o => \A[0]~input_o\);

\division|Add1~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add1~1_sumout\ = SUM(( \division|Data_B\(0) ) + ( \division|Data_A\(0) ) + ( !VCC ))
-- \division|Add1~2\ = CARRY(( \division|Data_B\(0) ) + ( \division|Data_A\(0) ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_Data_B\(0),
	dataf => \division|ALT_INV_Data_A\(0),
	cin => GND,
	sumout => \division|Add1~1_sumout\,
	cout => \division|Add1~2\);

\division|Add0~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add0~1_sumout\ = SUM(( !\division|Data_A\(0) $ (!\division|Data_B\(0)) ) + ( !VCC ) + ( !VCC ))
-- \division|Add0~2\ = CARRY(( !\division|Data_A\(0) $ (!\division|Data_B\(0)) ) + ( !VCC ) + ( !VCC ))
-- \division|Add0~3\ = SHARE((!\division|Data_B\(0)) # (\division|Data_A\(0)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000111100000000000000000000111111110000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division|ALT_INV_Data_A\(0),
	datad => \division|ALT_INV_Data_B\(0),
	cin => GND,
	sharein => GND,
	sumout => \division|Add0~1_sumout\,
	cout => \division|Add0~2\,
	shareout => \division|Add0~3\);

\division|Selector9~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector9~0_combout\ = ( \division|Add1~1_sumout\ & ( \division|Add0~1_sumout\ & ( ((!\division|state.S1~q\ & ((\A[0]~input_o\))) # (\division|state.S1~q\ & (!\division|LessThan0~6_combout\))) # (\division|state.S2~q\) ) ) ) # ( 
-- !\division|Add1~1_sumout\ & ( \division|Add0~1_sumout\ & ( (!\division|state.S1~q\ & (((\A[0]~input_o\ & !\division|state.S2~q\)))) # (\division|state.S1~q\ & ((!\division|LessThan0~6_combout\) # ((\division|state.S2~q\)))) ) ) ) # ( 
-- \division|Add1~1_sumout\ & ( !\division|Add0~1_sumout\ & ( (!\division|state.S1~q\ & ((\division|state.S2~q\) # (\A[0]~input_o\))) ) ) ) # ( !\division|Add1~1_sumout\ & ( !\division|Add0~1_sumout\ & ( (!\division|state.S1~q\ & (\A[0]~input_o\ & 
-- !\division|state.S2~q\)) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000110000000000000011001100110000101110001100110010111011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~6_combout\,
	datab => \division|ALT_INV_state.S1~q\,
	datac => \ALT_INV_A[0]~input_o\,
	datad => \division|ALT_INV_state.S2~q\,
	datae => \division|ALT_INV_Add1~1_sumout\,
	dataf => \division|ALT_INV_Add0~1_sumout\,
	combout => \division|Selector9~0_combout\);

\division|Data_A[0]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Data_A[0]~0_combout\ = (!\division|Data_A\(9) & (!\division|state.S2~q\ & ((!\Start~input_o\) # (\division|state.S0~q\)))) # (\division|Data_A\(9) & ((!\Start~input_o\) # ((\division|state.S0~q\))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1100010011110101110001001111010111000100111101011100010011110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Data_A\(9),
	datab => \ALT_INV_Start~input_o\,
	datac => \division|ALT_INV_state.S2~q\,
	datad => \division|ALT_INV_state.S0~q\,
	combout => \division|Data_A[0]~0_combout\);

\division|Data_A[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector9~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Data_A[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_A\(0));

\division|Add1~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add1~5_sumout\ = SUM(( \division|Data_B\(1) ) + ( \division|Data_A\(1) ) + ( \division|Add1~2\ ))
-- \division|Add1~6\ = CARRY(( \division|Data_B\(1) ) + ( \division|Data_A\(1) ) + ( \division|Add1~2\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_Data_B\(1),
	dataf => \division|ALT_INV_Data_A\(1),
	cin => \division|Add1~2\,
	sumout => \division|Add1~5_sumout\,
	cout => \division|Add1~6\);

\division|Add0~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add0~5_sumout\ = SUM(( !\division|Data_A\(1) $ (\division|Data_B\(1)) ) + ( \division|Add0~3\ ) + ( \division|Add0~2\ ))
-- \division|Add0~6\ = CARRY(( !\division|Data_A\(1) $ (\division|Data_B\(1)) ) + ( \division|Add0~3\ ) + ( \division|Add0~2\ ))
-- \division|Add0~7\ = SHARE((\division|Data_A\(1) & !\division|Data_B\(1)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division|ALT_INV_Data_A\(1),
	datad => \division|ALT_INV_Data_B\(1),
	cin => \division|Add0~2\,
	sharein => \division|Add0~3\,
	sumout => \division|Add0~5_sumout\,
	cout => \division|Add0~6\,
	shareout => \division|Add0~7\);

\division|Selector8~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector8~0_combout\ = ( \division|Add1~5_sumout\ & ( \division|Add0~5_sumout\ & ( ((!\division|state.S1~q\ & ((\A[1]~input_o\))) # (\division|state.S1~q\ & (!\division|LessThan0~6_combout\))) # (\division|state.S2~q\) ) ) ) # ( 
-- !\division|Add1~5_sumout\ & ( \division|Add0~5_sumout\ & ( (!\division|state.S1~q\ & (((\A[1]~input_o\ & !\division|state.S2~q\)))) # (\division|state.S1~q\ & ((!\division|LessThan0~6_combout\) # ((\division|state.S2~q\)))) ) ) ) # ( 
-- \division|Add1~5_sumout\ & ( !\division|Add0~5_sumout\ & ( (!\division|state.S1~q\ & ((\division|state.S2~q\) # (\A[1]~input_o\))) ) ) ) # ( !\division|Add1~5_sumout\ & ( !\division|Add0~5_sumout\ & ( (!\division|state.S1~q\ & (\A[1]~input_o\ & 
-- !\division|state.S2~q\)) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000110000000000000011001100110000101110001100110010111011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~6_combout\,
	datab => \division|ALT_INV_state.S1~q\,
	datac => \ALT_INV_A[1]~input_o\,
	datad => \division|ALT_INV_state.S2~q\,
	datae => \division|ALT_INV_Add1~5_sumout\,
	dataf => \division|ALT_INV_Add0~5_sumout\,
	combout => \division|Selector8~0_combout\);

\division|Data_A[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector8~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Data_A[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_A\(1));

\division|Add1~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add1~9_sumout\ = SUM(( \division|Data_B\(2) ) + ( \division|Data_A\(2) ) + ( \division|Add1~6\ ))
-- \division|Add1~10\ = CARRY(( \division|Data_B\(2) ) + ( \division|Data_A\(2) ) + ( \division|Add1~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_Data_B\(2),
	dataf => \division|ALT_INV_Data_A\(2),
	cin => \division|Add1~6\,
	sumout => \division|Add1~9_sumout\,
	cout => \division|Add1~10\);

\division|Add0~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add0~9_sumout\ = SUM(( !\division|Data_A\(2) $ (\division|Data_B\(2)) ) + ( \division|Add0~7\ ) + ( \division|Add0~6\ ))
-- \division|Add0~10\ = CARRY(( !\division|Data_A\(2) $ (\division|Data_B\(2)) ) + ( \division|Add0~7\ ) + ( \division|Add0~6\ ))
-- \division|Add0~11\ = SHARE((\division|Data_A\(2) & !\division|Data_B\(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division|ALT_INV_Data_A\(2),
	datad => \division|ALT_INV_Data_B\(2),
	cin => \division|Add0~6\,
	sharein => \division|Add0~7\,
	sumout => \division|Add0~9_sumout\,
	cout => \division|Add0~10\,
	shareout => \division|Add0~11\);

\division|Selector7~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector7~0_combout\ = ( \division|Add1~9_sumout\ & ( \division|Add0~9_sumout\ & ( ((!\division|state.S1~q\ & ((\A[2]~input_o\))) # (\division|state.S1~q\ & (!\division|LessThan0~6_combout\))) # (\division|state.S2~q\) ) ) ) # ( 
-- !\division|Add1~9_sumout\ & ( \division|Add0~9_sumout\ & ( (!\division|state.S1~q\ & (((\A[2]~input_o\ & !\division|state.S2~q\)))) # (\division|state.S1~q\ & ((!\division|LessThan0~6_combout\) # ((\division|state.S2~q\)))) ) ) ) # ( 
-- \division|Add1~9_sumout\ & ( !\division|Add0~9_sumout\ & ( (!\division|state.S1~q\ & ((\division|state.S2~q\) # (\A[2]~input_o\))) ) ) ) # ( !\division|Add1~9_sumout\ & ( !\division|Add0~9_sumout\ & ( (!\division|state.S1~q\ & (\A[2]~input_o\ & 
-- !\division|state.S2~q\)) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000110000000000000011001100110000101110001100110010111011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~6_combout\,
	datab => \division|ALT_INV_state.S1~q\,
	datac => \ALT_INV_A[2]~input_o\,
	datad => \division|ALT_INV_state.S2~q\,
	datae => \division|ALT_INV_Add1~9_sumout\,
	dataf => \division|ALT_INV_Add0~9_sumout\,
	combout => \division|Selector7~0_combout\);

\division|Data_A[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector7~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Data_A[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_A\(2));

\division|Add1~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add1~13_sumout\ = SUM(( \division|Data_B\(3) ) + ( \division|Data_A\(3) ) + ( \division|Add1~10\ ))
-- \division|Add1~14\ = CARRY(( \division|Data_B\(3) ) + ( \division|Data_A\(3) ) + ( \division|Add1~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_Data_B\(3),
	dataf => \division|ALT_INV_Data_A\(3),
	cin => \division|Add1~10\,
	sumout => \division|Add1~13_sumout\,
	cout => \division|Add1~14\);

\division|Add0~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add0~13_sumout\ = SUM(( !\division|Data_A\(3) $ (\division|Data_B\(3)) ) + ( \division|Add0~11\ ) + ( \division|Add0~10\ ))
-- \division|Add0~14\ = CARRY(( !\division|Data_A\(3) $ (\division|Data_B\(3)) ) + ( \division|Add0~11\ ) + ( \division|Add0~10\ ))
-- \division|Add0~15\ = SHARE((\division|Data_A\(3) & !\division|Data_B\(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division|ALT_INV_Data_A\(3),
	datad => \division|ALT_INV_Data_B\(3),
	cin => \division|Add0~10\,
	sharein => \division|Add0~11\,
	sumout => \division|Add0~13_sumout\,
	cout => \division|Add0~14\,
	shareout => \division|Add0~15\);

\division|Selector6~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector6~0_combout\ = ( \division|Add1~13_sumout\ & ( \division|Add0~13_sumout\ & ( ((!\division|state.S1~q\ & ((\A[3]~input_o\))) # (\division|state.S1~q\ & (!\division|LessThan0~6_combout\))) # (\division|state.S2~q\) ) ) ) # ( 
-- !\division|Add1~13_sumout\ & ( \division|Add0~13_sumout\ & ( (!\division|state.S1~q\ & (((\A[3]~input_o\ & !\division|state.S2~q\)))) # (\division|state.S1~q\ & ((!\division|LessThan0~6_combout\) # ((\division|state.S2~q\)))) ) ) ) # ( 
-- \division|Add1~13_sumout\ & ( !\division|Add0~13_sumout\ & ( (!\division|state.S1~q\ & ((\division|state.S2~q\) # (\A[3]~input_o\))) ) ) ) # ( !\division|Add1~13_sumout\ & ( !\division|Add0~13_sumout\ & ( (!\division|state.S1~q\ & (\A[3]~input_o\ & 
-- !\division|state.S2~q\)) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000110000000000000011001100110000101110001100110010111011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~6_combout\,
	datab => \division|ALT_INV_state.S1~q\,
	datac => \ALT_INV_A[3]~input_o\,
	datad => \division|ALT_INV_state.S2~q\,
	datae => \division|ALT_INV_Add1~13_sumout\,
	dataf => \division|ALT_INV_Add0~13_sumout\,
	combout => \division|Selector6~0_combout\);

\division|Data_A[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector6~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Data_A[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_A\(3));

\division|Add1~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add1~17_sumout\ = SUM(( \division|Data_B\(4) ) + ( \division|Data_A\(4) ) + ( \division|Add1~14\ ))
-- \division|Add1~18\ = CARRY(( \division|Data_B\(4) ) + ( \division|Data_A\(4) ) + ( \division|Add1~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_Data_B\(4),
	dataf => \division|ALT_INV_Data_A\(4),
	cin => \division|Add1~14\,
	sumout => \division|Add1~17_sumout\,
	cout => \division|Add1~18\);

\division|Add0~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add0~17_sumout\ = SUM(( !\division|Data_A\(4) $ (\division|Data_B\(4)) ) + ( \division|Add0~15\ ) + ( \division|Add0~14\ ))
-- \division|Add0~18\ = CARRY(( !\division|Data_A\(4) $ (\division|Data_B\(4)) ) + ( \division|Add0~15\ ) + ( \division|Add0~14\ ))
-- \division|Add0~19\ = SHARE((\division|Data_A\(4) & !\division|Data_B\(4)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division|ALT_INV_Data_A\(4),
	datad => \division|ALT_INV_Data_B\(4),
	cin => \division|Add0~14\,
	sharein => \division|Add0~15\,
	sumout => \division|Add0~17_sumout\,
	cout => \division|Add0~18\,
	shareout => \division|Add0~19\);

\division|Selector5~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector5~0_combout\ = ( \division|Add1~17_sumout\ & ( \division|Add0~17_sumout\ & ( ((!\division|state.S1~q\ & ((\A[4]~input_o\))) # (\division|state.S1~q\ & (!\division|LessThan0~6_combout\))) # (\division|state.S2~q\) ) ) ) # ( 
-- !\division|Add1~17_sumout\ & ( \division|Add0~17_sumout\ & ( (!\division|state.S1~q\ & (((\A[4]~input_o\ & !\division|state.S2~q\)))) # (\division|state.S1~q\ & ((!\division|LessThan0~6_combout\) # ((\division|state.S2~q\)))) ) ) ) # ( 
-- \division|Add1~17_sumout\ & ( !\division|Add0~17_sumout\ & ( (!\division|state.S1~q\ & ((\division|state.S2~q\) # (\A[4]~input_o\))) ) ) ) # ( !\division|Add1~17_sumout\ & ( !\division|Add0~17_sumout\ & ( (!\division|state.S1~q\ & (\A[4]~input_o\ & 
-- !\division|state.S2~q\)) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000110000000000000011001100110000101110001100110010111011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~6_combout\,
	datab => \division|ALT_INV_state.S1~q\,
	datac => \ALT_INV_A[4]~input_o\,
	datad => \division|ALT_INV_state.S2~q\,
	datae => \division|ALT_INV_Add1~17_sumout\,
	dataf => \division|ALT_INV_Add0~17_sumout\,
	combout => \division|Selector5~0_combout\);

\division|Data_A[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector5~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Data_A[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_A\(4));

\division|Add1~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add1~21_sumout\ = SUM(( \division|Data_B\(5) ) + ( \division|Data_A\(5) ) + ( \division|Add1~18\ ))
-- \division|Add1~22\ = CARRY(( \division|Data_B\(5) ) + ( \division|Data_A\(5) ) + ( \division|Add1~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_Data_B\(5),
	dataf => \division|ALT_INV_Data_A\(5),
	cin => \division|Add1~18\,
	sumout => \division|Add1~21_sumout\,
	cout => \division|Add1~22\);

\division|Add0~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add0~21_sumout\ = SUM(( !\division|Data_A\(5) $ (\division|Data_B\(5)) ) + ( \division|Add0~19\ ) + ( \division|Add0~18\ ))
-- \division|Add0~22\ = CARRY(( !\division|Data_A\(5) $ (\division|Data_B\(5)) ) + ( \division|Add0~19\ ) + ( \division|Add0~18\ ))
-- \division|Add0~23\ = SHARE((\division|Data_A\(5) & !\division|Data_B\(5)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division|ALT_INV_Data_A\(5),
	datad => \division|ALT_INV_Data_B\(5),
	cin => \division|Add0~18\,
	sharein => \division|Add0~19\,
	sumout => \division|Add0~21_sumout\,
	cout => \division|Add0~22\,
	shareout => \division|Add0~23\);

\division|Selector4~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector4~0_combout\ = (!\division|state.S2~q\ & (!\division|LessThan0~6_combout\ & ((\division|Add0~21_sumout\)))) # (\division|state.S2~q\ & (((\division|Add1~21_sumout\))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001110001011000000111000101100000011100010110000001110001011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~6_combout\,
	datab => \division|ALT_INV_state.S2~q\,
	datac => \division|ALT_INV_Add1~21_sumout\,
	datad => \division|ALT_INV_Add0~21_sumout\,
	combout => \division|Selector4~0_combout\);

\division|Data_A[5]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Data_A[5]~1_combout\ = (\division|state.S0~q\ & ((!\division|state.S2~q\) # (\division|Data_A\(9))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000110100001101000011010000110100001101000011010000110100001101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Data_A\(9),
	datab => \division|ALT_INV_state.S2~q\,
	datac => \division|ALT_INV_state.S0~q\,
	combout => \division|Data_A[5]~1_combout\);

\division|Data_A[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector4~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Data_A[5]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_A\(5));

\division|Add1~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add1~25_sumout\ = SUM(( \division|Data_B\(6) ) + ( \division|Data_A\(6) ) + ( \division|Add1~22\ ))
-- \division|Add1~26\ = CARRY(( \division|Data_B\(6) ) + ( \division|Data_A\(6) ) + ( \division|Add1~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_Data_B\(6),
	dataf => \division|ALT_INV_Data_A\(6),
	cin => \division|Add1~22\,
	sumout => \division|Add1~25_sumout\,
	cout => \division|Add1~26\);

\division|Add0~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add0~25_sumout\ = SUM(( !\division|Data_A\(6) $ (\division|Data_B\(6)) ) + ( \division|Add0~23\ ) + ( \division|Add0~22\ ))
-- \division|Add0~26\ = CARRY(( !\division|Data_A\(6) $ (\division|Data_B\(6)) ) + ( \division|Add0~23\ ) + ( \division|Add0~22\ ))
-- \division|Add0~27\ = SHARE((\division|Data_A\(6) & !\division|Data_B\(6)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division|ALT_INV_Data_A\(6),
	datad => \division|ALT_INV_Data_B\(6),
	cin => \division|Add0~22\,
	sharein => \division|Add0~23\,
	sumout => \division|Add0~25_sumout\,
	cout => \division|Add0~26\,
	shareout => \division|Add0~27\);

\division|Selector3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector3~0_combout\ = (!\division|state.S2~q\ & (!\division|LessThan0~6_combout\ & ((\division|Add0~25_sumout\)))) # (\division|state.S2~q\ & (((\division|Add1~25_sumout\))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001110001011000000111000101100000011100010110000001110001011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~6_combout\,
	datab => \division|ALT_INV_state.S2~q\,
	datac => \division|ALT_INV_Add1~25_sumout\,
	datad => \division|ALT_INV_Add0~25_sumout\,
	combout => \division|Selector3~0_combout\);

\division|Data_A[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector3~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Data_A[5]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_A\(6));

\division|Add1~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add1~29_sumout\ = SUM(( \division|Data_B\(7) ) + ( \division|Data_A\(7) ) + ( \division|Add1~26\ ))
-- \division|Add1~30\ = CARRY(( \division|Data_B\(7) ) + ( \division|Data_A\(7) ) + ( \division|Add1~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_Data_B\(7),
	dataf => \division|ALT_INV_Data_A\(7),
	cin => \division|Add1~26\,
	sumout => \division|Add1~29_sumout\,
	cout => \division|Add1~30\);

\division|Add0~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add0~29_sumout\ = SUM(( !\division|Data_A\(7) $ (\division|Data_B\(7)) ) + ( \division|Add0~27\ ) + ( \division|Add0~26\ ))
-- \division|Add0~30\ = CARRY(( !\division|Data_A\(7) $ (\division|Data_B\(7)) ) + ( \division|Add0~27\ ) + ( \division|Add0~26\ ))
-- \division|Add0~31\ = SHARE((\division|Data_A\(7) & !\division|Data_B\(7)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division|ALT_INV_Data_A\(7),
	datad => \division|ALT_INV_Data_B\(7),
	cin => \division|Add0~26\,
	sharein => \division|Add0~27\,
	sumout => \division|Add0~29_sumout\,
	cout => \division|Add0~30\,
	shareout => \division|Add0~31\);

\division|Selector2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector2~0_combout\ = (!\division|state.S2~q\ & (!\division|LessThan0~6_combout\ & ((\division|Add0~29_sumout\)))) # (\division|state.S2~q\ & (((\division|Add1~29_sumout\))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001110001011000000111000101100000011100010110000001110001011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~6_combout\,
	datab => \division|ALT_INV_state.S2~q\,
	datac => \division|ALT_INV_Add1~29_sumout\,
	datad => \division|ALT_INV_Add0~29_sumout\,
	combout => \division|Selector2~0_combout\);

\division|Data_A[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector2~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Data_A[5]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_A\(7));

\division|Add1~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add1~33_sumout\ = SUM(( \division|Data_B\(8) ) + ( \division|Data_A\(8) ) + ( \division|Add1~30\ ))
-- \division|Add1~34\ = CARRY(( \division|Data_B\(8) ) + ( \division|Data_A\(8) ) + ( \division|Add1~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_Data_B\(8),
	dataf => \division|ALT_INV_Data_A\(8),
	cin => \division|Add1~30\,
	sumout => \division|Add1~33_sumout\,
	cout => \division|Add1~34\);

\division|Add0~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add0~33_sumout\ = SUM(( !\division|Data_A\(8) $ (\division|Data_B\(8)) ) + ( \division|Add0~31\ ) + ( \division|Add0~30\ ))
-- \division|Add0~34\ = CARRY(( !\division|Data_A\(8) $ (\division|Data_B\(8)) ) + ( \division|Add0~31\ ) + ( \division|Add0~30\ ))
-- \division|Add0~35\ = SHARE((\division|Data_A\(8) & !\division|Data_B\(8)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division|ALT_INV_Data_A\(8),
	datad => \division|ALT_INV_Data_B\(8),
	cin => \division|Add0~30\,
	sharein => \division|Add0~31\,
	sumout => \division|Add0~33_sumout\,
	cout => \division|Add0~34\,
	shareout => \division|Add0~35\);

\division|Selector1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector1~0_combout\ = (!\division|state.S2~q\ & (!\division|LessThan0~6_combout\ & ((\division|Add0~33_sumout\)))) # (\division|state.S2~q\ & (((\division|Add1~33_sumout\))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001110001011000000111000101100000011100010110000001110001011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~6_combout\,
	datab => \division|ALT_INV_state.S2~q\,
	datac => \division|ALT_INV_Add1~33_sumout\,
	datad => \division|ALT_INV_Add0~33_sumout\,
	combout => \division|Selector1~0_combout\);

\division|Data_A[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector1~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Data_A[5]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_A\(8));

\division|Add0~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add0~37_sumout\ = SUM(( !\division|Data_A\(9) $ (\division|Data_B\(9)) ) + ( \division|Add0~35\ ) + ( \division|Add0~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division|ALT_INV_Data_A\(9),
	datad => \division|ALT_INV_Data_B\(9),
	cin => \division|Add0~34\,
	sharein => \division|Add0~35\,
	sumout => \division|Add0~37_sumout\);

\division|Add1~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Add1~37_sumout\ = SUM(( \division|Data_B\(9) ) + ( \division|Data_A\(9) ) + ( \division|Add1~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division|ALT_INV_Data_B\(9),
	dataf => \division|ALT_INV_Data_A\(9),
	cin => \division|Add1~34\,
	sumout => \division|Add1~37_sumout\);

\division|Selector0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector0~0_combout\ = ( \division|Add0~37_sumout\ & ( \division|Add1~37_sumout\ & ( (!\division|state.S1~q\ & (((\division|Data_A\(9))))) # (\division|state.S1~q\ & ((!\division|state.S2~q\ & (!\division|LessThan0~6_combout\)) # 
-- (\division|state.S2~q\ & ((\division|Data_A\(9)))))) ) ) ) # ( !\division|Add0~37_sumout\ & ( \division|Add1~37_sumout\ & ( (\division|Data_A\(9) & ((!\division|state.S1~q\) # (\division|state.S2~q\))) ) ) ) # ( \division|Add0~37_sumout\ & ( 
-- !\division|Add1~37_sumout\ & ( (!\division|state.S2~q\ & ((!\division|state.S1~q\ & ((\division|Data_A\(9)))) # (\division|state.S1~q\ & (!\division|LessThan0~6_combout\)))) ) ) ) # ( !\division|Add0~37_sumout\ & ( !\division|Add1~37_sumout\ & ( 
-- (!\division|state.S1~q\ & (\division|Data_A\(9) & !\division|state.S2~q\)) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000110000000000001011100000000000001100000011110010111000001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_LessThan0~6_combout\,
	datab => \division|ALT_INV_state.S1~q\,
	datac => \division|ALT_INV_Data_A\(9),
	datad => \division|ALT_INV_state.S2~q\,
	datae => \division|ALT_INV_Add0~37_sumout\,
	dataf => \division|ALT_INV_Add1~37_sumout\,
	combout => \division|Selector0~0_combout\);

\division|Data_A[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Selector0~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_A\(9));

\division|Data_A[9]~_wirecell\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Data_A[9]~_wirecell_combout\ = !\division|Data_A\(9)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Data_A\(9),
	combout => \division|Data_A[9]~_wirecell_combout\);

\division|Data_Quotient[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_A[9]~_wirecell_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_Quotient\(0));

\division|Selector20~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|Selector20~0_combout\ = (!\division|bit_counter\(31) & (\division|state.S1~q\ & ((!\division|LessThan0~0_combout\) # (!\division|LessThan0~5_combout\))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000010101000000000001010100000000000101010000000000010101000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_bit_counter\(31),
	datab => \division|ALT_INV_LessThan0~0_combout\,
	datac => \division|ALT_INV_LessThan0~5_combout\,
	datad => \division|ALT_INV_state.S1~q\,
	combout => \division|Selector20~0_combout\);

\division|Q[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(0),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Q\(0));

\multiplication|Data_A~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_A~0_combout\ = (!\Start~input_o\ & (\A[0]~input_o\)) # (\Start~input_o\ & ((\multiplication|Data_A\(0))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100011101000111010001110100011101000111010001110100011101000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_A[0]~input_o\,
	datab => \ALT_INV_Start~input_o\,
	datac => \multiplication|ALT_INV_Data_A\(0),
	combout => \multiplication|Data_A~0_combout\);

\multiplication|Add1~125\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~125_sumout\ = SUM(( \multiplication|bit_counter\(0) ) + ( VCC ) + ( !VCC ))
-- \multiplication|Add1~126\ = CARRY(( \multiplication|bit_counter\(0) ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(0),
	cin => GND,
	sumout => \multiplication|Add1~125_sumout\,
	cout => \multiplication|Add1~126\);

\multiplication|bit_counter[9]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|bit_counter[9]~0_combout\ = (!\RST_N~input_o\ & \multiplication|state~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \multiplication|ALT_INV_state~q\,
	combout => \multiplication|bit_counter[9]~0_combout\);

\multiplication|bit_counter[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~125_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(0));

\multiplication|Add1~81\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~81_sumout\ = SUM(( \multiplication|bit_counter\(1) ) + ( GND ) + ( \multiplication|Add1~126\ ))
-- \multiplication|Add1~82\ = CARRY(( \multiplication|bit_counter\(1) ) + ( GND ) + ( \multiplication|Add1~126\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(1),
	cin => \multiplication|Add1~126\,
	sumout => \multiplication|Add1~81_sumout\,
	cout => \multiplication|Add1~82\);

\multiplication|bit_counter[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~81_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(1));

\multiplication|Add1~77\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~77_sumout\ = SUM(( \multiplication|bit_counter\(2) ) + ( GND ) + ( \multiplication|Add1~82\ ))
-- \multiplication|Add1~78\ = CARRY(( \multiplication|bit_counter\(2) ) + ( GND ) + ( \multiplication|Add1~82\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(2),
	cin => \multiplication|Add1~82\,
	sumout => \multiplication|Add1~77_sumout\,
	cout => \multiplication|Add1~78\);

\multiplication|bit_counter[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~77_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(2));

\multiplication|Add1~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~17_sumout\ = SUM(( \multiplication|bit_counter\(3) ) + ( GND ) + ( \multiplication|Add1~78\ ))
-- \multiplication|Add1~18\ = CARRY(( \multiplication|bit_counter\(3) ) + ( GND ) + ( \multiplication|Add1~78\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(3),
	cin => \multiplication|Add1~78\,
	sumout => \multiplication|Add1~17_sumout\,
	cout => \multiplication|Add1~18\);

\multiplication|bit_counter[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~17_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(3));

\multiplication|Add1~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~13_sumout\ = SUM(( \multiplication|bit_counter\(4) ) + ( GND ) + ( \multiplication|Add1~18\ ))
-- \multiplication|Add1~14\ = CARRY(( \multiplication|bit_counter\(4) ) + ( GND ) + ( \multiplication|Add1~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(4),
	cin => \multiplication|Add1~18\,
	sumout => \multiplication|Add1~13_sumout\,
	cout => \multiplication|Add1~14\);

\multiplication|bit_counter[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~13_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(4));

\multiplication|Add1~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~9_sumout\ = SUM(( \multiplication|bit_counter\(5) ) + ( GND ) + ( \multiplication|Add1~14\ ))
-- \multiplication|Add1~10\ = CARRY(( \multiplication|bit_counter\(5) ) + ( GND ) + ( \multiplication|Add1~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(5),
	cin => \multiplication|Add1~14\,
	sumout => \multiplication|Add1~9_sumout\,
	cout => \multiplication|Add1~10\);

\multiplication|bit_counter[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~9_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(5));

\multiplication|Add1~49\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~49_sumout\ = SUM(( \multiplication|bit_counter\(6) ) + ( GND ) + ( \multiplication|Add1~10\ ))
-- \multiplication|Add1~50\ = CARRY(( \multiplication|bit_counter\(6) ) + ( GND ) + ( \multiplication|Add1~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(6),
	cin => \multiplication|Add1~10\,
	sumout => \multiplication|Add1~49_sumout\,
	cout => \multiplication|Add1~50\);

\multiplication|bit_counter[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~49_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(6));

\multiplication|Add1~45\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~45_sumout\ = SUM(( \multiplication|bit_counter\(7) ) + ( GND ) + ( \multiplication|Add1~50\ ))
-- \multiplication|Add1~46\ = CARRY(( \multiplication|bit_counter\(7) ) + ( GND ) + ( \multiplication|Add1~50\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(7),
	cin => \multiplication|Add1~50\,
	sumout => \multiplication|Add1~45_sumout\,
	cout => \multiplication|Add1~46\);

\multiplication|bit_counter[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~45_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(7));

\multiplication|Add1~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~41_sumout\ = SUM(( \multiplication|bit_counter\(8) ) + ( GND ) + ( \multiplication|Add1~46\ ))
-- \multiplication|Add1~42\ = CARRY(( \multiplication|bit_counter\(8) ) + ( GND ) + ( \multiplication|Add1~46\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(8),
	cin => \multiplication|Add1~46\,
	sumout => \multiplication|Add1~41_sumout\,
	cout => \multiplication|Add1~42\);

\multiplication|bit_counter[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~41_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(8));

\multiplication|Add1~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~37_sumout\ = SUM(( \multiplication|bit_counter\(9) ) + ( GND ) + ( \multiplication|Add1~42\ ))
-- \multiplication|Add1~38\ = CARRY(( \multiplication|bit_counter\(9) ) + ( GND ) + ( \multiplication|Add1~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(9),
	cin => \multiplication|Add1~42\,
	sumout => \multiplication|Add1~37_sumout\,
	cout => \multiplication|Add1~38\);

\multiplication|bit_counter[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~37_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(9));

\multiplication|Add1~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~33_sumout\ = SUM(( \multiplication|bit_counter\(10) ) + ( GND ) + ( \multiplication|Add1~38\ ))
-- \multiplication|Add1~34\ = CARRY(( \multiplication|bit_counter\(10) ) + ( GND ) + ( \multiplication|Add1~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(10),
	cin => \multiplication|Add1~38\,
	sumout => \multiplication|Add1~33_sumout\,
	cout => \multiplication|Add1~34\);

\multiplication|bit_counter[10]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~33_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(10));

\multiplication|Add1~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~29_sumout\ = SUM(( \multiplication|bit_counter\(11) ) + ( GND ) + ( \multiplication|Add1~34\ ))
-- \multiplication|Add1~30\ = CARRY(( \multiplication|bit_counter\(11) ) + ( GND ) + ( \multiplication|Add1~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(11),
	cin => \multiplication|Add1~34\,
	sumout => \multiplication|Add1~29_sumout\,
	cout => \multiplication|Add1~30\);

\multiplication|bit_counter[11]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~29_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(11));

\multiplication|Add1~73\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~73_sumout\ = SUM(( \multiplication|bit_counter\(12) ) + ( GND ) + ( \multiplication|Add1~30\ ))
-- \multiplication|Add1~74\ = CARRY(( \multiplication|bit_counter\(12) ) + ( GND ) + ( \multiplication|Add1~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(12),
	cin => \multiplication|Add1~30\,
	sumout => \multiplication|Add1~73_sumout\,
	cout => \multiplication|Add1~74\);

\multiplication|bit_counter[12]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~73_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(12));

\multiplication|Add1~69\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~69_sumout\ = SUM(( \multiplication|bit_counter\(13) ) + ( GND ) + ( \multiplication|Add1~74\ ))
-- \multiplication|Add1~70\ = CARRY(( \multiplication|bit_counter\(13) ) + ( GND ) + ( \multiplication|Add1~74\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(13),
	cin => \multiplication|Add1~74\,
	sumout => \multiplication|Add1~69_sumout\,
	cout => \multiplication|Add1~70\);

\multiplication|bit_counter[13]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~69_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(13));

\multiplication|Add1~61\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~61_sumout\ = SUM(( \multiplication|bit_counter\(14) ) + ( GND ) + ( \multiplication|Add1~70\ ))
-- \multiplication|Add1~62\ = CARRY(( \multiplication|bit_counter\(14) ) + ( GND ) + ( \multiplication|Add1~70\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(14),
	cin => \multiplication|Add1~70\,
	sumout => \multiplication|Add1~61_sumout\,
	cout => \multiplication|Add1~62\);

\multiplication|bit_counter[14]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~61_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(14));

\multiplication|Add1~57\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~57_sumout\ = SUM(( \multiplication|bit_counter\(15) ) + ( GND ) + ( \multiplication|Add1~62\ ))
-- \multiplication|Add1~58\ = CARRY(( \multiplication|bit_counter\(15) ) + ( GND ) + ( \multiplication|Add1~62\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(15),
	cin => \multiplication|Add1~62\,
	sumout => \multiplication|Add1~57_sumout\,
	cout => \multiplication|Add1~58\);

\multiplication|bit_counter[15]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~57_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(15));

\multiplication|Add1~53\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~53_sumout\ = SUM(( \multiplication|bit_counter\(16) ) + ( GND ) + ( \multiplication|Add1~58\ ))
-- \multiplication|Add1~54\ = CARRY(( \multiplication|bit_counter\(16) ) + ( GND ) + ( \multiplication|Add1~58\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(16),
	cin => \multiplication|Add1~58\,
	sumout => \multiplication|Add1~53_sumout\,
	cout => \multiplication|Add1~54\);

\multiplication|bit_counter[16]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~53_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(16));

\multiplication|Add1~121\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~121_sumout\ = SUM(( \multiplication|bit_counter\(17) ) + ( GND ) + ( \multiplication|Add1~54\ ))
-- \multiplication|Add1~122\ = CARRY(( \multiplication|bit_counter\(17) ) + ( GND ) + ( \multiplication|Add1~54\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(17),
	cin => \multiplication|Add1~54\,
	sumout => \multiplication|Add1~121_sumout\,
	cout => \multiplication|Add1~122\);

\multiplication|bit_counter[17]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~121_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(17));

\multiplication|Add1~117\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~117_sumout\ = SUM(( \multiplication|bit_counter\(18) ) + ( GND ) + ( \multiplication|Add1~122\ ))
-- \multiplication|Add1~118\ = CARRY(( \multiplication|bit_counter\(18) ) + ( GND ) + ( \multiplication|Add1~122\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(18),
	cin => \multiplication|Add1~122\,
	sumout => \multiplication|Add1~117_sumout\,
	cout => \multiplication|Add1~118\);

\multiplication|bit_counter[18]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~117_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(18));

\multiplication|Add1~113\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~113_sumout\ = SUM(( \multiplication|bit_counter\(19) ) + ( GND ) + ( \multiplication|Add1~118\ ))
-- \multiplication|Add1~114\ = CARRY(( \multiplication|bit_counter\(19) ) + ( GND ) + ( \multiplication|Add1~118\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(19),
	cin => \multiplication|Add1~118\,
	sumout => \multiplication|Add1~113_sumout\,
	cout => \multiplication|Add1~114\);

\multiplication|bit_counter[19]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~113_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(19));

\multiplication|Add1~109\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~109_sumout\ = SUM(( \multiplication|bit_counter\(20) ) + ( GND ) + ( \multiplication|Add1~114\ ))
-- \multiplication|Add1~110\ = CARRY(( \multiplication|bit_counter\(20) ) + ( GND ) + ( \multiplication|Add1~114\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(20),
	cin => \multiplication|Add1~114\,
	sumout => \multiplication|Add1~109_sumout\,
	cout => \multiplication|Add1~110\);

\multiplication|bit_counter[20]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~109_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(20));

\multiplication|Add1~105\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~105_sumout\ = SUM(( \multiplication|bit_counter\(21) ) + ( GND ) + ( \multiplication|Add1~110\ ))
-- \multiplication|Add1~106\ = CARRY(( \multiplication|bit_counter\(21) ) + ( GND ) + ( \multiplication|Add1~110\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(21),
	cin => \multiplication|Add1~110\,
	sumout => \multiplication|Add1~105_sumout\,
	cout => \multiplication|Add1~106\);

\multiplication|bit_counter[21]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~105_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(21));

\multiplication|Add1~101\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~101_sumout\ = SUM(( \multiplication|bit_counter\(22) ) + ( GND ) + ( \multiplication|Add1~106\ ))
-- \multiplication|Add1~102\ = CARRY(( \multiplication|bit_counter\(22) ) + ( GND ) + ( \multiplication|Add1~106\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(22),
	cin => \multiplication|Add1~106\,
	sumout => \multiplication|Add1~101_sumout\,
	cout => \multiplication|Add1~102\);

\multiplication|bit_counter[22]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~101_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(22));

\multiplication|Add1~97\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~97_sumout\ = SUM(( \multiplication|bit_counter\(23) ) + ( GND ) + ( \multiplication|Add1~102\ ))
-- \multiplication|Add1~98\ = CARRY(( \multiplication|bit_counter\(23) ) + ( GND ) + ( \multiplication|Add1~102\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(23),
	cin => \multiplication|Add1~102\,
	sumout => \multiplication|Add1~97_sumout\,
	cout => \multiplication|Add1~98\);

\multiplication|bit_counter[23]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~97_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(23));

\multiplication|Add1~65\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~65_sumout\ = SUM(( \multiplication|bit_counter\(24) ) + ( GND ) + ( \multiplication|Add1~98\ ))
-- \multiplication|Add1~66\ = CARRY(( \multiplication|bit_counter\(24) ) + ( GND ) + ( \multiplication|Add1~98\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(24),
	cin => \multiplication|Add1~98\,
	sumout => \multiplication|Add1~65_sumout\,
	cout => \multiplication|Add1~66\);

\multiplication|bit_counter[24]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~65_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(24));

\multiplication|Add1~93\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~93_sumout\ = SUM(( \multiplication|bit_counter\(25) ) + ( GND ) + ( \multiplication|Add1~66\ ))
-- \multiplication|Add1~94\ = CARRY(( \multiplication|bit_counter\(25) ) + ( GND ) + ( \multiplication|Add1~66\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(25),
	cin => \multiplication|Add1~66\,
	sumout => \multiplication|Add1~93_sumout\,
	cout => \multiplication|Add1~94\);

\multiplication|bit_counter[25]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~93_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(25));

\multiplication|Add1~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~5_sumout\ = SUM(( \multiplication|bit_counter\(26) ) + ( GND ) + ( \multiplication|Add1~94\ ))
-- \multiplication|Add1~6\ = CARRY(( \multiplication|bit_counter\(26) ) + ( GND ) + ( \multiplication|Add1~94\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(26),
	cin => \multiplication|Add1~94\,
	sumout => \multiplication|Add1~5_sumout\,
	cout => \multiplication|Add1~6\);

\multiplication|bit_counter[26]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~5_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(26));

\multiplication|Add1~89\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~89_sumout\ = SUM(( \multiplication|bit_counter\(27) ) + ( GND ) + ( \multiplication|Add1~6\ ))
-- \multiplication|Add1~90\ = CARRY(( \multiplication|bit_counter\(27) ) + ( GND ) + ( \multiplication|Add1~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(27),
	cin => \multiplication|Add1~6\,
	sumout => \multiplication|Add1~89_sumout\,
	cout => \multiplication|Add1~90\);

\multiplication|bit_counter[27]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~89_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(27));

\multiplication|Add1~85\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~85_sumout\ = SUM(( \multiplication|bit_counter\(28) ) + ( GND ) + ( \multiplication|Add1~90\ ))
-- \multiplication|Add1~86\ = CARRY(( \multiplication|bit_counter\(28) ) + ( GND ) + ( \multiplication|Add1~90\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(28),
	cin => \multiplication|Add1~90\,
	sumout => \multiplication|Add1~85_sumout\,
	cout => \multiplication|Add1~86\);

\multiplication|bit_counter[28]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~85_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(28));

\multiplication|Add1~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~25_sumout\ = SUM(( \multiplication|bit_counter\(29) ) + ( GND ) + ( \multiplication|Add1~86\ ))
-- \multiplication|Add1~26\ = CARRY(( \multiplication|bit_counter\(29) ) + ( GND ) + ( \multiplication|Add1~86\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(29),
	cin => \multiplication|Add1~86\,
	sumout => \multiplication|Add1~25_sumout\,
	cout => \multiplication|Add1~26\);

\multiplication|bit_counter[29]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~25_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(29));

\multiplication|Add1~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~21_sumout\ = SUM(( \multiplication|bit_counter\(30) ) + ( GND ) + ( \multiplication|Add1~26\ ))
-- \multiplication|Add1~22\ = CARRY(( \multiplication|bit_counter\(30) ) + ( GND ) + ( \multiplication|Add1~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(30),
	cin => \multiplication|Add1~26\,
	sumout => \multiplication|Add1~21_sumout\,
	cout => \multiplication|Add1~22\);

\multiplication|bit_counter[30]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~21_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(30));

\multiplication|Add1~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add1~1_sumout\ = SUM(( \multiplication|bit_counter\(31) ) + ( GND ) + ( \multiplication|Add1~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_bit_counter\(31),
	cin => \multiplication|Add1~22\,
	sumout => \multiplication|Add1~1_sumout\);

\multiplication|bit_counter[31]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add1~1_sumout\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|bit_counter[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|bit_counter\(31));

\multiplication|LessThan0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|LessThan0~0_combout\ = ( !\multiplication|bit_counter\(30) & ( !\multiplication|bit_counter\(29) & ( (!\multiplication|bit_counter\(26) & (!\multiplication|bit_counter\(5) & (!\multiplication|bit_counter\(4) & 
-- !\multiplication|bit_counter\(3)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_bit_counter\(26),
	datab => \multiplication|ALT_INV_bit_counter\(5),
	datac => \multiplication|ALT_INV_bit_counter\(4),
	datad => \multiplication|ALT_INV_bit_counter\(3),
	datae => \multiplication|ALT_INV_bit_counter\(30),
	dataf => \multiplication|ALT_INV_bit_counter\(29),
	combout => \multiplication|LessThan0~0_combout\);

\multiplication|LessThan0~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|LessThan0~1_combout\ = ( !\multiplication|bit_counter\(7) & ( !\multiplication|bit_counter\(6) & ( (!\multiplication|bit_counter\(11) & (!\multiplication|bit_counter\(10) & (!\multiplication|bit_counter\(9) & 
-- !\multiplication|bit_counter\(8)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_bit_counter\(11),
	datab => \multiplication|ALT_INV_bit_counter\(10),
	datac => \multiplication|ALT_INV_bit_counter\(9),
	datad => \multiplication|ALT_INV_bit_counter\(8),
	datae => \multiplication|ALT_INV_bit_counter\(7),
	dataf => \multiplication|ALT_INV_bit_counter\(6),
	combout => \multiplication|LessThan0~1_combout\);

\multiplication|LessThan0~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|LessThan0~2_combout\ = ( !\multiplication|bit_counter\(13) & ( !\multiplication|bit_counter\(12) & ( (!\multiplication|bit_counter\(16) & (!\multiplication|bit_counter\(15) & (!\multiplication|bit_counter\(14) & 
-- !\multiplication|bit_counter\(24)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_bit_counter\(16),
	datab => \multiplication|ALT_INV_bit_counter\(15),
	datac => \multiplication|ALT_INV_bit_counter\(14),
	datad => \multiplication|ALT_INV_bit_counter\(24),
	datae => \multiplication|ALT_INV_bit_counter\(13),
	dataf => \multiplication|ALT_INV_bit_counter\(12),
	combout => \multiplication|LessThan0~2_combout\);

\multiplication|LessThan0~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|LessThan0~3_combout\ = ( !\multiplication|bit_counter\(25) & ( !\multiplication|bit_counter\(23) & ( (!\multiplication|bit_counter\(28) & (!\multiplication|bit_counter\(27) & ((!\multiplication|bit_counter\(2)) # 
-- (!\multiplication|bit_counter\(1))))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1110000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_bit_counter\(2),
	datab => \multiplication|ALT_INV_bit_counter\(1),
	datac => \multiplication|ALT_INV_bit_counter\(28),
	datad => \multiplication|ALT_INV_bit_counter\(27),
	datae => \multiplication|ALT_INV_bit_counter\(25),
	dataf => \multiplication|ALT_INV_bit_counter\(23),
	combout => \multiplication|LessThan0~3_combout\);

\multiplication|LessThan0~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|LessThan0~4_combout\ = ( !\multiplication|bit_counter\(18) & ( !\multiplication|bit_counter\(17) & ( (!\multiplication|bit_counter\(22) & (!\multiplication|bit_counter\(21) & (!\multiplication|bit_counter\(20) & 
-- !\multiplication|bit_counter\(19)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_bit_counter\(22),
	datab => \multiplication|ALT_INV_bit_counter\(21),
	datac => \multiplication|ALT_INV_bit_counter\(20),
	datad => \multiplication|ALT_INV_bit_counter\(19),
	datae => \multiplication|ALT_INV_bit_counter\(18),
	dataf => \multiplication|ALT_INV_bit_counter\(17),
	combout => \multiplication|LessThan0~4_combout\);

\multiplication|LessThan0~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|LessThan0~5_combout\ = ( \multiplication|LessThan0~3_combout\ & ( \multiplication|LessThan0~4_combout\ & ( (!\multiplication|bit_counter\(31) & ((!\multiplication|LessThan0~0_combout\) # ((!\multiplication|LessThan0~1_combout\) # 
-- (!\multiplication|LessThan0~2_combout\)))) ) ) ) # ( !\multiplication|LessThan0~3_combout\ & ( \multiplication|LessThan0~4_combout\ & ( !\multiplication|bit_counter\(31) ) ) ) # ( \multiplication|LessThan0~3_combout\ & ( 
-- !\multiplication|LessThan0~4_combout\ & ( !\multiplication|bit_counter\(31) ) ) ) # ( !\multiplication|LessThan0~3_combout\ & ( !\multiplication|LessThan0~4_combout\ & ( !\multiplication|bit_counter\(31) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_bit_counter\(31),
	datab => \multiplication|ALT_INV_LessThan0~0_combout\,
	datac => \multiplication|ALT_INV_LessThan0~1_combout\,
	datad => \multiplication|ALT_INV_LessThan0~2_combout\,
	datae => \multiplication|ALT_INV_LessThan0~3_combout\,
	dataf => \multiplication|ALT_INV_LessThan0~4_combout\,
	combout => \multiplication|LessThan0~5_combout\);

\multiplication|state~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|state~0_combout\ = (!\multiplication|state~q\ & ((!\Start~input_o\))) # (\multiplication|state~q\ & (!\multiplication|LessThan0~5_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1110010011100100111001001110010011100100111001001110010011100100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \multiplication|ALT_INV_LessThan0~5_combout\,
	datac => \ALT_INV_Start~input_o\,
	combout => \multiplication|state~0_combout\);

\multiplication|state\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|state~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|state~q\);

\multiplication|Data_A[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_A~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_A\(0));

\multiplication|Add0~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add0~1_sumout\ = SUM(( \multiplication|Data_A\(0) ) + ( \multiplication|Data_Product\(0) ) + ( !VCC ))
-- \multiplication|Add0~2\ = CARRY(( \multiplication|Data_A\(0) ) + ( \multiplication|Data_Product\(0) ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_Data_A\(0),
	dataf => \multiplication|ALT_INV_Data_Product\(0),
	cin => GND,
	sumout => \multiplication|Add0~1_sumout\,
	cout => \multiplication|Add0~2\);

\multiplication|Data_B~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_B~0_combout\ = (!\multiplication|state~q\ & \B[4]~input_o\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \ALT_INV_B[4]~input_o\,
	combout => \multiplication|Data_B~0_combout\);

\multiplication|Data_B~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_B~1_combout\ = (!\multiplication|state~q\ & ((!\Start~input_o\))) # (\multiplication|state~q\ & (\multiplication|LessThan0~5_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1011000110110001101100011011000110110001101100011011000110110001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \multiplication|ALT_INV_LessThan0~5_combout\,
	datac => \ALT_INV_Start~input_o\,
	combout => \multiplication|Data_B~1_combout\);

\multiplication|Data_B[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_B~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|Data_B~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_B\(4));

\multiplication|Data_B~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_B~2_combout\ = (!\multiplication|state~q\ & \B[0]~input_o\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \ALT_INV_B[0]~input_o\,
	combout => \multiplication|Data_B~2_combout\);

\multiplication|Data_B[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_B~2_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|Data_B~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_B\(0));

\multiplication|Data_B~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_B~3_combout\ = (!\multiplication|state~q\ & \B[1]~input_o\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \ALT_INV_B[1]~input_o\,
	combout => \multiplication|Data_B~3_combout\);

\multiplication|Data_B[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_B~3_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|Data_B~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_B\(1));

\multiplication|Data_B~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_B~4_combout\ = (!\multiplication|state~q\ & \B[2]~input_o\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \ALT_INV_B[2]~input_o\,
	combout => \multiplication|Data_B~4_combout\);

\multiplication|Data_B[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_B~4_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|Data_B~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_B\(2));

\multiplication|Data_B~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_B~5_combout\ = (!\multiplication|state~q\ & \B[3]~input_o\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \ALT_INV_B[3]~input_o\,
	combout => \multiplication|Data_B~5_combout\);

\multiplication|Data_B[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_B~5_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|Data_B~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_B\(3));

\multiplication|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Mux0~0_combout\ = ( \multiplication|bit_counter\(0) & ( \multiplication|bit_counter\(1) & ( !\multiplication|Data_B\(3) ) ) ) # ( !\multiplication|bit_counter\(0) & ( \multiplication|bit_counter\(1) & ( !\multiplication|Data_B\(2) ) ) ) # 
-- ( \multiplication|bit_counter\(0) & ( !\multiplication|bit_counter\(1) & ( !\multiplication|Data_B\(1) ) ) ) # ( !\multiplication|bit_counter\(0) & ( !\multiplication|bit_counter\(1) & ( !\multiplication|Data_B\(0) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010110011001100110011110000111100001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_Data_B\(0),
	datab => \multiplication|ALT_INV_Data_B\(1),
	datac => \multiplication|ALT_INV_Data_B\(2),
	datad => \multiplication|ALT_INV_Data_B\(3),
	datae => \multiplication|ALT_INV_bit_counter\(0),
	dataf => \multiplication|ALT_INV_bit_counter\(1),
	combout => \multiplication|Mux0~0_combout\);

\multiplication|Data_Product[0]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_Product[0]~0_combout\ = ( \multiplication|Mux0~0_combout\ & ( (\multiplication|state~q\ & (((\multiplication|bit_counter\(2) & \multiplication|Data_B\(4))) # (\multiplication|LessThan0~5_combout\))) ) ) # ( 
-- !\multiplication|Mux0~0_combout\ & ( (\multiplication|state~q\ & ((!\multiplication|bit_counter\(2)) # ((\multiplication|Data_B\(4)) # (\multiplication|LessThan0~5_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010101010101000001010001010101000101010101010000010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \multiplication|ALT_INV_bit_counter\(2),
	datac => \multiplication|ALT_INV_LessThan0~5_combout\,
	datad => \multiplication|ALT_INV_Data_B\(4),
	datae => \multiplication|ALT_INV_Mux0~0_combout\,
	combout => \multiplication|Data_Product[0]~0_combout\);

\multiplication|Data_Product[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add0~1_sumout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_Product\(0));

\multiplication|R[3]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|R[3]~0_combout\ = (\multiplication|state~q\ & !\multiplication|LessThan0~5_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \multiplication|ALT_INV_LessThan0~5_combout\,
	combout => \multiplication|R[3]~0_combout\);

\multiplication|R[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_Product\(0),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|R[3]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|R\(0));

\add|Add0~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~5_sumout\ = SUM(( \add|bit_counter\(0) ) + ( VCC ) + ( !VCC ))
-- \add|Add0~6\ = CARRY(( \add|bit_counter\(0) ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(0),
	cin => GND,
	sumout => \add|Add0~5_sumout\,
	cout => \add|Add0~6\);

\add|Add0~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~1_sumout\ = SUM(( \add|bit_counter\(2) ) + ( GND ) + ( \add|Add0~10\ ))
-- \add|Add0~2\ = CARRY(( \add|bit_counter\(2) ) + ( GND ) + ( \add|Add0~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(2),
	cin => \add|Add0~10\,
	sumout => \add|Add0~1_sumout\,
	cout => \add|Add0~2\);

\add|Add0~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~13_sumout\ = SUM(( \add|bit_counter\(3) ) + ( GND ) + ( \add|Add0~2\ ))
-- \add|Add0~14\ = CARRY(( \add|bit_counter\(3) ) + ( GND ) + ( \add|Add0~2\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(3),
	cin => \add|Add0~2\,
	sumout => \add|Add0~13_sumout\,
	cout => \add|Add0~14\);

\add|state~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|state~0_combout\ = (!\add|state~q\ & ((!\Start~input_o\))) # (\add|state~q\ & (!\add|LessThan0~5_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1110010011100100111001001110010011100100111001001110010011100100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_state~q\,
	datab => \add|ALT_INV_LessThan0~5_combout\,
	datac => \ALT_INV_Start~input_o\,
	combout => \add|state~0_combout\);

\add|state\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|state~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|state~q\);

\sub|cout[5]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[5]~0_combout\ = (!\RST_N~input_o\ & \add|state~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \add|ALT_INV_state~q\,
	combout => \sub|cout[5]~0_combout\);

\add|bit_counter[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~13_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(3));

\add|Add0~81\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~81_sumout\ = SUM(( \add|bit_counter\(4) ) + ( GND ) + ( \add|Add0~14\ ))
-- \add|Add0~82\ = CARRY(( \add|bit_counter\(4) ) + ( GND ) + ( \add|Add0~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(4),
	cin => \add|Add0~14\,
	sumout => \add|Add0~81_sumout\,
	cout => \add|Add0~82\);

\add|bit_counter[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~81_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(4));

\add|Add0~93\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~93_sumout\ = SUM(( \add|bit_counter\(5) ) + ( GND ) + ( \add|Add0~82\ ))
-- \add|Add0~94\ = CARRY(( \add|bit_counter\(5) ) + ( GND ) + ( \add|Add0~82\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(5),
	cin => \add|Add0~82\,
	sumout => \add|Add0~93_sumout\,
	cout => \add|Add0~94\);

\add|bit_counter[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~93_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(5));

\add|Add0~97\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~97_sumout\ = SUM(( \add|bit_counter\(6) ) + ( GND ) + ( \add|Add0~94\ ))
-- \add|Add0~98\ = CARRY(( \add|bit_counter\(6) ) + ( GND ) + ( \add|Add0~94\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(6),
	cin => \add|Add0~94\,
	sumout => \add|Add0~97_sumout\,
	cout => \add|Add0~98\);

\add|bit_counter[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~97_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(6));

\add|Add0~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~25_sumout\ = SUM(( \add|bit_counter\(7) ) + ( GND ) + ( \add|Add0~98\ ))
-- \add|Add0~26\ = CARRY(( \add|bit_counter\(7) ) + ( GND ) + ( \add|Add0~98\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(7),
	cin => \add|Add0~98\,
	sumout => \add|Add0~25_sumout\,
	cout => \add|Add0~26\);

\add|bit_counter[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~25_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(7));

\add|Add0~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~41_sumout\ = SUM(( \add|bit_counter\(8) ) + ( GND ) + ( \add|Add0~26\ ))
-- \add|Add0~42\ = CARRY(( \add|bit_counter\(8) ) + ( GND ) + ( \add|Add0~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(8),
	cin => \add|Add0~26\,
	sumout => \add|Add0~41_sumout\,
	cout => \add|Add0~42\);

\add|bit_counter[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~41_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(8));

\add|Add0~113\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~113_sumout\ = SUM(( \add|bit_counter\(9) ) + ( GND ) + ( \add|Add0~42\ ))
-- \add|Add0~114\ = CARRY(( \add|bit_counter\(9) ) + ( GND ) + ( \add|Add0~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(9),
	cin => \add|Add0~42\,
	sumout => \add|Add0~113_sumout\,
	cout => \add|Add0~114\);

\add|bit_counter[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~113_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(9));

\add|Add0~121\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~121_sumout\ = SUM(( \add|bit_counter\(10) ) + ( GND ) + ( \add|Add0~114\ ))
-- \add|Add0~122\ = CARRY(( \add|bit_counter\(10) ) + ( GND ) + ( \add|Add0~114\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(10),
	cin => \add|Add0~114\,
	sumout => \add|Add0~121_sumout\,
	cout => \add|Add0~122\);

\add|bit_counter[10]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~121_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(10));

\add|Add0~125\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~125_sumout\ = SUM(( \add|bit_counter\(11) ) + ( GND ) + ( \add|Add0~122\ ))
-- \add|Add0~126\ = CARRY(( \add|bit_counter\(11) ) + ( GND ) + ( \add|Add0~122\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(11),
	cin => \add|Add0~122\,
	sumout => \add|Add0~125_sumout\,
	cout => \add|Add0~126\);

\add|bit_counter[11]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~125_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(11));

\add|Add0~101\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~101_sumout\ = SUM(( \add|bit_counter\(12) ) + ( GND ) + ( \add|Add0~126\ ))
-- \add|Add0~102\ = CARRY(( \add|bit_counter\(12) ) + ( GND ) + ( \add|Add0~126\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(12),
	cin => \add|Add0~126\,
	sumout => \add|Add0~101_sumout\,
	cout => \add|Add0~102\);

\add|bit_counter[12]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~101_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(12));

\add|Add0~105\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~105_sumout\ = SUM(( \add|bit_counter\(13) ) + ( GND ) + ( \add|Add0~102\ ))
-- \add|Add0~106\ = CARRY(( \add|bit_counter\(13) ) + ( GND ) + ( \add|Add0~102\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(13),
	cin => \add|Add0~102\,
	sumout => \add|Add0~105_sumout\,
	cout => \add|Add0~106\);

\add|bit_counter[13]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~105_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(13));

\add|Add0~57\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~57_sumout\ = SUM(( \add|bit_counter\(14) ) + ( GND ) + ( \add|Add0~106\ ))
-- \add|Add0~58\ = CARRY(( \add|bit_counter\(14) ) + ( GND ) + ( \add|Add0~106\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(14),
	cin => \add|Add0~106\,
	sumout => \add|Add0~57_sumout\,
	cout => \add|Add0~58\);

\add|bit_counter[14]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~57_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(14));

\add|Add0~49\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~49_sumout\ = SUM(( \add|bit_counter\(15) ) + ( GND ) + ( \add|Add0~58\ ))
-- \add|Add0~50\ = CARRY(( \add|bit_counter\(15) ) + ( GND ) + ( \add|Add0~58\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(15),
	cin => \add|Add0~58\,
	sumout => \add|Add0~49_sumout\,
	cout => \add|Add0~50\);

\add|bit_counter[15]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~49_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(15));

\add|Add0~45\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~45_sumout\ = SUM(( \add|bit_counter\(16) ) + ( GND ) + ( \add|Add0~50\ ))
-- \add|Add0~46\ = CARRY(( \add|bit_counter\(16) ) + ( GND ) + ( \add|Add0~50\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(16),
	cin => \add|Add0~50\,
	sumout => \add|Add0~45_sumout\,
	cout => \add|Add0~46\);

\add|bit_counter[16]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~45_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(16));

\add|Add0~85\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~85_sumout\ = SUM(( \add|bit_counter\(17) ) + ( GND ) + ( \add|Add0~46\ ))
-- \add|Add0~86\ = CARRY(( \add|bit_counter\(17) ) + ( GND ) + ( \add|Add0~46\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(17),
	cin => \add|Add0~46\,
	sumout => \add|Add0~85_sumout\,
	cout => \add|Add0~86\);

\add|bit_counter[17]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~85_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(17));

\add|Add0~89\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~89_sumout\ = SUM(( \add|bit_counter\(18) ) + ( GND ) + ( \add|Add0~86\ ))
-- \add|Add0~90\ = CARRY(( \add|bit_counter\(18) ) + ( GND ) + ( \add|Add0~86\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(18),
	cin => \add|Add0~86\,
	sumout => \add|Add0~89_sumout\,
	cout => \add|Add0~90\);

\add|bit_counter[18]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~89_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(18));

\add|Add0~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~33_sumout\ = SUM(( \add|bit_counter\(19) ) + ( GND ) + ( \add|Add0~90\ ))
-- \add|Add0~34\ = CARRY(( \add|bit_counter\(19) ) + ( GND ) + ( \add|Add0~90\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(19),
	cin => \add|Add0~90\,
	sumout => \add|Add0~33_sumout\,
	cout => \add|Add0~34\);

\add|bit_counter[19]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~33_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(19));

\add|Add0~117\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~117_sumout\ = SUM(( \add|bit_counter\(20) ) + ( GND ) + ( \add|Add0~34\ ))
-- \add|Add0~118\ = CARRY(( \add|bit_counter\(20) ) + ( GND ) + ( \add|Add0~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(20),
	cin => \add|Add0~34\,
	sumout => \add|Add0~117_sumout\,
	cout => \add|Add0~118\);

\add|bit_counter[20]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~117_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(20));

\add|Add0~109\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~109_sumout\ = SUM(( \add|bit_counter\(21) ) + ( GND ) + ( \add|Add0~118\ ))
-- \add|Add0~110\ = CARRY(( \add|bit_counter\(21) ) + ( GND ) + ( \add|Add0~118\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(21),
	cin => \add|Add0~118\,
	sumout => \add|Add0~109_sumout\,
	cout => \add|Add0~110\);

\add|bit_counter[21]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~109_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(21));

\add|Add0~53\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~53_sumout\ = SUM(( \add|bit_counter\(22) ) + ( GND ) + ( \add|Add0~110\ ))
-- \add|Add0~54\ = CARRY(( \add|bit_counter\(22) ) + ( GND ) + ( \add|Add0~110\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(22),
	cin => \add|Add0~110\,
	sumout => \add|Add0~53_sumout\,
	cout => \add|Add0~54\);

\add|bit_counter[22]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~53_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(22));

\add|Add0~61\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~61_sumout\ = SUM(( \add|bit_counter\(23) ) + ( GND ) + ( \add|Add0~54\ ))
-- \add|Add0~62\ = CARRY(( \add|bit_counter\(23) ) + ( GND ) + ( \add|Add0~54\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(23),
	cin => \add|Add0~54\,
	sumout => \add|Add0~61_sumout\,
	cout => \add|Add0~62\);

\add|bit_counter[23]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~61_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(23));

\add|Add0~77\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~77_sumout\ = SUM(( \add|bit_counter\(24) ) + ( GND ) + ( \add|Add0~62\ ))
-- \add|Add0~78\ = CARRY(( \add|bit_counter\(24) ) + ( GND ) + ( \add|Add0~62\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(24),
	cin => \add|Add0~62\,
	sumout => \add|Add0~77_sumout\,
	cout => \add|Add0~78\);

\add|bit_counter[24]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~77_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(24));

\add|Add0~73\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~73_sumout\ = SUM(( \add|bit_counter\(25) ) + ( GND ) + ( \add|Add0~78\ ))
-- \add|Add0~74\ = CARRY(( \add|bit_counter\(25) ) + ( GND ) + ( \add|Add0~78\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(25),
	cin => \add|Add0~78\,
	sumout => \add|Add0~73_sumout\,
	cout => \add|Add0~74\);

\add|bit_counter[25]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~73_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(25));

\add|Add0~69\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~69_sumout\ = SUM(( \add|bit_counter\(26) ) + ( GND ) + ( \add|Add0~74\ ))
-- \add|Add0~70\ = CARRY(( \add|bit_counter\(26) ) + ( GND ) + ( \add|Add0~74\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(26),
	cin => \add|Add0~74\,
	sumout => \add|Add0~69_sumout\,
	cout => \add|Add0~70\);

\add|bit_counter[26]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~69_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(26));

\add|Add0~65\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~65_sumout\ = SUM(( \add|bit_counter\(27) ) + ( GND ) + ( \add|Add0~70\ ))
-- \add|Add0~66\ = CARRY(( \add|bit_counter\(27) ) + ( GND ) + ( \add|Add0~70\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(27),
	cin => \add|Add0~70\,
	sumout => \add|Add0~65_sumout\,
	cout => \add|Add0~66\);

\add|bit_counter[27]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~65_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(27));

\add|Add0~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~37_sumout\ = SUM(( \add|bit_counter\(28) ) + ( GND ) + ( \add|Add0~66\ ))
-- \add|Add0~38\ = CARRY(( \add|bit_counter\(28) ) + ( GND ) + ( \add|Add0~66\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(28),
	cin => \add|Add0~66\,
	sumout => \add|Add0~37_sumout\,
	cout => \add|Add0~38\);

\add|bit_counter[28]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~37_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(28));

\add|Add0~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~29_sumout\ = SUM(( \add|bit_counter\(29) ) + ( GND ) + ( \add|Add0~38\ ))
-- \add|Add0~30\ = CARRY(( \add|bit_counter\(29) ) + ( GND ) + ( \add|Add0~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(29),
	cin => \add|Add0~38\,
	sumout => \add|Add0~29_sumout\,
	cout => \add|Add0~30\);

\add|bit_counter[29]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~29_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(29));

\add|Add0~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~21_sumout\ = SUM(( \add|bit_counter\(30) ) + ( GND ) + ( \add|Add0~30\ ))
-- \add|Add0~22\ = CARRY(( \add|bit_counter\(30) ) + ( GND ) + ( \add|Add0~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(30),
	cin => \add|Add0~30\,
	sumout => \add|Add0~21_sumout\,
	cout => \add|Add0~22\);

\add|bit_counter[30]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~21_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(30));

\add|Add0~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~17_sumout\ = SUM(( \add|bit_counter\(31) ) + ( GND ) + ( \add|Add0~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(31),
	cin => \add|Add0~22\,
	sumout => \add|Add0~17_sumout\);

\add|bit_counter[31]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~17_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(31));

\add|LessThan0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|LessThan0~0_combout\ = ( !\add|bit_counter\(28) & ( !\add|bit_counter\(8) & ( (!\add|bit_counter\(30) & (!\add|bit_counter\(7) & (!\add|bit_counter\(29) & !\add|bit_counter\(19)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(30),
	datab => \add|ALT_INV_bit_counter\(7),
	datac => \add|ALT_INV_bit_counter\(29),
	datad => \add|ALT_INV_bit_counter\(19),
	datae => \add|ALT_INV_bit_counter\(28),
	dataf => \add|ALT_INV_bit_counter\(8),
	combout => \add|LessThan0~0_combout\);

\add|LessThan0~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|LessThan0~1_combout\ = ( !\add|bit_counter\(14) & ( !\add|bit_counter\(23) & ( (!\add|bit_counter\(3) & (!\add|bit_counter\(16) & (!\add|bit_counter\(15) & !\add|bit_counter\(22)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(3),
	datab => \add|ALT_INV_bit_counter\(16),
	datac => \add|ALT_INV_bit_counter\(15),
	datad => \add|ALT_INV_bit_counter\(22),
	datae => \add|ALT_INV_bit_counter\(14),
	dataf => \add|ALT_INV_bit_counter\(23),
	combout => \add|LessThan0~1_combout\);

\add|LessThan0~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|LessThan0~2_combout\ = ( !\add|bit_counter\(4) & ( !\add|bit_counter\(17) & ( (!\add|bit_counter\(27) & (!\add|bit_counter\(26) & (!\add|bit_counter\(25) & !\add|bit_counter\(24)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(27),
	datab => \add|ALT_INV_bit_counter\(26),
	datac => \add|ALT_INV_bit_counter\(25),
	datad => \add|ALT_INV_bit_counter\(24),
	datae => \add|ALT_INV_bit_counter\(4),
	dataf => \add|ALT_INV_bit_counter\(17),
	combout => \add|LessThan0~2_combout\);

\add|LessThan0~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|LessThan0~3_combout\ = ( !\add|bit_counter\(13) & ( !\add|bit_counter\(21) & ( (!\add|bit_counter\(18) & (!\add|bit_counter\(5) & (!\add|bit_counter\(6) & !\add|bit_counter\(12)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(18),
	datab => \add|ALT_INV_bit_counter\(5),
	datac => \add|ALT_INV_bit_counter\(6),
	datad => \add|ALT_INV_bit_counter\(12),
	datae => \add|ALT_INV_bit_counter\(13),
	dataf => \add|ALT_INV_bit_counter\(21),
	combout => \add|LessThan0~3_combout\);

\add|LessThan0~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|LessThan0~4_combout\ = ( !\add|bit_counter\(10) & ( !\add|bit_counter\(11) & ( (!\add|bit_counter\(9) & (!\add|bit_counter\(20) & ((!\add|bit_counter\(2)) # (!\add|bit_counter\(1))))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1110000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(2),
	datab => \add|ALT_INV_bit_counter\(1),
	datac => \add|ALT_INV_bit_counter\(9),
	datad => \add|ALT_INV_bit_counter\(20),
	datae => \add|ALT_INV_bit_counter\(10),
	dataf => \add|ALT_INV_bit_counter\(11),
	combout => \add|LessThan0~4_combout\);

\add|LessThan0~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|LessThan0~5_combout\ = ( \add|LessThan0~3_combout\ & ( \add|LessThan0~4_combout\ & ( (!\add|bit_counter\(31) & ((!\add|LessThan0~0_combout\) # ((!\add|LessThan0~1_combout\) # (!\add|LessThan0~2_combout\)))) ) ) ) # ( !\add|LessThan0~3_combout\ & ( 
-- \add|LessThan0~4_combout\ & ( !\add|bit_counter\(31) ) ) ) # ( \add|LessThan0~3_combout\ & ( !\add|LessThan0~4_combout\ & ( !\add|bit_counter\(31) ) ) ) # ( !\add|LessThan0~3_combout\ & ( !\add|LessThan0~4_combout\ & ( !\add|bit_counter\(31) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(31),
	datab => \add|ALT_INV_LessThan0~0_combout\,
	datac => \add|ALT_INV_LessThan0~1_combout\,
	datad => \add|ALT_INV_LessThan0~2_combout\,
	datae => \add|ALT_INV_LessThan0~3_combout\,
	dataf => \add|ALT_INV_LessThan0~4_combout\,
	combout => \add|LessThan0~5_combout\);

\add|bit_counter[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~5_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(0));

\add|Add0~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Add0~9_sumout\ = SUM(( \add|bit_counter\(1) ) + ( GND ) + ( \add|Add0~6\ ))
-- \add|Add0~10\ = CARRY(( \add|bit_counter\(1) ) + ( GND ) + ( \add|Add0~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_bit_counter\(1),
	cin => \add|Add0~6\,
	sumout => \add|Add0~9_sumout\,
	cout => \add|Add0~10\);

\add|bit_counter[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~9_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(1));

\add|bit_counter[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|Add0~1_sumout\,
	sclr => \add|LessThan0~5_combout\,
	ena => \sub|cout[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|bit_counter\(2));

\add|Mux1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Mux1~0_combout\ = ( \add|bit_counter\(0) & ( \add|bit_counter\(1) & ( \B[3]~input_o\ ) ) ) # ( !\add|bit_counter\(0) & ( \add|bit_counter\(1) & ( \B[2]~input_o\ ) ) ) # ( \add|bit_counter\(0) & ( !\add|bit_counter\(1) & ( \B[1]~input_o\ ) ) ) # ( 
-- !\add|bit_counter\(0) & ( !\add|bit_counter\(1) & ( \B[0]~input_o\ ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_B[0]~input_o\,
	datab => \ALT_INV_B[1]~input_o\,
	datac => \ALT_INV_B[2]~input_o\,
	datad => \ALT_INV_B[3]~input_o\,
	datae => \add|ALT_INV_bit_counter\(0),
	dataf => \add|ALT_INV_bit_counter\(1),
	combout => \add|Mux1~0_combout\);

\add|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Mux0~0_combout\ = ( \add|bit_counter\(0) & ( \add|bit_counter\(1) & ( \A[3]~input_o\ ) ) ) # ( !\add|bit_counter\(0) & ( \add|bit_counter\(1) & ( \A[2]~input_o\ ) ) ) # ( \add|bit_counter\(0) & ( !\add|bit_counter\(1) & ( \A[1]~input_o\ ) ) ) # ( 
-- !\add|bit_counter\(0) & ( !\add|bit_counter\(1) & ( \A[0]~input_o\ ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_A[0]~input_o\,
	datab => \ALT_INV_A[1]~input_o\,
	datac => \ALT_INV_A[2]~input_o\,
	datad => \ALT_INV_A[3]~input_o\,
	datae => \add|ALT_INV_bit_counter\(0),
	dataf => \add|ALT_INV_bit_counter\(1),
	combout => \add|Mux0~0_combout\);

\sub|Mux1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|Mux1~0_combout\ = (!\add|bit_counter\(2) & ((\add|Mux1~0_combout\))) # (\add|bit_counter\(2) & (\B[4]~input_o\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_B[4]~input_o\,
	datab => \add|ALT_INV_bit_counter\(2),
	datac => \add|ALT_INV_Mux1~0_combout\,
	combout => \sub|Mux1~0_combout\);

\sub|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|Mux0~0_combout\ = (!\add|bit_counter\(2) & ((\add|Mux0~0_combout\))) # (\add|bit_counter\(2) & (\A[4]~input_o\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(2),
	datab => \ALT_INV_A[4]~input_o\,
	datac => \add|ALT_INV_Mux0~0_combout\,
	combout => \sub|Mux0~0_combout\);

\add|Decoder0~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~9_combout\ = (\add|bit_counter\(2) & \add|bit_counter\(1))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(2),
	datab => \add|ALT_INV_bit_counter\(1),
	combout => \add|Decoder0~9_combout\);

\sub|cout[0]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[0]~1_combout\ = ( \add|bit_counter\(31) & ( \Start~input_o\ & ( (!\RST_N~input_o\ & (\add|bit_counter\(0) & (\add|state~q\ & \add|Decoder0~9_combout\))) ) ) ) # ( \add|bit_counter\(31) & ( !\Start~input_o\ & ( (!\RST_N~input_o\ & 
-- ((!\add|state~q\) # ((\add|bit_counter\(0) & \add|Decoder0~9_combout\)))) ) ) ) # ( !\add|bit_counter\(31) & ( !\Start~input_o\ & ( (!\RST_N~input_o\ & !\add|state~q\) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010000010100000101000001010001000000000000000000000000000000010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \add|ALT_INV_bit_counter\(0),
	datac => \add|ALT_INV_state~q\,
	datad => \add|ALT_INV_Decoder0~9_combout\,
	datae => \add|ALT_INV_bit_counter\(31),
	dataf => \ALT_INV_Start~input_o\,
	combout => \sub|cout[0]~1_combout\);

\sub|cout[0]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[0]~2_combout\ = ( \add|state~q\ & ( \sub|cout[0]~1_combout\ & ( (!\sub|Mux1~0_combout\ & ((\sub|Mux2~1_combout\) # (\sub|Mux0~0_combout\))) # (\sub|Mux1~0_combout\ & (\sub|Mux0~0_combout\ & \sub|Mux2~1_combout\)) ) ) ) # ( !\add|state~q\ & ( 
-- \sub|cout[0]~1_combout\ ) ) # ( \add|state~q\ & ( !\sub|cout[0]~1_combout\ & ( \sub|cout\(0) ) ) ) # ( !\add|state~q\ & ( !\sub|cout[0]~1_combout\ & ( \sub|cout\(0) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111100001111000011110000111111111111111111110010001010111011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_Mux1~0_combout\,
	datab => \sub|ALT_INV_Mux0~0_combout\,
	datac => \sub|ALT_INV_cout\(0),
	datad => \sub|ALT_INV_Mux2~1_combout\,
	datae => \add|ALT_INV_state~q\,
	dataf => \sub|ALT_INV_cout[0]~1_combout\,
	combout => \sub|cout[0]~2_combout\);

\sub|cout[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|cout[0]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|cout\(0));

\add|Decoder0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~0_combout\ = (!\add|bit_counter\(2) & !\add|bit_counter\(1))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000100010001000100010001000100010001000100010001000100010001000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(2),
	datab => \add|ALT_INV_bit_counter\(1),
	combout => \add|Decoder0~0_combout\);

\sub|cout[1]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[1]~3_combout\ = ( !\add|LessThan0~5_combout\ & ( (!\RST_N~input_o\ & (!\add|bit_counter\(0) & (\add|Decoder0~0_combout\ & \add|state~q\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000001000000000000000000000000000000010000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \add|ALT_INV_bit_counter\(0),
	datac => \add|ALT_INV_Decoder0~0_combout\,
	datad => \add|ALT_INV_state~q\,
	datae => \add|ALT_INV_LessThan0~5_combout\,
	combout => \sub|cout[1]~3_combout\);

\sub|cout[1]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[1]~4_combout\ = ( \sub|cout[1]~3_combout\ & ( (!\sub|Mux1~0_combout\ & ((\sub|Mux2~1_combout\) # (\sub|Mux0~0_combout\))) # (\sub|Mux1~0_combout\ & (\sub|Mux0~0_combout\ & \sub|Mux2~1_combout\)) ) ) # ( !\sub|cout[1]~3_combout\ & ( \sub|cout\(1) 
-- ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111100001111001000101011101100001111000011110010001010111011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_Mux1~0_combout\,
	datab => \sub|ALT_INV_Mux0~0_combout\,
	datac => \sub|ALT_INV_cout\(1),
	datad => \sub|ALT_INV_Mux2~1_combout\,
	datae => \sub|ALT_INV_cout[1]~3_combout\,
	combout => \sub|cout[1]~4_combout\);

\sub|cout[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|cout[1]~4_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|cout\(1));

\sub|cout[2]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[2]~5_combout\ = ( !\add|LessThan0~5_combout\ & ( (!\RST_N~input_o\ & (\add|bit_counter\(0) & (\add|Decoder0~0_combout\ & \add|state~q\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000010000000000000000000000000000000100000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \add|ALT_INV_bit_counter\(0),
	datac => \add|ALT_INV_Decoder0~0_combout\,
	datad => \add|ALT_INV_state~q\,
	datae => \add|ALT_INV_LessThan0~5_combout\,
	combout => \sub|cout[2]~5_combout\);

\sub|cout[2]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[2]~6_combout\ = ( \sub|cout[2]~5_combout\ & ( (!\sub|Mux1~0_combout\ & ((\sub|Mux2~1_combout\) # (\sub|Mux0~0_combout\))) # (\sub|Mux1~0_combout\ & (\sub|Mux0~0_combout\ & \sub|Mux2~1_combout\)) ) ) # ( !\sub|cout[2]~5_combout\ & ( \sub|cout\(2) 
-- ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111100001111001000101011101100001111000011110010001010111011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_Mux1~0_combout\,
	datab => \sub|ALT_INV_Mux0~0_combout\,
	datac => \sub|ALT_INV_cout\(2),
	datad => \sub|ALT_INV_Mux2~1_combout\,
	datae => \sub|ALT_INV_cout[2]~5_combout\,
	combout => \sub|cout[2]~6_combout\);

\sub|cout[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|cout[2]~6_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|cout\(2));

\add|Decoder0~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~3_combout\ = (!\add|bit_counter\(2) & \add|bit_counter\(1))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(2),
	datab => \add|ALT_INV_bit_counter\(1),
	combout => \add|Decoder0~3_combout\);

\sub|cout[3]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[3]~7_combout\ = ( \add|Decoder0~3_combout\ & ( (!\RST_N~input_o\ & (!\add|bit_counter\(0) & (\add|state~q\ & !\add|LessThan0~5_combout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000010000000000000000000000000000000100000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \add|ALT_INV_bit_counter\(0),
	datac => \add|ALT_INV_state~q\,
	datad => \add|ALT_INV_LessThan0~5_combout\,
	datae => \add|ALT_INV_Decoder0~3_combout\,
	combout => \sub|cout[3]~7_combout\);

\sub|cout[3]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[3]~8_combout\ = ( \sub|cout[3]~7_combout\ & ( (!\sub|Mux1~0_combout\ & ((\sub|Mux2~1_combout\) # (\sub|Mux0~0_combout\))) # (\sub|Mux1~0_combout\ & (\sub|Mux0~0_combout\ & \sub|Mux2~1_combout\)) ) ) # ( !\sub|cout[3]~7_combout\ & ( \sub|cout\(3) 
-- ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111100001111001000101011101100001111000011110010001010111011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_Mux1~0_combout\,
	datab => \sub|ALT_INV_Mux0~0_combout\,
	datac => \sub|ALT_INV_cout\(3),
	datad => \sub|ALT_INV_Mux2~1_combout\,
	datae => \sub|ALT_INV_cout[3]~7_combout\,
	combout => \sub|cout[3]~8_combout\);

\sub|cout[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|cout[3]~8_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|cout\(3));

\sub|Mux2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|Mux2~0_combout\ = ( \add|bit_counter\(0) & ( \add|bit_counter\(1) & ( \sub|cout\(3) ) ) ) # ( !\add|bit_counter\(0) & ( \add|bit_counter\(1) & ( \sub|cout\(2) ) ) ) # ( \add|bit_counter\(0) & ( !\add|bit_counter\(1) & ( \sub|cout\(1) ) ) ) # ( 
-- !\add|bit_counter\(0) & ( !\add|bit_counter\(1) & ( \sub|cout\(0) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_cout\(0),
	datab => \sub|ALT_INV_cout\(1),
	datac => \sub|ALT_INV_cout\(2),
	datad => \sub|ALT_INV_cout\(3),
	datae => \add|ALT_INV_bit_counter\(0),
	dataf => \add|ALT_INV_bit_counter\(1),
	combout => \sub|Mux2~0_combout\);

\add|Decoder0~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~6_combout\ = (\add|bit_counter\(2) & !\add|bit_counter\(1))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(2),
	datab => \add|ALT_INV_bit_counter\(1),
	combout => \add|Decoder0~6_combout\);

\sub|cout[5]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[5]~9_combout\ = ( \add|Decoder0~6_combout\ & ( (!\RST_N~input_o\ & (!\add|bit_counter\(0) & (\add|state~q\ & !\add|LessThan0~5_combout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000010000000000000000000000000000000100000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \add|ALT_INV_bit_counter\(0),
	datac => \add|ALT_INV_state~q\,
	datad => \add|ALT_INV_LessThan0~5_combout\,
	datae => \add|ALT_INV_Decoder0~6_combout\,
	combout => \sub|cout[5]~9_combout\);

\sub|cout[5]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[5]~10_combout\ = ( \sub|cout[5]~9_combout\ & ( (!\sub|Mux1~0_combout\ & ((\sub|Mux2~1_combout\) # (\sub|Mux0~0_combout\))) # (\sub|Mux1~0_combout\ & (\sub|Mux0~0_combout\ & \sub|Mux2~1_combout\)) ) ) # ( !\sub|cout[5]~9_combout\ & ( 
-- \sub|cout\(5) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111100001111001000101011101100001111000011110010001010111011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_Mux1~0_combout\,
	datab => \sub|ALT_INV_Mux0~0_combout\,
	datac => \sub|ALT_INV_cout\(5),
	datad => \sub|ALT_INV_Mux2~1_combout\,
	datae => \sub|ALT_INV_cout[5]~9_combout\,
	combout => \sub|cout[5]~10_combout\);

\sub|cout[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|cout[5]~10_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|cout\(5));

\sub|cout[4]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[4]~11_combout\ = ( \add|Decoder0~3_combout\ & ( (!\RST_N~input_o\ & (\add|bit_counter\(0) & (\add|state~q\ & !\add|LessThan0~5_combout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000100000000000000000000000000000001000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \add|ALT_INV_bit_counter\(0),
	datac => \add|ALT_INV_state~q\,
	datad => \add|ALT_INV_LessThan0~5_combout\,
	datae => \add|ALT_INV_Decoder0~3_combout\,
	combout => \sub|cout[4]~11_combout\);

\sub|cout[4]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout[4]~12_combout\ = ( \sub|cout[4]~11_combout\ & ( (!\sub|Mux1~0_combout\ & ((\sub|Mux2~1_combout\) # (\sub|Mux0~0_combout\))) # (\sub|Mux1~0_combout\ & (\sub|Mux0~0_combout\ & \sub|Mux2~1_combout\)) ) ) # ( !\sub|cout[4]~11_combout\ & ( 
-- \sub|cout\(4) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111100001111001000101011101100001111000011110010001010111011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_Mux1~0_combout\,
	datab => \sub|ALT_INV_Mux0~0_combout\,
	datac => \sub|ALT_INV_cout\(4),
	datad => \sub|ALT_INV_Mux2~1_combout\,
	datae => \sub|ALT_INV_cout[4]~11_combout\,
	combout => \sub|cout[4]~12_combout\);

\sub|cout[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|cout[4]~12_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|cout\(4));

\sub|Mux2~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|Mux2~1_combout\ = ( \sub|cout\(4) & ( (!\add|bit_counter\(2) & (((\sub|Mux2~0_combout\)))) # (\add|bit_counter\(2) & ((!\add|bit_counter\(0)) # ((\sub|cout\(5))))) ) ) # ( !\sub|cout\(4) & ( (!\add|bit_counter\(2) & (((\sub|Mux2~0_combout\)))) # 
-- (\add|bit_counter\(2) & (\add|bit_counter\(0) & ((\sub|cout\(5))))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000101000011011010011100101111100001010000110110100111001011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(2),
	datab => \add|ALT_INV_bit_counter\(0),
	datac => \sub|ALT_INV_Mux2~0_combout\,
	datad => \sub|ALT_INV_cout\(5),
	datae => \sub|ALT_INV_cout\(4),
	combout => \sub|Mux2~1_combout\);

\sub|sum~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|sum~0_combout\ = ( \add|Mux0~0_combout\ & ( \sub|Mux2~1_combout\ & ( (!\add|bit_counter\(2) & (((!\add|Mux1~0_combout\)))) # (\add|bit_counter\(2) & (!\B[4]~input_o\ $ (((!\A[4]~input_o\))))) ) ) ) # ( !\add|Mux0~0_combout\ & ( \sub|Mux2~1_combout\ & 
-- ( (!\add|bit_counter\(2) & (((\add|Mux1~0_combout\)))) # (\add|bit_counter\(2) & (!\B[4]~input_o\ $ (((!\A[4]~input_o\))))) ) ) ) # ( \add|Mux0~0_combout\ & ( !\sub|Mux2~1_combout\ & ( (!\add|bit_counter\(2) & (((\add|Mux1~0_combout\)))) # 
-- (\add|bit_counter\(2) & (!\B[4]~input_o\ $ (((\A[4]~input_o\))))) ) ) ) # ( !\add|Mux0~0_combout\ & ( !\sub|Mux2~1_combout\ & ( (!\add|bit_counter\(2) & (((!\add|Mux1~0_combout\)))) # (\add|bit_counter\(2) & (!\B[4]~input_o\ $ (((\A[4]~input_o\))))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1110001011010001001011100001110100011101001011101101000111100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_B[4]~input_o\,
	datab => \add|ALT_INV_bit_counter\(2),
	datac => \add|ALT_INV_Mux1~0_combout\,
	datad => \ALT_INV_A[4]~input_o\,
	datae => \add|ALT_INV_Mux0~0_combout\,
	dataf => \sub|ALT_INV_Mux2~1_combout\,
	combout => \sub|sum~0_combout\);

\add|Decoder0~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~1_combout\ = ( !\add|LessThan0~5_combout\ & ( (!\add|bit_counter\(0) & (\add|Decoder0~0_combout\ & (!\add|bit_counter\(3) & \add|state~q\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000100000000000000000000000000000001000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(0),
	datab => \add|ALT_INV_Decoder0~0_combout\,
	datac => \add|ALT_INV_bit_counter\(3),
	datad => \add|ALT_INV_state~q\,
	datae => \add|ALT_INV_LessThan0~5_combout\,
	combout => \add|Decoder0~1_combout\);

\sub|sum[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|sum\(0));

\add|cout~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|cout~0_combout\ = ( \add|Mux0~0_combout\ & ( \add|Mux2~1_combout\ & ( ((!\add|bit_counter\(2)) # (\A[4]~input_o\)) # (\B[4]~input_o\) ) ) ) # ( !\add|Mux0~0_combout\ & ( \add|Mux2~1_combout\ & ( (!\add|bit_counter\(2) & (((\add|Mux1~0_combout\)))) # 
-- (\add|bit_counter\(2) & (((\A[4]~input_o\)) # (\B[4]~input_o\))) ) ) ) # ( \add|Mux0~0_combout\ & ( !\add|Mux2~1_combout\ & ( (!\add|bit_counter\(2) & (((\add|Mux1~0_combout\)))) # (\add|bit_counter\(2) & (\B[4]~input_o\ & ((\A[4]~input_o\)))) ) ) ) # ( 
-- !\add|Mux0~0_combout\ & ( !\add|Mux2~1_combout\ & ( (\B[4]~input_o\ & (\add|bit_counter\(2) & \A[4]~input_o\)) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000010001000011000001110100011101001111111101110111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_B[4]~input_o\,
	datab => \add|ALT_INV_bit_counter\(2),
	datac => \add|ALT_INV_Mux1~0_combout\,
	datad => \ALT_INV_A[4]~input_o\,
	datae => \add|ALT_INV_Mux0~0_combout\,
	dataf => \add|ALT_INV_Mux2~1_combout\,
	combout => \add|cout~0_combout\);

\add|cout[0]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|cout[0]~1_combout\ = ( !\add|Add0~9_sumout\ & ( (\add|state~q\ & (!\add|LessThan0~5_combout\ & (!\add|Add0~1_sumout\ & !\add|Add0~5_sumout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100000000000000000000000000000001000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_state~q\,
	datab => \add|ALT_INV_LessThan0~5_combout\,
	datac => \add|ALT_INV_Add0~1_sumout\,
	datad => \add|ALT_INV_Add0~5_sumout\,
	datae => \add|ALT_INV_Add0~9_sumout\,
	combout => \add|cout[0]~1_combout\);

\add|cout[0]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|cout[0]~2_combout\ = ( \add|cout~0_combout\ & ( \add|cout[0]~1_combout\ & ( (!\RST_N~input_o\ & (\add|state~q\)) # (\RST_N~input_o\ & ((\add|cout\(0)))) ) ) ) # ( !\add|cout~0_combout\ & ( \add|cout[0]~1_combout\ & ( (\RST_N~input_o\ & \add|cout\(0)) 
-- ) ) ) # ( \add|cout~0_combout\ & ( !\add|cout[0]~1_combout\ & ( (\add|cout\(0) & (((\Start~input_o\) # (\add|state~q\)) # (\RST_N~input_o\))) ) ) ) # ( !\add|cout~0_combout\ & ( !\add|cout[0]~1_combout\ & ( (\add|cout\(0) & (((\Start~input_o\) # 
-- (\add|state~q\)) # (\RST_N~input_o\))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011100001111000001110000111100000101000001010010011100100111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \add|ALT_INV_state~q\,
	datac => \add|ALT_INV_cout\(0),
	datad => \ALT_INV_Start~input_o\,
	datae => \add|ALT_INV_cout~0_combout\,
	dataf => \add|ALT_INV_cout[0]~1_combout\,
	combout => \add|cout[0]~2_combout\);

\add|cout[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|cout[0]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|cout\(0));

\add|cout[5]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|cout[5]~3_combout\ = ( !\add|Add0~9_sumout\ & ( (!\RST_N~input_o\ & (\add|state~q\ & (!\add|LessThan0~5_combout\ & \add|Add0~5_sumout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000100000000000000000000000000000001000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \add|ALT_INV_state~q\,
	datac => \add|ALT_INV_LessThan0~5_combout\,
	datad => \add|ALT_INV_Add0~5_sumout\,
	datae => \add|ALT_INV_Add0~9_sumout\,
	combout => \add|cout[5]~3_combout\);

\add|cout[1]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|cout[1]~4_combout\ = ( \add|Add0~1_sumout\ & ( \add|cout[5]~3_combout\ & ( \add|cout\(1) ) ) ) # ( !\add|Add0~1_sumout\ & ( \add|cout[5]~3_combout\ & ( (!\sub|Mux1~0_combout\ & (\sub|Mux0~0_combout\ & \add|Mux2~1_combout\)) # (\sub|Mux1~0_combout\ & 
-- ((\add|Mux2~1_combout\) # (\sub|Mux0~0_combout\))) ) ) ) # ( \add|Add0~1_sumout\ & ( !\add|cout[5]~3_combout\ & ( \add|cout\(1) ) ) ) # ( !\add|Add0~1_sumout\ & ( !\add|cout[5]~3_combout\ & ( \add|cout\(1) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111100001111000011110000111100010001011101110000111100001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_Mux1~0_combout\,
	datab => \sub|ALT_INV_Mux0~0_combout\,
	datac => \add|ALT_INV_cout\(1),
	datad => \add|ALT_INV_Mux2~1_combout\,
	datae => \add|ALT_INV_Add0~1_sumout\,
	dataf => \add|ALT_INV_cout[5]~3_combout\,
	combout => \add|cout[1]~4_combout\);

\add|cout[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|cout[1]~4_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|cout\(1));

\add|cout[3]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|cout[3]~5_combout\ = ( \add|Add0~9_sumout\ & ( (!\RST_N~input_o\ & (\add|state~q\ & (!\add|LessThan0~5_combout\ & !\add|Add0~1_sumout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000001000000000000000000000000000000010000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \add|ALT_INV_state~q\,
	datac => \add|ALT_INV_LessThan0~5_combout\,
	datad => \add|ALT_INV_Add0~1_sumout\,
	datae => \add|ALT_INV_Add0~9_sumout\,
	combout => \add|cout[3]~5_combout\);

\add|cout[2]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|cout[2]~6_combout\ = ( \add|Add0~5_sumout\ & ( \add|cout[3]~5_combout\ & ( \add|cout\(2) ) ) ) # ( !\add|Add0~5_sumout\ & ( \add|cout[3]~5_combout\ & ( (!\sub|Mux1~0_combout\ & (\sub|Mux0~0_combout\ & \add|Mux2~1_combout\)) # (\sub|Mux1~0_combout\ & 
-- ((\add|Mux2~1_combout\) # (\sub|Mux0~0_combout\))) ) ) ) # ( \add|Add0~5_sumout\ & ( !\add|cout[3]~5_combout\ & ( \add|cout\(2) ) ) ) # ( !\add|Add0~5_sumout\ & ( !\add|cout[3]~5_combout\ & ( \add|cout\(2) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111100001111000011110000111100010001011101110000111100001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_Mux1~0_combout\,
	datab => \sub|ALT_INV_Mux0~0_combout\,
	datac => \add|ALT_INV_cout\(2),
	datad => \add|ALT_INV_Mux2~1_combout\,
	datae => \add|ALT_INV_Add0~5_sumout\,
	dataf => \add|ALT_INV_cout[3]~5_combout\,
	combout => \add|cout[2]~6_combout\);

\add|cout[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|cout[2]~6_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|cout\(2));

\add|cout[3]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|cout[3]~7_combout\ = ( \add|Add0~5_sumout\ & ( \add|cout[3]~5_combout\ & ( (!\sub|Mux1~0_combout\ & (\sub|Mux0~0_combout\ & \add|Mux2~1_combout\)) # (\sub|Mux1~0_combout\ & ((\add|Mux2~1_combout\) # (\sub|Mux0~0_combout\))) ) ) ) # ( 
-- !\add|Add0~5_sumout\ & ( \add|cout[3]~5_combout\ & ( \add|cout\(3) ) ) ) # ( \add|Add0~5_sumout\ & ( !\add|cout[3]~5_combout\ & ( \add|cout\(3) ) ) ) # ( !\add|Add0~5_sumout\ & ( !\add|cout[3]~5_combout\ & ( \add|cout\(3) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111100001111000011110000111100001111000011110001000101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_Mux1~0_combout\,
	datab => \sub|ALT_INV_Mux0~0_combout\,
	datac => \add|ALT_INV_cout\(3),
	datad => \add|ALT_INV_Mux2~1_combout\,
	datae => \add|ALT_INV_Add0~5_sumout\,
	dataf => \add|ALT_INV_cout[3]~5_combout\,
	combout => \add|cout[3]~7_combout\);

\add|cout[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|cout[3]~7_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|cout\(3));

\add|Mux2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Mux2~0_combout\ = ( \add|bit_counter\(0) & ( \add|bit_counter\(1) & ( \add|cout\(3) ) ) ) # ( !\add|bit_counter\(0) & ( \add|bit_counter\(1) & ( \add|cout\(2) ) ) ) # ( \add|bit_counter\(0) & ( !\add|bit_counter\(1) & ( \add|cout\(1) ) ) ) # ( 
-- !\add|bit_counter\(0) & ( !\add|bit_counter\(1) & ( \add|cout\(0) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_cout\(0),
	datab => \add|ALT_INV_cout\(1),
	datac => \add|ALT_INV_cout\(2),
	datad => \add|ALT_INV_cout\(3),
	datae => \add|ALT_INV_bit_counter\(0),
	dataf => \add|ALT_INV_bit_counter\(1),
	combout => \add|Mux2~0_combout\);

\add|cout[5]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|cout[5]~8_combout\ = ( \add|Add0~1_sumout\ & ( \add|cout[5]~3_combout\ & ( (!\sub|Mux1~0_combout\ & (\sub|Mux0~0_combout\ & \add|Mux2~1_combout\)) # (\sub|Mux1~0_combout\ & ((\add|Mux2~1_combout\) # (\sub|Mux0~0_combout\))) ) ) ) # ( 
-- !\add|Add0~1_sumout\ & ( \add|cout[5]~3_combout\ & ( \add|cout\(5) ) ) ) # ( \add|Add0~1_sumout\ & ( !\add|cout[5]~3_combout\ & ( \add|cout\(5) ) ) ) # ( !\add|Add0~1_sumout\ & ( !\add|cout[5]~3_combout\ & ( \add|cout\(5) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111100001111000011110000111100001111000011110001000101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_Mux1~0_combout\,
	datab => \sub|ALT_INV_Mux0~0_combout\,
	datac => \add|ALT_INV_cout\(5),
	datad => \add|ALT_INV_Mux2~1_combout\,
	datae => \add|ALT_INV_Add0~1_sumout\,
	dataf => \add|ALT_INV_cout[5]~3_combout\,
	combout => \add|cout[5]~8_combout\);

\add|cout[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|cout[5]~8_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|cout\(5));

\add|cout[4]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|cout[4]~9_combout\ = ( !\add|Add0~5_sumout\ & ( !\add|Add0~9_sumout\ & ( (!\RST_N~input_o\ & (\add|state~q\ & (!\add|LessThan0~5_combout\ & \add|Add0~1_sumout\))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000100000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \add|ALT_INV_state~q\,
	datac => \add|ALT_INV_LessThan0~5_combout\,
	datad => \add|ALT_INV_Add0~1_sumout\,
	datae => \add|ALT_INV_Add0~5_sumout\,
	dataf => \add|ALT_INV_Add0~9_sumout\,
	combout => \add|cout[4]~9_combout\);

\add|cout[4]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|cout[4]~10_combout\ = ( \add|cout[4]~9_combout\ & ( (!\sub|Mux1~0_combout\ & (\sub|Mux0~0_combout\ & \add|Mux2~1_combout\)) # (\sub|Mux1~0_combout\ & ((\add|Mux2~1_combout\) # (\sub|Mux0~0_combout\))) ) ) # ( !\add|cout[4]~9_combout\ & ( 
-- \add|cout\(4) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111100001111000100010111011100001111000011110001000101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_Mux1~0_combout\,
	datab => \sub|ALT_INV_Mux0~0_combout\,
	datac => \add|ALT_INV_cout\(4),
	datad => \add|ALT_INV_Mux2~1_combout\,
	datae => \add|ALT_INV_cout[4]~9_combout\,
	combout => \add|cout[4]~10_combout\);

\add|cout[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|cout[4]~10_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|cout\(4));

\add|Mux2~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Mux2~1_combout\ = ( \add|cout\(4) & ( (!\add|bit_counter\(2) & (((\add|Mux2~0_combout\)))) # (\add|bit_counter\(2) & ((!\add|bit_counter\(0)) # ((\add|cout\(5))))) ) ) # ( !\add|cout\(4) & ( (!\add|bit_counter\(2) & (((\add|Mux2~0_combout\)))) # 
-- (\add|bit_counter\(2) & (\add|bit_counter\(0) & ((\add|cout\(5))))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000101000011011010011100101111100001010000110110100111001011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(2),
	datab => \add|ALT_INV_bit_counter\(0),
	datac => \add|ALT_INV_Mux2~0_combout\,
	datad => \add|ALT_INV_cout\(5),
	datae => \add|ALT_INV_cout\(4),
	combout => \add|Mux2~1_combout\);

\add|sum~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|sum~0_combout\ = ( \add|Mux0~0_combout\ & ( \add|Mux2~1_combout\ & ( (!\add|bit_counter\(2) & (((\add|Mux1~0_combout\)))) # (\add|bit_counter\(2) & (!\B[4]~input_o\ $ (((\A[4]~input_o\))))) ) ) ) # ( !\add|Mux0~0_combout\ & ( \add|Mux2~1_combout\ & ( 
-- (!\add|bit_counter\(2) & (((!\add|Mux1~0_combout\)))) # (\add|bit_counter\(2) & (!\B[4]~input_o\ $ (((\A[4]~input_o\))))) ) ) ) # ( \add|Mux0~0_combout\ & ( !\add|Mux2~1_combout\ & ( (!\add|bit_counter\(2) & (((!\add|Mux1~0_combout\)))) # 
-- (\add|bit_counter\(2) & (!\B[4]~input_o\ $ (((!\A[4]~input_o\))))) ) ) ) # ( !\add|Mux0~0_combout\ & ( !\add|Mux2~1_combout\ & ( (!\add|bit_counter\(2) & (((\add|Mux1~0_combout\)))) # (\add|bit_counter\(2) & (!\B[4]~input_o\ $ (((!\A[4]~input_o\))))) ) ) 
-- )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100101110110100011110001011100010110100010010111000011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_B[4]~input_o\,
	datab => \add|ALT_INV_bit_counter\(2),
	datac => \add|ALT_INV_Mux1~0_combout\,
	datad => \ALT_INV_A[4]~input_o\,
	datae => \add|ALT_INV_Mux0~0_combout\,
	dataf => \add|ALT_INV_Mux2~1_combout\,
	combout => \add|sum~0_combout\);

\add|sum[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|sum\(0));

\Operation[0]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_Operation(0),
	o => \Operation[0]~input_o\);

\Operation[1]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_Operation(1),
	o => \Operation[1]~input_o\);

\convert_binary|Mux9~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux9~0_combout\ = ( \Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \add|sum\(0) ) ) ) # ( !\Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \sub|sum\(0) ) ) ) # ( \Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( 
-- \multiplication|R\(0) ) ) ) # ( !\Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( \division|Q\(0) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Q\(0),
	datab => \multiplication|ALT_INV_R\(0),
	datac => \sub|ALT_INV_sum\(0),
	datad => \add|ALT_INV_sum\(0),
	datae => \ALT_INV_Operation[0]~input_o\,
	dataf => \ALT_INV_Operation[1]~input_o\,
	combout => \convert_binary|Mux9~0_combout\);

\convert_binary|Result[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux9~0_combout\,
	ena => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Result\(0));

\division|Data_Quotient[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(0),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_Quotient\(1));

\division|Q[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(1),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Q\(1));

\multiplication|Data_A~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_A~1_combout\ = (!\multiplication|state~q\ & (((\A[1]~input_o\)))) # (\multiplication|state~q\ & (!\multiplication|LessThan0~5_combout\ & ((\multiplication|Data_A\(0)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000101001001110000010100100111000001010010011100000101001001110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \multiplication|ALT_INV_LessThan0~5_combout\,
	datac => \ALT_INV_A[1]~input_o\,
	datad => \multiplication|ALT_INV_Data_A\(0),
	combout => \multiplication|Data_A~1_combout\);

\multiplication|Data_A[3]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_A[3]~2_combout\ = (!\Start~input_o\) # (\multiplication|state~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1101110111011101110111011101110111011101110111011101110111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \ALT_INV_Start~input_o\,
	combout => \multiplication|Data_A[3]~2_combout\);

\multiplication|Data_A[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_A~1_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|Data_A[3]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_A\(1));

\multiplication|Add0~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add0~5_sumout\ = SUM(( \multiplication|Data_Product\(1) ) + ( \multiplication|Data_A\(1) ) + ( \multiplication|Add0~2\ ))
-- \multiplication|Add0~6\ = CARRY(( \multiplication|Data_Product\(1) ) + ( \multiplication|Data_A\(1) ) + ( \multiplication|Add0~2\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_Data_Product\(1),
	dataf => \multiplication|ALT_INV_Data_A\(1),
	cin => \multiplication|Add0~2\,
	sumout => \multiplication|Add0~5_sumout\,
	cout => \multiplication|Add0~6\);

\multiplication|Data_Product[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add0~5_sumout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_Product\(1));

\multiplication|R[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_Product\(1),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|R[3]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|R\(1));

\add|Decoder0~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~2_combout\ = ( !\add|LessThan0~5_combout\ & ( (\add|bit_counter\(0) & (\add|Decoder0~0_combout\ & (!\add|bit_counter\(3) & \add|state~q\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000010000000000000000000000000000000100000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(0),
	datab => \add|ALT_INV_Decoder0~0_combout\,
	datac => \add|ALT_INV_bit_counter\(3),
	datad => \add|ALT_INV_state~q\,
	datae => \add|ALT_INV_LessThan0~5_combout\,
	combout => \add|Decoder0~2_combout\);

\sub|sum[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|sum\(1));

\add|sum[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|sum\(1));

\convert_binary|Mux8~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux8~0_combout\ = ( \Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \add|sum\(1) ) ) ) # ( !\Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \sub|sum\(1) ) ) ) # ( \Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( 
-- \multiplication|R\(1) ) ) ) # ( !\Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( \division|Q\(1) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Q\(1),
	datab => \multiplication|ALT_INV_R\(1),
	datac => \sub|ALT_INV_sum\(1),
	datad => \add|ALT_INV_sum\(1),
	datae => \ALT_INV_Operation[0]~input_o\,
	dataf => \ALT_INV_Operation[1]~input_o\,
	combout => \convert_binary|Mux8~0_combout\);

\convert_binary|Result[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux8~0_combout\,
	ena => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Result\(1));

\division|Data_Quotient[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(1),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_Quotient\(2));

\division|Q[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(2),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Q\(2));

\multiplication|Data_A~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_A~3_combout\ = (!\multiplication|state~q\ & (((\A[2]~input_o\)))) # (\multiplication|state~q\ & (!\multiplication|LessThan0~5_combout\ & ((\multiplication|Data_A\(1)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000101001001110000010100100111000001010010011100000101001001110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \multiplication|ALT_INV_LessThan0~5_combout\,
	datac => \ALT_INV_A[2]~input_o\,
	datad => \multiplication|ALT_INV_Data_A\(1),
	combout => \multiplication|Data_A~3_combout\);

\multiplication|Data_A[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_A~3_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|Data_A[3]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_A\(2));

\multiplication|Add0~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add0~9_sumout\ = SUM(( \multiplication|Data_Product\(2) ) + ( \multiplication|Data_A\(2) ) + ( \multiplication|Add0~6\ ))
-- \multiplication|Add0~10\ = CARRY(( \multiplication|Data_Product\(2) ) + ( \multiplication|Data_A\(2) ) + ( \multiplication|Add0~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_Data_Product\(2),
	dataf => \multiplication|ALT_INV_Data_A\(2),
	cin => \multiplication|Add0~6\,
	sumout => \multiplication|Add0~9_sumout\,
	cout => \multiplication|Add0~10\);

\multiplication|Data_Product[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add0~9_sumout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_Product\(2));

\multiplication|R[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_Product\(2),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|R[3]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|R\(2));

\add|Decoder0~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~4_combout\ = ( \add|Decoder0~3_combout\ & ( (!\add|bit_counter\(0) & (!\add|bit_counter\(3) & (\add|state~q\ & !\add|LessThan0~5_combout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000010000000000000000000000000000000100000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(0),
	datab => \add|ALT_INV_bit_counter\(3),
	datac => \add|ALT_INV_state~q\,
	datad => \add|ALT_INV_LessThan0~5_combout\,
	datae => \add|ALT_INV_Decoder0~3_combout\,
	combout => \add|Decoder0~4_combout\);

\sub|sum[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~4_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|sum\(2));

\add|sum[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~4_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|sum\(2));

\convert_binary|Mux7~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux7~0_combout\ = ( \Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \add|sum\(2) ) ) ) # ( !\Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \sub|sum\(2) ) ) ) # ( \Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( 
-- \multiplication|R\(2) ) ) ) # ( !\Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( \division|Q\(2) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Q\(2),
	datab => \multiplication|ALT_INV_R\(2),
	datac => \sub|ALT_INV_sum\(2),
	datad => \add|ALT_INV_sum\(2),
	datae => \ALT_INV_Operation[0]~input_o\,
	dataf => \ALT_INV_Operation[1]~input_o\,
	combout => \convert_binary|Mux7~0_combout\);

\convert_binary|Result[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux7~0_combout\,
	ena => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Result\(2));

\division|Data_Quotient[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(2),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_Quotient\(3));

\division|Q[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(3),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Q\(3));

\multiplication|Data_A~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_A~4_combout\ = (!\multiplication|state~q\ & (((\A[3]~input_o\)))) # (\multiplication|state~q\ & (!\multiplication|LessThan0~5_combout\ & ((\multiplication|Data_A\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000101001001110000010100100111000001010010011100000101001001110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \multiplication|ALT_INV_LessThan0~5_combout\,
	datac => \ALT_INV_A[3]~input_o\,
	datad => \multiplication|ALT_INV_Data_A\(2),
	combout => \multiplication|Data_A~4_combout\);

\multiplication|Data_A[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_A~4_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|Data_A[3]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_A\(3));

\multiplication|Add0~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add0~13_sumout\ = SUM(( \multiplication|Data_Product\(3) ) + ( \multiplication|Data_A\(3) ) + ( \multiplication|Add0~10\ ))
-- \multiplication|Add0~14\ = CARRY(( \multiplication|Data_Product\(3) ) + ( \multiplication|Data_A\(3) ) + ( \multiplication|Add0~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_Data_Product\(3),
	dataf => \multiplication|ALT_INV_Data_A\(3),
	cin => \multiplication|Add0~10\,
	sumout => \multiplication|Add0~13_sumout\,
	cout => \multiplication|Add0~14\);

\multiplication|Data_Product[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add0~13_sumout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_Product\(3));

\multiplication|R[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_Product\(3),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|R[3]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|R\(3));

\add|Decoder0~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~5_combout\ = ( \add|Decoder0~3_combout\ & ( (\add|bit_counter\(0) & (!\add|bit_counter\(3) & (\add|state~q\ & !\add|LessThan0~5_combout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000001000000000000000000000000000000010000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(0),
	datab => \add|ALT_INV_bit_counter\(3),
	datac => \add|ALT_INV_state~q\,
	datad => \add|ALT_INV_LessThan0~5_combout\,
	datae => \add|ALT_INV_Decoder0~3_combout\,
	combout => \add|Decoder0~5_combout\);

\sub|sum[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~5_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|sum\(3));

\add|sum[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~5_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|sum\(3));

\convert_binary|Mux6~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux6~0_combout\ = ( \Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \add|sum\(3) ) ) ) # ( !\Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \sub|sum\(3) ) ) ) # ( \Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( 
-- \multiplication|R\(3) ) ) ) # ( !\Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( \division|Q\(3) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Q\(3),
	datab => \multiplication|ALT_INV_R\(3),
	datac => \sub|ALT_INV_sum\(3),
	datad => \add|ALT_INV_sum\(3),
	datae => \ALT_INV_Operation[0]~input_o\,
	dataf => \ALT_INV_Operation[1]~input_o\,
	combout => \convert_binary|Mux6~0_combout\);

\convert_binary|Result[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux6~0_combout\,
	ena => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Result\(3));

\division|Data_Quotient[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(3),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_Quotient\(4));

\division|Q[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(4),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Q\(4));

\multiplication|Data_A~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Data_A~5_combout\ = (!\multiplication|state~q\ & (((\A[4]~input_o\)))) # (\multiplication|state~q\ & (!\multiplication|LessThan0~5_combout\ & ((\multiplication|Data_A\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000101001001110000010100100111000001010010011100000101001001110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_state~q\,
	datab => \multiplication|ALT_INV_LessThan0~5_combout\,
	datac => \ALT_INV_A[4]~input_o\,
	datad => \multiplication|ALT_INV_Data_A\(3),
	combout => \multiplication|Data_A~5_combout\);

\multiplication|Data_A[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_A~5_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|Data_A[3]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_A\(4));

\multiplication|Add0~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add0~17_sumout\ = SUM(( \multiplication|Data_Product\(4) ) + ( \multiplication|Data_A\(4) ) + ( \multiplication|Add0~14\ ))
-- \multiplication|Add0~18\ = CARRY(( \multiplication|Data_Product\(4) ) + ( \multiplication|Data_A\(4) ) + ( \multiplication|Add0~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_Data_Product\(4),
	dataf => \multiplication|ALT_INV_Data_A\(4),
	cin => \multiplication|Add0~14\,
	sumout => \multiplication|Add0~17_sumout\,
	cout => \multiplication|Add0~18\);

\multiplication|Data_Product[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add0~17_sumout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_Product\(4));

\multiplication|R[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_Product\(4),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|R[3]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|R\(4));

\add|Decoder0~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~7_combout\ = ( \add|Decoder0~6_combout\ & ( (!\add|bit_counter\(0) & (!\add|bit_counter\(3) & (\add|state~q\ & !\add|LessThan0~5_combout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000010000000000000000000000000000000100000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(0),
	datab => \add|ALT_INV_bit_counter\(3),
	datac => \add|ALT_INV_state~q\,
	datad => \add|ALT_INV_LessThan0~5_combout\,
	datae => \add|ALT_INV_Decoder0~6_combout\,
	combout => \add|Decoder0~7_combout\);

\sub|sum[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~7_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|sum\(4));

\add|sum[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~7_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|sum\(4));

\convert_binary|Mux5~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux5~0_combout\ = ( \Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \add|sum\(4) ) ) ) # ( !\Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \sub|sum\(4) ) ) ) # ( \Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( 
-- \multiplication|R\(4) ) ) ) # ( !\Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( \division|Q\(4) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Q\(4),
	datab => \multiplication|ALT_INV_R\(4),
	datac => \sub|ALT_INV_sum\(4),
	datad => \add|ALT_INV_sum\(4),
	datae => \ALT_INV_Operation[0]~input_o\,
	dataf => \ALT_INV_Operation[1]~input_o\,
	combout => \convert_binary|Mux5~0_combout\);

\convert_binary|Result[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux5~0_combout\,
	ena => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Result\(4));

\division|Data_Quotient[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(4),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_Quotient\(5));

\division|Q[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(5),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Q\(5));

\multiplication|Data_A[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_A\(4),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_A\(5));

\multiplication|Add0~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add0~21_sumout\ = SUM(( \multiplication|Data_Product\(5) ) + ( \multiplication|Data_A\(5) ) + ( \multiplication|Add0~18\ ))
-- \multiplication|Add0~22\ = CARRY(( \multiplication|Data_Product\(5) ) + ( \multiplication|Data_A\(5) ) + ( \multiplication|Add0~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_Data_Product\(5),
	dataf => \multiplication|ALT_INV_Data_A\(5),
	cin => \multiplication|Add0~18\,
	sumout => \multiplication|Add0~21_sumout\,
	cout => \multiplication|Add0~22\);

\multiplication|Data_Product[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add0~21_sumout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_Product\(5));

\multiplication|R[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_Product\(5),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|R[3]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|R\(5));

\add|Decoder0~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~8_combout\ = ( \add|Decoder0~6_combout\ & ( (\add|bit_counter\(0) & (!\add|bit_counter\(3) & (\add|state~q\ & !\add|LessThan0~5_combout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000001000000000000000000000000000000010000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(0),
	datab => \add|ALT_INV_bit_counter\(3),
	datac => \add|ALT_INV_state~q\,
	datad => \add|ALT_INV_LessThan0~5_combout\,
	datae => \add|ALT_INV_Decoder0~6_combout\,
	combout => \add|Decoder0~8_combout\);

\sub|sum[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~8_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|sum\(5));

\add|sum[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~8_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|sum\(5));

\convert_binary|Mux4~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux4~0_combout\ = ( \Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \add|sum\(5) ) ) ) # ( !\Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \sub|sum\(5) ) ) ) # ( \Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( 
-- \multiplication|R\(5) ) ) ) # ( !\Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( \division|Q\(5) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Q\(5),
	datab => \multiplication|ALT_INV_R\(5),
	datac => \sub|ALT_INV_sum\(5),
	datad => \add|ALT_INV_sum\(5),
	datae => \ALT_INV_Operation[0]~input_o\,
	dataf => \ALT_INV_Operation[1]~input_o\,
	combout => \convert_binary|Mux4~0_combout\);

\convert_binary|Result[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux4~0_combout\,
	ena => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Result\(5));

\division|Data_Quotient[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(5),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_Quotient\(6));

\division|Q[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(6),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Q\(6));

\multiplication|Data_A[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_A\(5),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_A\(6));

\multiplication|Add0~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add0~25_sumout\ = SUM(( \multiplication|Data_Product\(6) ) + ( \multiplication|Data_A\(6) ) + ( \multiplication|Add0~22\ ))
-- \multiplication|Add0~26\ = CARRY(( \multiplication|Data_Product\(6) ) + ( \multiplication|Data_A\(6) ) + ( \multiplication|Add0~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_Data_Product\(6),
	dataf => \multiplication|ALT_INV_Data_A\(6),
	cin => \multiplication|Add0~22\,
	sumout => \multiplication|Add0~25_sumout\,
	cout => \multiplication|Add0~26\);

\multiplication|Data_Product[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add0~25_sumout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_Product\(6));

\multiplication|R[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_Product\(6),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|R[3]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|R\(6));

\add|Decoder0~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~10_combout\ = ( !\add|LessThan0~5_combout\ & ( (!\add|bit_counter\(0) & (!\add|bit_counter\(3) & (\add|state~q\ & \add|Decoder0~9_combout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000001000000000000000000000000000000010000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(0),
	datab => \add|ALT_INV_bit_counter\(3),
	datac => \add|ALT_INV_state~q\,
	datad => \add|ALT_INV_Decoder0~9_combout\,
	datae => \add|ALT_INV_LessThan0~5_combout\,
	combout => \add|Decoder0~10_combout\);

\sub|sum[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~10_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|sum\(6));

\add|sum[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~10_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|sum\(6));

\convert_binary|Mux3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux3~0_combout\ = ( \Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \add|sum\(6) ) ) ) # ( !\Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \sub|sum\(6) ) ) ) # ( \Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( 
-- \multiplication|R\(6) ) ) ) # ( !\Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( \division|Q\(6) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Q\(6),
	datab => \multiplication|ALT_INV_R\(6),
	datac => \sub|ALT_INV_sum\(6),
	datad => \add|ALT_INV_sum\(6),
	datae => \ALT_INV_Operation[0]~input_o\,
	dataf => \ALT_INV_Operation[1]~input_o\,
	combout => \convert_binary|Mux3~0_combout\);

\convert_binary|Result[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux3~0_combout\,
	ena => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Result\(6));

\division|Data_Quotient[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(6),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_Quotient\(7));

\division|Q[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(7),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Q\(7));

\multiplication|Data_A[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_A\(6),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_A\(7));

\multiplication|Add0~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add0~29_sumout\ = SUM(( \multiplication|Data_Product\(7) ) + ( \multiplication|Data_A\(7) ) + ( \multiplication|Add0~26\ ))
-- \multiplication|Add0~30\ = CARRY(( \multiplication|Data_Product\(7) ) + ( \multiplication|Data_A\(7) ) + ( \multiplication|Add0~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_Data_Product\(7),
	dataf => \multiplication|ALT_INV_Data_A\(7),
	cin => \multiplication|Add0~26\,
	sumout => \multiplication|Add0~29_sumout\,
	cout => \multiplication|Add0~30\);

\multiplication|Data_Product[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add0~29_sumout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_Product\(7));

\multiplication|R[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_Product\(7),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|R[3]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|R\(7));

\add|Decoder0~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~11_combout\ = ( !\add|LessThan0~5_combout\ & ( (\add|bit_counter\(0) & (!\add|bit_counter\(3) & (\add|state~q\ & \add|Decoder0~9_combout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000100000000000000000000000000000001000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(0),
	datab => \add|ALT_INV_bit_counter\(3),
	datac => \add|ALT_INV_state~q\,
	datad => \add|ALT_INV_Decoder0~9_combout\,
	datae => \add|ALT_INV_LessThan0~5_combout\,
	combout => \add|Decoder0~11_combout\);

\sub|sum[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~11_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|sum\(7));

\add|sum[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~11_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|sum\(7));

\convert_binary|Mux2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux2~0_combout\ = ( \Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \add|sum\(7) ) ) ) # ( !\Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \sub|sum\(7) ) ) ) # ( \Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( 
-- \multiplication|R\(7) ) ) ) # ( !\Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( \division|Q\(7) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Q\(7),
	datab => \multiplication|ALT_INV_R\(7),
	datac => \sub|ALT_INV_sum\(7),
	datad => \add|ALT_INV_sum\(7),
	datae => \ALT_INV_Operation[0]~input_o\,
	dataf => \ALT_INV_Operation[1]~input_o\,
	combout => \convert_binary|Mux2~0_combout\);

\convert_binary|Result[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux2~0_combout\,
	ena => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Result\(7));

\division|Data_Quotient[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(7),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_Quotient\(8));

\division|Q[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(8),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Q\(8));

\multiplication|Data_A[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_A\(7),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_A\(8));

\multiplication|Add0~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add0~33_sumout\ = SUM(( \multiplication|Data_Product\(8) ) + ( \multiplication|Data_A\(8) ) + ( \multiplication|Add0~30\ ))
-- \multiplication|Add0~34\ = CARRY(( \multiplication|Data_Product\(8) ) + ( \multiplication|Data_A\(8) ) + ( \multiplication|Add0~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_Data_Product\(8),
	dataf => \multiplication|ALT_INV_Data_A\(8),
	cin => \multiplication|Add0~30\,
	sumout => \multiplication|Add0~33_sumout\,
	cout => \multiplication|Add0~34\);

\multiplication|Data_Product[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add0~33_sumout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_Product\(8));

\multiplication|R[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_Product\(8),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|R[3]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|R\(8));

\add|Decoder0~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~12_combout\ = ( !\add|LessThan0~5_combout\ & ( (!\add|bit_counter\(0) & (\add|Decoder0~0_combout\ & (\add|bit_counter\(3) & \add|state~q\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000010000000000000000000000000000000100000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(0),
	datab => \add|ALT_INV_Decoder0~0_combout\,
	datac => \add|ALT_INV_bit_counter\(3),
	datad => \add|ALT_INV_state~q\,
	datae => \add|ALT_INV_LessThan0~5_combout\,
	combout => \add|Decoder0~12_combout\);

\sub|sum[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~12_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|sum\(8));

\add|sum[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~12_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|sum\(8));

\convert_binary|Mux1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux1~0_combout\ = ( \Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \add|sum\(8) ) ) ) # ( !\Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \sub|sum\(8) ) ) ) # ( \Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( 
-- \multiplication|R\(8) ) ) ) # ( !\Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( \division|Q\(8) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Q\(8),
	datab => \multiplication|ALT_INV_R\(8),
	datac => \sub|ALT_INV_sum\(8),
	datad => \add|ALT_INV_sum\(8),
	datae => \ALT_INV_Operation[0]~input_o\,
	dataf => \ALT_INV_Operation[1]~input_o\,
	combout => \convert_binary|Mux1~0_combout\);

\convert_binary|Result[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux1~0_combout\,
	ena => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Result\(8));

\division|Data_Quotient[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(8),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \division|ALT_INV_state.S2~q\,
	ena => \division|bit_counter[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Data_Quotient\(9));

\division|Q[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_Quotient\(9),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|Q\(9));

\multiplication|Data_A[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_A\(8),
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_A\(9));

\multiplication|Add0~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|Add0~37_sumout\ = SUM(( \multiplication|Data_Product\(9) ) + ( \multiplication|Data_A\(9) ) + ( \multiplication|Add0~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_Data_Product\(9),
	dataf => \multiplication|ALT_INV_Data_A\(9),
	cin => \multiplication|Add0~34\,
	sumout => \multiplication|Add0~37_sumout\);

\multiplication|Data_Product[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Add0~37_sumout\,
	clrn => \ALT_INV_RST_N~input_o\,
	sclr => \multiplication|LessThan0~5_combout\,
	ena => \multiplication|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|Data_Product\(9));

\multiplication|R[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|Data_Product\(9),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \multiplication|R[3]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|R\(9));

\add|Decoder0~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|Decoder0~13_combout\ = ( !\add|LessThan0~5_combout\ & ( (\add|bit_counter\(0) & (\add|Decoder0~0_combout\ & (\add|bit_counter\(3) & \add|state~q\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000001000000000000000000000000000000010000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_bit_counter\(0),
	datab => \add|ALT_INV_Decoder0~0_combout\,
	datac => \add|ALT_INV_bit_counter\(3),
	datad => \add|ALT_INV_state~q\,
	datae => \add|ALT_INV_LessThan0~5_combout\,
	combout => \add|Decoder0~13_combout\);

\sub|sum[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~13_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|sum\(9));

\add|sum[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|sum~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \add|Decoder0~13_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|sum\(9));

\convert_binary|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux0~0_combout\ = ( \Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \add|sum\(9) ) ) ) # ( !\Operation[0]~input_o\ & ( \Operation[1]~input_o\ & ( \sub|sum\(9) ) ) ) # ( \Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( 
-- \multiplication|R\(9) ) ) ) # ( !\Operation[0]~input_o\ & ( !\Operation[1]~input_o\ & ( \division|Q\(9) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101001100110011001100001111000011110000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division|ALT_INV_Q\(9),
	datab => \multiplication|ALT_INV_R\(9),
	datac => \sub|ALT_INV_sum\(9),
	datad => \add|ALT_INV_sum\(9),
	datae => \ALT_INV_Operation[0]~input_o\,
	dataf => \ALT_INV_Operation[1]~input_o\,
	combout => \convert_binary|Mux0~0_combout\);

\convert_binary|Result[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux0~0_combout\,
	ena => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Result\(9));

\division|R[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_A\(0),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|R\(0));

\convert_binary|Remainder[0]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Remainder[0]~0_combout\ = (!\Operation[0]~input_o\ & (!\Operation[1]~input_o\ & !\RST_N~input_o\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000010000000100000001000000010000000100000001000000010000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \ALT_INV_RST_N~input_o\,
	combout => \convert_binary|Remainder[0]~0_combout\);

\convert_binary|Remainder[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|R\(0),
	ena => \convert_binary|Remainder[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Remainder\(0));

\division|R[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_A\(1),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|R\(1));

\convert_binary|Remainder[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|R\(1),
	ena => \convert_binary|Remainder[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Remainder\(1));

\division|R[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_A\(2),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|R\(2));

\convert_binary|Remainder[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|R\(2),
	ena => \convert_binary|Remainder[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Remainder\(2));

\division|R[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_A\(3),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|R\(3));

\convert_binary|Remainder[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|R\(3),
	ena => \convert_binary|Remainder[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Remainder\(3));

\division|R[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_A\(4),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|R\(4));

\convert_binary|Remainder[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|R\(4),
	ena => \convert_binary|Remainder[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Remainder\(4));

\division|R[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_A\(5),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|R\(5));

\convert_binary|Remainder[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|R\(5),
	ena => \convert_binary|Remainder[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Remainder\(5));

\division|R[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_A\(6),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|R\(6));

\convert_binary|Remainder[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|R\(6),
	ena => \convert_binary|Remainder[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Remainder\(6));

\division|R[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_A\(7),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|R\(7));

\convert_binary|Remainder[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|R\(7),
	ena => \convert_binary|Remainder[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Remainder\(7));

\division|R[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_A\(8),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|R\(8));

\convert_binary|Remainder[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|R\(8),
	ena => \convert_binary|Remainder[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Remainder\(8));

\division|R[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|Data_A\(9),
	clrn => \ALT_INV_RST_N~input_o\,
	ena => \division|Selector20~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|R\(9));

\convert_binary|Remainder[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|R\(9),
	ena => \convert_binary|Remainder[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Remainder\(9));

\add|DONE~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \add|DONE~0_combout\ = ( \Start~input_o\ & ( (!\RST_N~input_o\ & (\add|state~q\ & ((\add|LessThan0~5_combout\) # (\add|DONE~q\)))) # (\RST_N~input_o\ & (\add|DONE~q\)) ) ) # ( !\Start~input_o\ & ( ((!\RST_N~input_o\ & (\add|state~q\ & 
-- \add|LessThan0~5_combout\))) # (\add|DONE~q\) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0011001100111011000100110001101100110011001110110001001100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \add|ALT_INV_DONE~q\,
	datac => \add|ALT_INV_state~q\,
	datad => \add|ALT_INV_LessThan0~5_combout\,
	datae => \ALT_INV_Start~input_o\,
	combout => \add|DONE~0_combout\);

\add|DONE\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \add|DONE~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \add|DONE~q\);

\multiplication|DONE~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication|DONE~0_combout\ = ( \Start~input_o\ & ( (!\RST_N~input_o\ & (\multiplication|state~q\ & ((\multiplication|LessThan0~5_combout\) # (\multiplication|DONE~q\)))) # (\RST_N~input_o\ & (\multiplication|DONE~q\)) ) ) # ( !\Start~input_o\ & ( 
-- ((!\RST_N~input_o\ & (\multiplication|state~q\ & \multiplication|LessThan0~5_combout\))) # (\multiplication|DONE~q\) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0011001100111011000100110001101100110011001110110001001100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \multiplication|ALT_INV_DONE~q\,
	datac => \multiplication|ALT_INV_state~q\,
	datad => \multiplication|ALT_INV_LessThan0~5_combout\,
	datae => \ALT_INV_Start~input_o\,
	combout => \multiplication|DONE~0_combout\);

\multiplication|DONE\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \multiplication|DONE~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication|DONE~q\);

\division|DONE~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division|DONE~0_combout\ = ( \Start~input_o\ & ( \division|state.S2~q\ & ( \division|DONE~q\ ) ) ) # ( !\Start~input_o\ & ( \division|state.S2~q\ & ( \division|DONE~q\ ) ) ) # ( \Start~input_o\ & ( !\division|state.S2~q\ & ( (!\RST_N~input_o\ & 
-- (\division|state.S1~q\ & ((\division|LessThan0~6_combout\) # (\division|DONE~q\)))) # (\RST_N~input_o\ & (\division|DONE~q\)) ) ) ) # ( !\Start~input_o\ & ( !\division|state.S2~q\ & ( ((!\RST_N~input_o\ & (\division|LessThan0~6_combout\ & 
-- \division|state.S1~q\))) # (\division|DONE~q\) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0011001100111011000100010011101100110011001100110011001100110011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \division|ALT_INV_DONE~q\,
	datac => \division|ALT_INV_LessThan0~6_combout\,
	datad => \division|ALT_INV_state.S1~q\,
	datae => \ALT_INV_Start~input_o\,
	dataf => \division|ALT_INV_state.S2~q\,
	combout => \division|DONE~0_combout\);

\division|DONE\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \division|DONE~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division|DONE~q\);

\convert_binary|Mux10~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux10~0_combout\ = ( \division|DONE~q\ & ( (!\Operation[1]~input_o\ & ((!\Operation[0]~input_o\) # ((\multiplication|DONE~q\)))) # (\Operation[1]~input_o\ & (((\add|DONE~q\)))) ) ) # ( !\division|DONE~q\ & ( (!\Operation[1]~input_o\ & 
-- (\Operation[0]~input_o\ & ((\multiplication|DONE~q\)))) # (\Operation[1]~input_o\ & (((\add|DONE~q\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001101000111100010111100111100000011010001111000101111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \add|ALT_INV_DONE~q\,
	datad => \multiplication|ALT_INV_DONE~q\,
	datae => \division|ALT_INV_DONE~q\,
	combout => \convert_binary|Mux10~0_combout\);

\convert_binary|Done\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux10~0_combout\,
	ena => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|Done~q\);

\sub|cout_sub_overflow~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \sub|cout_sub_overflow~0_combout\ = ( \sub|cout_sub_overflow~q\ & ( ((!\sub|Mux2~1_combout\) # ((!\add|state~q\) # (!\add|LessThan0~5_combout\))) # (\RST_N~input_o\) ) ) # ( !\sub|cout_sub_overflow~q\ & ( (!\RST_N~input_o\ & (!\sub|Mux2~1_combout\ & 
-- (\add|state~q\ & \add|LessThan0~5_combout\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000001000111111111111110100000000000010001111111111111101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_N~input_o\,
	datab => \sub|ALT_INV_Mux2~1_combout\,
	datac => \add|ALT_INV_state~q\,
	datad => \add|ALT_INV_LessThan0~5_combout\,
	datae => \sub|ALT_INV_cout_sub_overflow~q\,
	combout => \sub|cout_sub_overflow~0_combout\);

\sub|cout_sub_overflow\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \sub|cout_sub_overflow~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \sub|cout_sub_overflow~q\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\ = SUM(( \sub|sum\(3) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ = CARRY(( \sub|sum\(3) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(3),
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~30\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~31\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\ = SUM(( !\sub|sum\(4) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ = CARRY(( !\sub|sum\(4) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ = SHARE(\sub|sum\(4))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(4),
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~30\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~31\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~26\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~27\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\ = SUM(( \sub|sum\(5) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ = CARRY(( \sub|sum\(5) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(5),
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~26\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~27\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~22\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~23\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\ = SUM(( !\sub|sum\(6) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ = CARRY(( !\sub|sum\(6) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ = SHARE(\sub|sum\(6))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(6),
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~22\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~23\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~18\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~19\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\ = SUM(( !\sub|sum\(7) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ = CARRY(( !\sub|sum\(7) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ = SHARE(\sub|sum\(7))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(7),
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~18\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~19\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~10\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~11\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\ = SUM(( \sub|sum\(8) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ = CARRY(( \sub|sum\(8) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(8),
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~10\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~11\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~14\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~15\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\ = SUM(( \sub|sum\(9) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ = CARRY(( \sub|sum\(9) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(9),
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~14\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~15\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~6\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~7\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~6\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~7\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\ = (\sub|sum\(8) & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(8),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\ = (\sub|sum\(6) & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(6),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\ = (\sub|sum\(4) & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(4),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~38_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( \sub|sum\(2) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~38_cout\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~34\ = CARRY(( \sub|sum\(2) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(2),
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~38_cout\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~34\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\sub|sum\(3))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\sub|sum\(3))) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(3),
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~30\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~26\ = CARRY(( (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~26\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\))) # (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\sub|sum\(5))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\sub|sum\(5))) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(5),
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~22\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\ = SUM(( (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~18\ = CARRY(( (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~18\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\))) 
-- # (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\sub|sum\(7))) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~18\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\sub|sum\(7))) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(7),
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~18\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~10\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~14\ = CARRY(( (\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~14\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~6_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\))) 
-- # (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\sub|sum\(9))) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(9),
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~14\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~6_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~6_cout\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\ = (\sub|sum\(7) & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(7),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\ = (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111011101110111011101110111011101110111011101110111011101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\ = (\sub|sum\(5) & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(5),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\ = (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111011101110111011101110111011101110111011101110111011101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\sub|sum\(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(3),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~38_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( \sub|sum\(1) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~38_cout\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~34\ = CARRY(( \sub|sum\(1) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(1),
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~38_cout\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~34\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\sub|sum\(2))) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\sub|sum\(2))) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(2),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~30\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\)) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\)) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~26\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~21_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~22\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~21_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~22\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~22\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~22\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~18\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\)) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~18\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\)) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~14\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~10\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~6_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001010110111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~10\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~6_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~6_cout\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~0_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~0_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~3_combout\ = (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~3_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~6_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~6_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~10_combout\ = (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~10_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[59]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[59]~13_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[59]~13_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~14_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~14_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~18_combout\ = (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~18_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[57]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[57]~20_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[57]~20_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[56]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[56]~21_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\sub|sum\(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(2),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[56]~21_combout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( \sub|sum\(0) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(0),
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_9~33_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (\sub|sum\(1))) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(1),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[56]~21_combout\)) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_9~25_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[57]~20_combout\)) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~26_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~18_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_9~21_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~18_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~22_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~18_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~14_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_9~17_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[59]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_10~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~18_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~14_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~10_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_9~13_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~10_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~6_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~14_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~10_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~6_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_9~9_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~3_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~0_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~10_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~10_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~6_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_10~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~6_cout\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\ = SUM(( \multiplication|R\(3) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ = CARRY(( \multiplication|R\(3) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(3),
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~30\,
	shareout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~31\);

\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\ = SUM(( !\multiplication|R\(4) ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ = CARRY(( !\multiplication|R\(4) ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ = SHARE(\multiplication|R\(4))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(4),
	cin => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~30\,
	sharein => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~31\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~26\,
	shareout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~27\);

\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\ = SUM(( \multiplication|R\(5) ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ = CARRY(( \multiplication|R\(5) ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(5),
	cin => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~26\,
	sharein => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~27\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~22\,
	shareout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~23\);

\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\ = SUM(( !\multiplication|R\(6) ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ = CARRY(( !\multiplication|R\(6) ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ = SHARE(\multiplication|R\(6))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(6),
	cin => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~22\,
	sharein => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~23\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~18\,
	shareout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~19\);

\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\ = SUM(( !\multiplication|R\(7) ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ = CARRY(( !\multiplication|R\(7) ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ = SHARE(\multiplication|R\(7))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(7),
	cin => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~18\,
	sharein => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~19\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~10\,
	shareout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~11\);

\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\ = SUM(( \multiplication|R\(8) ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ = CARRY(( \multiplication|R\(8) ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(8),
	cin => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~10\,
	sharein => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~11\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~14\,
	shareout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~15\);

\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\ = SUM(( \multiplication|R\(9) ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ = CARRY(( \multiplication|R\(9) ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(9),
	cin => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~14\,
	sharein => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~15\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~6\,
	shareout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~7\);

\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~6\,
	sharein => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~7\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~5_combout\ = (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~5_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~4_combout\ = (\multiplication|R\(8) & \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(8),
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~4_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~7_combout\ = (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~7_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~8_combout\ = (\multiplication|R\(6) & \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(6),
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~8_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~15_combout\ = (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~15_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~16_combout\ = (\multiplication|R\(4) & \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(4),
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~16_combout\);

\convert_binary|Div5|auto_generated|divider|divider|op_8~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_8~38_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( \multiplication|R\(2) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_8~38_cout\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~34\ = CARRY(( \multiplication|R\(2) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_8~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(2),
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_8~38_cout\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_8~34\);

\convert_binary|Div5|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # (\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\multiplication|R\(3))) ) + ( VCC ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\multiplication|R\(3))) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(3),
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_8~30\);

\convert_binary|Div5|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (\convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~15_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~26\ = CARRY(( (\convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~15_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_8~26\);

\convert_binary|Div5|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\))) # (\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\multiplication|R\(5))) ) + ( VCC ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\multiplication|R\(5))) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(5),
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_8~22\);

\convert_binary|Div5|auto_generated|divider|divider|op_8~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~17_sumout\ = SUM(( (\convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~18\ = CARRY(( (\convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_8~17_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_8~18\);

\convert_binary|Div5|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\))) 
-- # (\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\multiplication|R\(7))) ) + ( GND ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_8~18\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\multiplication|R\(7))) ) + ( GND ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_8~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(7),
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_8~18\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_8~10\);

\convert_binary|Div5|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (\convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~4_combout\) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~5_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~14\ = CARRY(( (\convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~4_combout\) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~5_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_8~14\);

\convert_binary|Div5|auto_generated|divider|divider|op_8~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~6_cout\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\))) 
-- # (\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\multiplication|R\(9))) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(9),
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_8~14\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_8~6_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_8~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_8~6_cout\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~1_combout\ = (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~1_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~2_combout\ = (\multiplication|R\(7) & \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(7),
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~2_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~9_combout\ = (\convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~7_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111011101110111011101110111011101110111011101110111011101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~9_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~11_combout\ = (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~11_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~12_combout\ = (\multiplication|R\(5) & \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(5),
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~12_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~17_combout\ = (\convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~15_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111011101110111011101110111011101110111011101110111011101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~17_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[48]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[48]~19_combout\ = (!\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # (\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\multiplication|R\(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(3),
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[48]~19_combout\);

\convert_binary|Div5|auto_generated|divider|divider|op_9~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_9~38_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( \multiplication|R\(1) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_9~38_cout\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~34\ = CARRY(( \multiplication|R\(1) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_9~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(1),
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_9~38_cout\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_9~34\);

\convert_binary|Div5|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (\multiplication|R\(2))) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (\multiplication|R\(2))) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(2),
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_9~30\);

\convert_binary|Div5|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div5|auto_generated|divider|divider|StageOut[48]~19_combout\)) ) + ( GND ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div5|auto_generated|divider|divider|StageOut[48]~19_combout\)) ) + ( GND ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_9~26\);

\convert_binary|Div5|auto_generated|divider|divider|op_9~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~21_sumout\ = SUM(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_8~25_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~22\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_8~25_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_9~21_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_9~22\);

\convert_binary|Div5|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~11_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~22\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~11_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_9~22\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_9~18\);

\convert_binary|Div5|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~9_combout\)) ) + ( GND ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_9~18\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~9_combout\)) ) + ( GND ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_9~14\);

\convert_binary|Div5|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|op_8~9_sumout\)))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~2_combout\)) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~1_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|op_8~9_sumout\)))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~2_combout\)) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~1_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_9~10\);

\convert_binary|Div5|auto_generated|divider|divider|op_9~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~6_cout\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~5_combout\)) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[53]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001010110111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_9~10\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_9~6_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_9~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_9~6_cout\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[61]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[61]~0_combout\ = (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div5|auto_generated|divider|divider|op_8~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[61]~0_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[61]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[61]~3_combout\ = (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~2_combout\) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|StageOut[52]~1_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[61]~3_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[60]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[60]~6_combout\ = (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div5|auto_generated|divider|divider|op_8~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[60]~6_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[60]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[60]~10_combout\ = (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div5|auto_generated|divider|divider|StageOut[51]~9_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[60]~10_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[59]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[59]~13_combout\ = (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[50]~11_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[59]~13_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[58]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[58]~14_combout\ = (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div5|auto_generated|divider|divider|op_8~25_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[58]~14_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[58]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[58]~18_combout\ = (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div5|auto_generated|divider|divider|StageOut[49]~17_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[58]~18_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[57]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[57]~20_combout\ = (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div5|auto_generated|divider|divider|StageOut[48]~19_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[57]~20_combout\);

\convert_binary|Div5|auto_generated|divider|divider|StageOut[56]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|StageOut[56]~21_combout\ = (!\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & (\multiplication|R\(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(2),
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	combout => \convert_binary|Div5|auto_generated|divider|divider|StageOut[56]~21_combout\);

\convert_binary|Div5|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( \multiplication|R\(0) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(0),
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_9~33_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & (\multiplication|R\(1))) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(1),
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div5|auto_generated|divider|divider|StageOut[56]~21_combout\)) ) + ( GND ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_9~25_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div5|auto_generated|divider|divider|StageOut[57]~20_combout\)) ) + ( VCC ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_10~26_cout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_10~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~18_cout\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|op_9~21_sumout\)))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|StageOut[58]~18_combout\)) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[58]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_10~22_cout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_10~18_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_10~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~14_cout\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div5|auto_generated|divider|divider|op_9~17_sumout\))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div5|auto_generated|divider|divider|StageOut[59]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_10~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_10~18_cout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_10~14_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_10~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~10_cout\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|op_9~13_sumout\)))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|StageOut[60]~10_combout\)) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[60]~6_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_10~14_cout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_10~10_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_10~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~6_cout\ = CARRY(( (!\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|op_9~9_sumout\)))) # 
-- (\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div5|auto_generated|divider|divider|StageOut[61]~3_combout\)) # (\convert_binary|Div5|auto_generated|divider|divider|StageOut[61]~0_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~10_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\,
	datac => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\,
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_10~10_cout\,
	cout => \convert_binary|Div5|auto_generated|divider|divider|op_10~6_cout\);

\convert_binary|Div5|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div5|auto_generated|divider|divider|op_10~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div5|auto_generated|divider|divider|op_10~6_cout\,
	sumout => \convert_binary|Div5|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\ = SUM(( \add|sum\(3) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ = CARRY(( \add|sum\(3) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(3),
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~30\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~31\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\ = SUM(( !\add|sum\(4) ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ = CARRY(( !\add|sum\(4) ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ = SHARE(\add|sum\(4))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(4),
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~30\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~31\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~26\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~27\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\ = SUM(( \add|sum\(5) ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ = CARRY(( \add|sum\(5) ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(5),
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~26\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~27\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~22\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~23\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\ = SUM(( !\add|sum\(6) ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ = CARRY(( !\add|sum\(6) ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ = SHARE(\add|sum\(6))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(6),
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~22\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~23\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~18\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~19\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\ = SUM(( !\add|sum\(7) ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ = CARRY(( !\add|sum\(7) ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ = SHARE(\add|sum\(7))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(7),
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~18\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~19\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~10\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~11\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\ = SUM(( \add|sum\(8) ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ = CARRY(( \add|sum\(8) ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(8),
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~10\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~11\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~14\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~15\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\ = SUM(( \add|sum\(9) ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ = CARRY(( \add|sum\(9) ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(9),
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~14\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~15\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~6\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~7\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~6\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~7\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\ = (\add|sum\(8) & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(8),
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\ = (\add|sum\(6) & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(6),
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\ = (\add|sum\(4) & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(4),
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~38_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( \add|sum\(2) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~38_cout\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~34\ = CARRY(( \add|sum\(2) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(2),
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~38_cout\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~34\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\add|sum\(3))) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\add|sum\(3))) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(3),
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~30\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~26\ = CARRY(( (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~26\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\))) # (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\add|sum\(5))) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\add|sum\(5))) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(5),
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~22\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\ = SUM(( (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~18\ = CARRY(( (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~18\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\))) 
-- # (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\add|sum\(7))) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~18\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\add|sum\(7))) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(7),
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~18\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~10\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~14\ = CARRY(( (\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~14\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~6_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\))) 
-- # (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\add|sum\(9))) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(9),
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~14\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~6_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~6_cout\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\ = (\add|sum\(7) & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(7),
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\ = (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111011101110111011101110111011101110111011101110111011101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\ = (\add|sum\(5) & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(5),
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\ = (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111011101110111011101110111011101110111011101110111011101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\add|sum\(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(3),
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~38_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( \add|sum\(1) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~38_cout\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~34\ = CARRY(( \add|sum\(1) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(1),
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~38_cout\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~34\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\add|sum\(2))) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\add|sum\(2))) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(2),
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~30\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~26\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~21_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~22\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~21_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~22\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~22\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~22\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~18\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~18\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~14\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~10\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~6_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001010110111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~10\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~6_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~6_cout\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~0_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~0_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~3_combout\ = (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~3_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~6_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~6_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~10_combout\ = (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~10_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[59]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[59]~13_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[59]~13_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~14_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~14_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~18_combout\ = (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~18_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[57]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[57]~20_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[57]~20_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[56]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[56]~21_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\add|sum\(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(2),
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[56]~21_combout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( \add|sum\(0) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(0),
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_9~33_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (\add|sum\(1))) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(1),
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[56]~21_combout\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_9~25_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[57]~20_combout\)) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~26_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~18_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_9~21_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~18_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~22_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~18_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~14_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_9~17_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[59]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_10~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~18_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~14_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~10_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_9~13_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~10_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~6_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~14_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~10_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~6_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_9~9_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~3_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~0_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~10_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~10_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~6_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_10~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~6_cout\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mux34~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux34~0_combout\ = ( \convert_binary|Div5|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\ & ( (!\Operation[0]~input_o\ & (\Operation[1]~input_o\ & 
-- (!\sub|cout_sub_overflow~q\ & !\convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\))) ) ) ) # ( !\convert_binary|Div5|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\ & 
-- ( (!\Operation[0]~input_o\ & (\Operation[1]~input_o\ & (!\sub|cout_sub_overflow~q\ & !\convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\))) # (\Operation[0]~input_o\ & (!\Operation[1]~input_o\)) ) ) ) # ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_10~1_sumout\ & ( !\convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\ & ( (\Operation[1]~input_o\ & (((!\sub|cout_sub_overflow~q\ & 
-- !\convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\)) # (\Operation[0]~input_o\))) ) ) ) # ( !\convert_binary|Div5|auto_generated|divider|divider|op_10~1_sumout\ & ( !\convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\ & ( 
-- ((\Operation[1]~input_o\ & (!\sub|cout_sub_overflow~q\ & !\convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\))) # (\Operation[0]~input_o\) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111010101010101001100010001000101100100010001000010000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \sub|ALT_INV_cout_sub_overflow~q\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	dataf => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	combout => \convert_binary|Mux34~0_combout\);

\convert_binary|int_data_1[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux34~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_1\(0));

\convert_binary|Mux33~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux33~0_combout\ = ( \convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & ( \convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & ( (!\Operation[0]~input_o\ & ((!\Operation[1]~input_o\) # 
-- ((!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\) # (\sub|cout_sub_overflow~q\)))) ) ) ) # ( !\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & ( \convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ( (!\Operation[1]~input_o\) # ((!\Operation[0]~input_o\ & ((!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\) # (\sub|cout_sub_overflow~q\)))) ) ) ) # ( \convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & ( 
-- !\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & ( (!\Operation[0]~input_o\ & ((!\Operation[1]~input_o\) # ((!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\) # (\sub|cout_sub_overflow~q\)))) # 
-- (\Operation[0]~input_o\ & (\Operation[1]~input_o\)) ) ) ) # ( !\convert_binary|Div5|auto_generated|divider|divider|op_9~1_sumout\ & ( !\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & ( ((!\Operation[1]~input_o\) # 
-- ((!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\) # (\sub|cout_sub_overflow~q\))) # (\Operation[0]~input_o\) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1111111111011111101110111001101111101110110011101010101010001010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \sub|ALT_INV_cout_sub_overflow~q\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datae => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	dataf => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	combout => \convert_binary|Mux33~0_combout\);

\convert_binary|int_data_1[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux33~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_1\(1));

\convert_binary|Mux32~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux32~0_combout\ = ( \convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ( \convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ( (!\Operation[0]~input_o\ & (\Operation[1]~input_o\ & 
-- (!\sub|cout_sub_overflow~q\ & !\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\))) ) ) ) # ( !\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ( \convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ( 
-- (!\Operation[0]~input_o\ & (\Operation[1]~input_o\ & (!\sub|cout_sub_overflow~q\ & !\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\))) # (\Operation[0]~input_o\ & (!\Operation[1]~input_o\)) ) ) ) # ( 
-- \convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ( !\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ( (\Operation[1]~input_o\ & (((!\sub|cout_sub_overflow~q\ & 
-- !\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\)) # (\Operation[0]~input_o\))) ) ) ) # ( !\convert_binary|Div5|auto_generated|divider|divider|op_8~1_sumout\ & ( !\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ( 
-- ((\Operation[1]~input_o\ & (!\sub|cout_sub_overflow~q\ & !\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\))) # (\Operation[0]~input_o\) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111010101010101001100010001000101100100010001000010000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \sub|ALT_INV_cout_sub_overflow~q\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datae => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	dataf => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	combout => \convert_binary|Mux32~0_combout\);

\convert_binary|int_data_1[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux32~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_1\(2));

\convert_binary|Mux31~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux31~0_combout\ = ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ( (!\Operation[0]~input_o\ & 
-- ((!\Operation[1]~input_o\) # ((!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\) # (\sub|cout_sub_overflow~q\)))) ) ) ) # ( !\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ( (!\Operation[1]~input_o\) # ((!\Operation[0]~input_o\ & ((!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\) # 
-- (\sub|cout_sub_overflow~q\)))) ) ) ) # ( \convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ( !\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ( (!\Operation[0]~input_o\ & 
-- ((!\Operation[1]~input_o\) # ((!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\) # (\sub|cout_sub_overflow~q\)))) # (\Operation[0]~input_o\ & (\Operation[1]~input_o\)) ) ) ) # ( 
-- !\convert_binary|Div5|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ( !\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ( ((!\Operation[1]~input_o\) # 
-- ((!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\) # (\sub|cout_sub_overflow~q\))) # (\Operation[0]~input_o\) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1111111111011111101110111001101111101110110011101010101010001010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \sub|ALT_INV_cout_sub_overflow~q\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datae => \convert_binary|Div5|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	dataf => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Mux31~0_combout\);

\convert_binary|int_data_1[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux31~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_1\(3));

\seven_seg_display_1|Mux6~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux6~0_combout\ = (!\convert_binary|int_data_1\(1) & (!\convert_binary|int_data_1\(2) $ (((!\convert_binary|int_data_1\(0)) # (\convert_binary|int_data_1\(3)))))) # (\convert_binary|int_data_1\(1) & 
-- (((\convert_binary|int_data_1\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100000111111010010000011111101001000001111110100100000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux6~0_combout\);

\seven_seg_display_1|seven_seg[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_1|Mux6~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(0));

\seven_seg_display_1|Mux5~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux5~0_combout\ = (!\convert_binary|int_data_1\(2) & (((\convert_binary|int_data_1\(1) & \convert_binary|int_data_1\(3))))) # (\convert_binary|int_data_1\(2) & ((!\convert_binary|int_data_1\(0) $ (!\convert_binary|int_data_1\(1))) # 
-- (\convert_binary|int_data_1\(3))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011000111111000001100011111100000110001111110000011000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux5~0_combout\);

\seven_seg_display_1|seven_seg[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_1|Mux5~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(1));

\seven_seg_display_1|Mux4~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux4~0_combout\ = (!\convert_binary|int_data_1\(2) & (\convert_binary|int_data_1\(1) & ((!\convert_binary|int_data_1\(0)) # (\convert_binary|int_data_1\(3))))) # (\convert_binary|int_data_1\(2) & (((\convert_binary|int_data_1\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010000000111111001000000011111100100000001111110010000000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux4~0_combout\);

\seven_seg_display_1|seven_seg[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_1|Mux4~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(2));

\seven_seg_display_1|Mux3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux3~0_combout\ = (!\convert_binary|int_data_1\(3) & ((!\convert_binary|int_data_1\(0) & (!\convert_binary|int_data_1\(1) & \convert_binary|int_data_1\(2))) # (\convert_binary|int_data_1\(0) & (!\convert_binary|int_data_1\(1) $ 
-- (\convert_binary|int_data_1\(2))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100100000000010010010000000001001001000000000100100100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux3~0_combout\);

\seven_seg_display_1|seven_seg[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_1|Mux3~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(3));

\seven_seg_display_1|Mux2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux2~0_combout\ = (!\convert_binary|int_data_1\(1) & ((!\convert_binary|int_data_1\(2) & (\convert_binary|int_data_1\(0))) # (\convert_binary|int_data_1\(2) & ((!\convert_binary|int_data_1\(3)))))) # (\convert_binary|int_data_1\(1) & 
-- (\convert_binary|int_data_1\(0) & ((!\convert_binary|int_data_1\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101110101000000010111010100000001011101010000000101110101000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux2~0_combout\);

\seven_seg_display_1|seven_seg[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_1|Mux2~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(4));

\seven_seg_display_1|Mux1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux1~0_combout\ = (!\convert_binary|int_data_1\(3) & ((!\convert_binary|int_data_1\(0) & (\convert_binary|int_data_1\(1) & !\convert_binary|int_data_1\(2))) # (\convert_binary|int_data_1\(0) & ((!\convert_binary|int_data_1\(2)) # 
-- (\convert_binary|int_data_1\(1))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111000100000000011100010000000001110001000000000111000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux1~0_combout\);

\seven_seg_display_1|seven_seg[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_1|Mux1~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(5));

\seven_seg_display_1|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux0~0_combout\ = (!\convert_binary|int_data_1\(3) & ((!\convert_binary|int_data_1\(1) & ((!\convert_binary|int_data_1\(2)))) # (\convert_binary|int_data_1\(1) & (\convert_binary|int_data_1\(0) & \convert_binary|int_data_1\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1100000100000000110000010000000011000001000000001100000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux0~0_combout\);

\seven_seg_display_1|seven_seg[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_1|Mux0~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(6));

\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\ = SUM(( \add|sum\(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ = CARRY(( \add|sum\(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(6),
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~6\,
	shareout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~7\);

\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\ = SUM(( \add|sum\(7) ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ = CARRY(( \add|sum\(7) ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(7),
	cin => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~6\,
	sharein => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~7\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~10\,
	shareout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~11\);

\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\ = SUM(( !\add|sum\(8) ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ = CARRY(( !\add|sum\(8) ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ = SHARE(\add|sum\(8))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(8),
	cin => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~10\,
	sharein => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~11\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~18\,
	shareout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~19\);

\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\ = SUM(( \add|sum\(9) ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ = CARRY(( \add|sum\(9) ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(9),
	cin => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~18\,
	sharein => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~19\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~14\,
	shareout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~15\);

\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~14\,
	sharein => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~15\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~22_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~22_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~23_combout\ = (\add|sum\(9) & \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(9),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~23_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18_combout\ = (\add|sum\(7) & \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(7),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18_combout\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_5~22_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\ = SUM(( \add|sum\(5) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_5~22_cout\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~6\ = CARRY(( \add|sum\(5) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_5~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(5),
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_5~22_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_5~6\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) 
-- # (\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\add|sum\(6))) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_5~6\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~10\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\add|sum\(6))) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_5~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(6),
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_5~6\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_5~10\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\ = SUM(( (\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18_combout\) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~10\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~14\ = CARRY(( (\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18_combout\) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_5~10\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_5~14\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~25_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\))) # (\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\add|sum\(8))) ) + ( GND ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~14\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~26\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\add|sum\(8))) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_5~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(8),
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_5~14\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_5~25_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_5~26\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~18_cout\ = CARRY(( (\convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~23_combout\) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~22_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_5~26\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_5~18_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_5~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_5~18_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~22\,
	shareout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~23\);

\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~22\,
	sharein => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~23\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~18\,
	shareout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~19\);

\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ = CARRY(( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~18\,
	sharein => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~19\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~14\,
	shareout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~15\);

\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ = SUM(( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ = CARRY(( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~14\,
	sharein => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~15\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~10\,
	shareout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~11\);

\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ = CARRY(( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~10\,
	sharein => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~11\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~6\,
	shareout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~7\);

\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~6\,
	sharein => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~7\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~19_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~19_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~20_combout\ = (\add|sum\(8) & \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(8),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~20_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\))) # (\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\add|sum\(7)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(7),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) # (\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\add|sum\(6)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(6),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_6~26_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( \add|sum\(4) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~26_cout\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~6\ = CARRY(( \add|sum\(4) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(4),
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_6~26_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_6~6\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\add|sum\(5))) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~6\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\add|sum\(5))) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(5),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_6~10\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_6~14\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_6~18\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~22_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|op_5~25_sumout\)))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~20_combout\)) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~19_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_6~18\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_6~22_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_6~22_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~30_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~30_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~30_cout\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~26\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~30_cout\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~26\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\)) ) 
-- + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~26\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~22\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~26\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~22\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~22\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~22\ 
-- ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011000011111100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~22\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~18\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\) ) 
-- + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~18\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\) ) + ( 
-- GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~18\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~14\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\) ) + 
-- ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\) ) + ( 
-- VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~10\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\) ) + 
-- ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~6\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\) ) + ( 
-- VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~6\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~20_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~20_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~25_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~25_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~12_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~12_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~14_combout\ = (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~14_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\add|sum\(5)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(5),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_7~26_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( \add|sum\(3) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~26_cout\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~22\ = CARRY(( \add|sum\(3) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(3),
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_7~26_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_7~22\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\add|sum\(4))) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\add|sum\(4))) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(4),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_7~10\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~10\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~14\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_7~14\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~14\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_7~14\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_7~18\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~6_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|op_6~17_sumout\)))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~14_combout\)) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~12_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_7~18\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_7~6_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_7~6_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~14_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~14_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~14_cout\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~6\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~14_cout\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~6\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~6\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~34\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~6\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~34\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~25_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~34\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~30\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~25_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[40]~25_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~34\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~30\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~20_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~30\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~26\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~20_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[41]~20_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~30\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~26\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\))) ) + 
-- ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~26\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~22\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\))) ) + 
-- ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000010111010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~26\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~22\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010010101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~18\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~18\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010010101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~18\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~10\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~5_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~5_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~6_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ 
-- & \convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000000010000000100000001000000010000000100000001000000010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~6_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~10_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~10_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~11_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ 
-- & \convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000000010000000100000001000000010000000100000001000000010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~11_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~15_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001011110010000000101111001000000010111100100000001011110010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~15_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~19_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~19_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~20_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[41]~20_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~26_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~25_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[40]~25_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~26_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~30_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~30_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~8_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~8_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~11_combout\ = (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~11_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\add|sum\(4)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(4),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_8~26_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( \add|sum\(2) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~26_cout\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~22\ = CARRY(( \add|sum\(2) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(2),
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_8~26_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_8~22\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\add|sum\(3))) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~18\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\add|sum\(3))) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(3),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_8~18\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~18\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_8~18\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_8~10\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_8~14\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~6_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~11_combout\)) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_8~14\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_8~6_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_8~6_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~18_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~18_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~18_cout\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~6\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~18_cout\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~6\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~6\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~6\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~10\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~30_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~38\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~30_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[50]~30_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~38\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~26_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~38\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~34\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~26_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[51]~26_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~38\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~34\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~19_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~19_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~19_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~30\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~26\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[53]~15_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~26\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~11_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~10_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~11_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~10_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~10_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~11_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~22\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~6_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~6_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~6_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~14\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~14\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~4_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~4_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~7_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~6_combout\) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~5_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~6_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~7_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~12_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~11_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~10_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~10_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~11_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~12_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~14_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~14_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~15_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[53]~15_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~22_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~19_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~19_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~22_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~24\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~24_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~24_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~27\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~27_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~26_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[51]~26_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~27_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~31\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~31_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~30_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[50]~30_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~31_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~1_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~1_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~4_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~4_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~7_combout\ = (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~7_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\add|sum\(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(3),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_9~26_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~21_sumout\ = SUM(( \add|sum\(1) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~26_cout\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~22\ = CARRY(( \add|sum\(1) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(1),
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_9~26_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_9~21_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_9~22\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\add|sum\(2))) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~22\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\add|sum\(2))) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(2),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_9~22\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_9~18\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~18\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_9~14\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_9~10\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~6_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~7_combout\)) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_9~10\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_9~6_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_9~6_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~22_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~22_cout\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~6\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~22_cout\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~6\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~6\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~6\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~10\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~10\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~10\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~14\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~41_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~31_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~42\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~31_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[61]~31_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~41_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~42\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~37_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~27_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~24_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~42\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~38\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~27_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~24_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~24_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~27_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~42\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~37_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~38\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~22_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~38\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~34\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~22_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[63]~22_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~38\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~34\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~14_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~30\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~12_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~12_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[65]~12_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~26\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~7_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~7_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~7_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~18\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~3_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~3_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~8_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~7_combout\) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~4_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~7_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~8_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~9_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~9_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~13_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~12_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[65]~12_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~13_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[75]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[75]~17_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~14_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~14_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[75]~17_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~18_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~18_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~23_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~22_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[63]~22_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~23_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[73]~28\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[73]~28_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~27_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~24_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~24_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~27_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[73]~28_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~29_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~29_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~32\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~32_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~31_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[61]~31_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~32_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~2_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~1_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~2_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~0_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~0_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~0_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~0_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~3_combout\ = (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~3_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[36]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[36]~16_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[36]~16_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[35]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[35]~21_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\add|sum\(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(2),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[35]~21_combout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( \add|sum\(0) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(0),
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_10~26_cout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~18_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_9~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & (\add|sum\(1))) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(1),
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_10~22_cout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_10~18_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~14_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_9~17_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[35]~21_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_10~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_10~18_cout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_10~14_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~10_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[36]~16_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_10~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_10~14_cout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_10~10_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~6_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|op_9~9_sumout\)))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~3_combout\)) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~0_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~10_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_10~10_cout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_10~6_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_10~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_10~6_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~5_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~26_cout\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~6\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~26_cout\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~5_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~6\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~6\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~10\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~6\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~10\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~13_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~0_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~10\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~14\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~0_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~10\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~13_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~14\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~2_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~14\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~18\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~2_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~14\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~18\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~46\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~46_cout\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_9~41_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~32_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~29_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[72]~29_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[72]~32_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~18\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~46_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~42_cout\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~37_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[73]~28_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~46_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[73]~28_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~46_cout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~42_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_9~33_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~23_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~18_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~42_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[74]~18_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[74]~23_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~42_cout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[75]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[75]~17_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_9~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~13_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~9_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[76]~9_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_9~17_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~8_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~3_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[77]~8_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~22_cout\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\ = SUM(( \multiplication|R\(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ = CARRY(( \multiplication|R\(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(6),
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~6\,
	shareout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~7\);

\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\ = SUM(( \multiplication|R\(7) ) + ( \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ = CARRY(( \multiplication|R\(7) ) + ( \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(7),
	cin => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~6\,
	sharein => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~7\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~10\,
	shareout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~11\);

\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\ = SUM(( !\multiplication|R\(8) ) + ( \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ = CARRY(( !\multiplication|R\(8) ) + ( \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ = SHARE(\multiplication|R\(8))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(8),
	cin => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~10\,
	sharein => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~11\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~18\,
	shareout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~19\);

\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\ = SUM(( \multiplication|R\(9) ) + ( \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ = CARRY(( \multiplication|R\(9) ) + ( \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(9),
	cin => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~18\,
	sharein => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~19\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~14\,
	shareout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~15\);

\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~14\,
	sharein => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~15\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[18]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[18]~22_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[18]~22_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[18]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[18]~23_combout\ = (\multiplication|R\(9) & \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(9),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[18]~23_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~17_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~17_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~18_combout\ = (\multiplication|R\(7) & \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(7),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~18_combout\);

\convert_binary|Div4|auto_generated|divider|divider|op_5~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_5~22_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_5~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~5_sumout\ = SUM(( \multiplication|R\(5) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_5~22_cout\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~6\ = CARRY(( \multiplication|R\(5) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_5~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(5),
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_5~22_cout\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_5~5_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_5~6\);

\convert_binary|Div4|auto_generated|divider|divider|op_5~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~9_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) 
-- # (\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\multiplication|R\(6))) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_5~6\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~10\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\multiplication|R\(6))) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_5~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(6),
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_5~6\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_5~9_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_5~10\);

\convert_binary|Div4|auto_generated|divider|divider|op_5~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~13_sumout\ = SUM(( (\convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~18_combout\) # (\convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~17_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~10\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~14\ = CARRY(( (\convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~18_combout\) # (\convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~17_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_5~10\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_5~13_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_5~14\);

\convert_binary|Div4|auto_generated|divider|divider|op_5~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~25_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\))) # (\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\multiplication|R\(8))) ) + ( GND ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~14\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~26\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\multiplication|R\(8))) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_5~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(8),
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_5~14\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_5~25_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_5~26\);

\convert_binary|Div4|auto_generated|divider|divider|op_5~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~18_cout\ = CARRY(( (\convert_binary|Div4|auto_generated|divider|divider|StageOut[18]~23_combout\) # (\convert_binary|Div4|auto_generated|divider|divider|StageOut[18]~22_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_5~26\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_5~18_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_5~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_5~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_5~18_cout\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[17]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[17]~19_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[17]~19_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[17]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[17]~20_combout\ = (\multiplication|R\(8) & \convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(8),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[17]~20_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~13_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\))) # (\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\multiplication|R\(7)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(7),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~13_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[15]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[15]~9_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) # (\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\multiplication|R\(6)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(6),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[15]~9_combout\);

\convert_binary|Div4|auto_generated|divider|divider|op_6~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_6~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_6~26_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( \multiplication|R\(4) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_6~26_cout\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_6~6\ = CARRY(( \multiplication|R\(4) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_6~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(4),
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_6~26_cout\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_6~6\);

\convert_binary|Div4|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & (\multiplication|R\(5))) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_6~6\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & (\multiplication|R\(5))) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(5),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_6~10\);

\convert_binary|Div4|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[15]~9_combout\)) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[15]~9_combout\)) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_6~14\);

\convert_binary|Div4|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_6~18\);

\convert_binary|Div4|auto_generated|divider|divider|op_6~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_6~22_cout\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Div4|auto_generated|divider|divider|op_5~25_sumout\)))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Div4|auto_generated|divider|divider|StageOut[17]~20_combout\)) # (\convert_binary|Div4|auto_generated|divider|divider|StageOut[17]~19_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_6~18\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_6~22_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_6~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_6~22_cout\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[22]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[22]~12_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Div4|auto_generated|divider|divider|op_5~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[22]~12_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[22]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[22]~14_combout\ = (\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Div4|auto_generated|divider|divider|StageOut[16]~13_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[22]~14_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[21]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[21]~10_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[15]~9_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[21]~10_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[20]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[20]~5_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ & (\multiplication|R\(5)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(5),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[20]~5_combout\);

\convert_binary|Div4|auto_generated|divider|divider|op_7~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_7~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_7~26_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( \multiplication|R\(3) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_7~26_cout\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_7~22\ = CARRY(( \multiplication|R\(3) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_7~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(3),
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_7~26_cout\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_7~22\);

\convert_binary|Div4|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & (\multiplication|R\(4))) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & (\multiplication|R\(4))) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(4),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_7~10\);

\convert_binary|Div4|auto_generated|divider|divider|op_7~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_7~13_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[20]~5_combout\)) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_7~10\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_7~14\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[20]~5_combout\)) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_7~13_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_7~14\);

\convert_binary|Div4|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_6~13_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[21]~10_combout\)) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_7~14\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_6~13_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[21]~10_combout\)) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_7~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_7~14\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_7~18\);

\convert_binary|Div4|auto_generated|divider|divider|op_7~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_7~6_cout\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Div4|auto_generated|divider|divider|op_6~17_sumout\)))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Div4|auto_generated|divider|divider|StageOut[22]~14_combout\)) # (\convert_binary|Div4|auto_generated|divider|divider|StageOut[22]~12_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_7~18\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_7~6_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_7~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_7~6_cout\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[27]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[27]~8_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Div4|auto_generated|divider|divider|op_6~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[27]~8_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[27]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[27]~11_combout\ = (\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Div4|auto_generated|divider|divider|StageOut[21]~10_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[27]~11_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[26]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[26]~6_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[20]~5_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[26]~6_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[25]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[25]~1_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ & (\multiplication|R\(4)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(4),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[25]~1_combout\);

\convert_binary|Div4|auto_generated|divider|divider|op_8~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_8~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_8~26_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( \multiplication|R\(2) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_8~26_cout\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_8~22\ = CARRY(( \multiplication|R\(2) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_8~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(2),
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_8~26_cout\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_8~22\);

\convert_binary|Div4|auto_generated|divider|divider|op_8~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_8~17_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & (\multiplication|R\(3))) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_8~18\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & (\multiplication|R\(3))) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(3),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_8~17_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_8~18\);

\convert_binary|Div4|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[25]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_8~18\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[25]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_8~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_8~18\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_8~10\);

\convert_binary|Div4|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_7~13_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[26]~6_combout\)) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_7~13_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[26]~6_combout\)) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_8~14\);

\convert_binary|Div4|auto_generated|divider|divider|op_8~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_8~6_cout\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Div4|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Div4|auto_generated|divider|divider|StageOut[27]~11_combout\)) # (\convert_binary|Div4|auto_generated|divider|divider|StageOut[27]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_8~14\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_8~6_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_8~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_8~6_cout\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[32]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[32]~4_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Div4|auto_generated|divider|divider|op_7~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[32]~4_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[32]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[32]~7_combout\ = (\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Div4|auto_generated|divider|divider|StageOut[26]~6_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[32]~7_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[31]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[31]~2_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[25]~1_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[31]~2_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[30]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[30]~15_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ & (\multiplication|R\(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(3),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[30]~15_combout\);

\convert_binary|Div4|auto_generated|divider|divider|op_9~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_9~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_9~26_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_9~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_9~21_sumout\ = SUM(( \multiplication|R\(1) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_9~26_cout\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_9~22\ = CARRY(( \multiplication|R\(1) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_9~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(1),
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_9~26_cout\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_9~21_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_9~22\);

\convert_binary|Div4|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & (\multiplication|R\(2))) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_9~22\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & (\multiplication|R\(2))) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_9~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(2),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_9~22\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_9~18\);

\convert_binary|Div4|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[30]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_9~18\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[30]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_9~14\);

\convert_binary|Div4|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[31]~2_combout\)) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Div4|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[31]~2_combout\)) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_9~10\);

\convert_binary|Div4|auto_generated|divider|divider|op_9~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_9~6_cout\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div4|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div4|auto_generated|divider|divider|StageOut[32]~7_combout\)) # (\convert_binary|Div4|auto_generated|divider|divider|StageOut[32]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_9~10\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_9~6_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_9~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_9~6_cout\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[37]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[37]~0_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div4|auto_generated|divider|divider|op_8~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[37]~0_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[37]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[37]~3_combout\ = (\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div4|auto_generated|divider|divider|StageOut[31]~2_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[37]~3_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[36]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[36]~16_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[30]~15_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[36]~16_combout\);

\convert_binary|Div4|auto_generated|divider|divider|StageOut[35]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|StageOut[35]~21_combout\ = (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ & (\multiplication|R\(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(2),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Div4|auto_generated|divider|divider|StageOut[35]~21_combout\);

\convert_binary|Div4|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( \multiplication|R\(0) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(0),
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_10~26_cout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_10~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_10~18_cout\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_9~21_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\ & (\multiplication|R\(1))) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(1),
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_10~22_cout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_10~18_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_10~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_10~14_cout\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_9~17_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[35]~21_combout\)) ) + ( VCC ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_10~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_10~18_cout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_10~14_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_10~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_10~10_cout\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div4|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div4|auto_generated|divider|divider|StageOut[36]~16_combout\)) ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_10~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_10~14_cout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_10~10_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_10~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_10~6_cout\ = CARRY(( (!\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div4|auto_generated|divider|divider|op_9~9_sumout\)))) # 
-- (\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div4|auto_generated|divider|divider|StageOut[37]~3_combout\)) # (\convert_binary|Div4|auto_generated|divider|divider|StageOut[37]~0_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div4|auto_generated|divider|divider|op_10~10_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\,
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_10~10_cout\,
	cout => \convert_binary|Div4|auto_generated|divider|divider|op_10~6_cout\);

\convert_binary|Div4|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div4|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div4|auto_generated|divider|divider|op_10~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div4|auto_generated|divider|divider|op_10~6_cout\,
	sumout => \convert_binary|Div4|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\ = SUM(( !\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ = CARRY(( !\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~22\,
	shareout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~23\);

\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\ = SUM(( !\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ ) + ( \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ = CARRY(( !\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ ) + ( \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~22\,
	sharein => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~23\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~18\,
	shareout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~19\);

\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ = CARRY(( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~18\,
	sharein => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~19\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~14\,
	shareout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~15\);

\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ = SUM(( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ = CARRY(( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~14\,
	sharein => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~15\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~10\,
	shareout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~11\);

\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ = CARRY(( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~10\,
	sharein => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~11\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~6\,
	shareout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~7\);

\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~6\,
	sharein => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~7\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_6~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~30_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~30_cout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_6~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~25_sumout\ = SUM(( !\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~30_cout\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~26\ = CARRY(( !\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_6~30_cout\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~25_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~26\);

\convert_binary|Mod5|auto_generated|divider|divider|op_6~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~21_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\)) ) 
-- + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~26\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~22\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_6~26\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~21_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~22\);

\convert_binary|Mod5|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- (!\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~22\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~22\ 
-- ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011000011111100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_6~22\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~18\);

\convert_binary|Mod5|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\) ) 
-- + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~18\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\) ) + ( 
-- GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_6~18\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~14\);

\convert_binary|Mod5|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\) ) + 
-- ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\) ) + ( 
-- VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~10\);

\convert_binary|Mod5|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\) ) + 
-- ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~6\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\) ) + ( 
-- VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~6\);

\convert_binary|Mod5|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[41]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[41]~20_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- (!\convert_binary|Div4|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[41]~20_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[40]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[40]~25_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_5~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[40]~25_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_7~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~14_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~14_cout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_7~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~5_sumout\ = SUM(( !\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~14_cout\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~6\ = CARRY(( !\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_7~14_cout\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~5_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~6\);

\convert_binary|Mod5|auto_generated|divider|divider|op_7~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~33_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~6\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~34\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_7~6\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~33_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~34\);

\convert_binary|Mod5|auto_generated|divider|divider|op_7~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~29_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[40]~25_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~34\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~30\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[40]~25_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[40]~25_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_7~34\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~29_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~30\);

\convert_binary|Mod5|auto_generated|divider|divider|op_7~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~25_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[41]~20_combout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~30\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~26\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[41]~20_combout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[41]~20_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_7~30\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~25_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~26\);

\convert_binary|Mod5|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ & (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\))) ) + 
-- ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~26\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~22\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ & (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\))) ) + 
-- ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000010111010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_7~26\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~22\);

\convert_binary|Mod5|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_6~9_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_6~9_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010010101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~18\);

\convert_binary|Mod5|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~18\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010010101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_7~18\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~10\);

\convert_binary|Mod5|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~5_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_6~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~5_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~6_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ 
-- & \convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000000010000000100000001000000010000000100000001000000010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~6_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~10_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_6~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~10_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~11_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ 
-- & \convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000000010000000100000001000000010000000100000001000000010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~11_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[53]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[53]~15_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001011110010000000101111001000000010111100100000001011110010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[53]~15_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~19_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_6~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~19_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~21_combout\ = (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|StageOut[41]~20_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[41]~20_combout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~21_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[51]~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[51]~26_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[40]~25_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[40]~25_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[51]~26_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[50]~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[50]~30_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[50]~30_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_8~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~18_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~18_cout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_8~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~5_sumout\ = SUM(( !\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_8~18_cout\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~6\ = CARRY(( !\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_8~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_8~18_cout\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~5_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~6\);

\convert_binary|Mod5|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_8~6\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_8~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_8~6\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~10\);

\convert_binary|Mod5|auto_generated|divider|divider|op_8~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~37_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[50]~30_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~38\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[50]~30_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[50]~30_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~37_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~38\);

\convert_binary|Mod5|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[51]~26_combout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_8~38\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~34\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[51]~26_combout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_8~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[51]~26_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_8~38\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~34\);

\convert_binary|Mod5|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~21_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~19_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~21_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~19_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[52]~19_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~30\);

\convert_binary|Mod5|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[53]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~26\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[53]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[53]~15_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~26\);

\convert_binary|Mod5|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~11_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~10_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~11_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~10_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[54]~10_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[54]~11_combout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~22\);

\convert_binary|Mod5|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~6_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~6_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[55]~6_combout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~14\);

\convert_binary|Mod5|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_8~14\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~4_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_7~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~4_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~7_combout\ = (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~6_combout\) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[55]~5_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[55]~6_combout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~7_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[65]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[65]~12_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~11_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[54]~10_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[54]~10_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[54]~11_combout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[65]~12_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~14_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_7~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~14_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~16_combout\ = (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|StageOut[53]~15_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[53]~15_combout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~16_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[63]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[63]~22_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~21_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[52]~19_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[52]~19_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[63]~22_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~24\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~24_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_7~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~24_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~27\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~27_combout\ = (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|StageOut[51]~26_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[51]~26_combout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~27_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[61]~31\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[61]~31_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[50]~30_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[50]~30_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[61]~31_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[60]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[60]~1_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_7~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[60]~1_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_9~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~22_cout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_9~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~5_sumout\ = SUM(( !\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~22_cout\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~6\ = CARRY(( !\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_9~22_cout\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~5_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~6\);

\convert_binary|Mod5|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~6\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_9~6\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~10\);

\convert_binary|Mod5|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[60]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~10\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[60]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_9~10\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~14\);

\convert_binary|Mod5|auto_generated|divider|divider|op_9~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~41_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[61]~31_combout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~42\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[61]~31_combout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[61]~31_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~41_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~42\);

\convert_binary|Mod5|auto_generated|divider|divider|op_9~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~37_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~27_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~24_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~42\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~38\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~27_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~24_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[62]~24_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[62]~27_combout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_9~42\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~37_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~38\);

\convert_binary|Mod5|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[63]~22_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~38\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~34\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[63]~22_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[63]~22_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_9~38\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~34\);

\convert_binary|Mod5|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~16_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~16_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[64]~14_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~30\);

\convert_binary|Mod5|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[65]~12_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[65]~12_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[65]~12_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~26\);

\convert_binary|Mod5|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~7_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~7_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[66]~7_combout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~18\);

\convert_binary|Mod5|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[77]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[77]~3_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_8~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[77]~3_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[77]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[77]~8_combout\ = (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~7_combout\) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[66]~4_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[66]~7_combout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[77]~8_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[76]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[76]~9_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_8~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[76]~9_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[76]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[76]~13_combout\ = (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|StageOut[65]~12_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[65]~12_combout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[76]~13_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[75]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[75]~17_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~16_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[64]~14_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[64]~14_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[75]~17_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[74]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[74]~18_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_8~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[74]~18_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[74]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[74]~23_combout\ = (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|StageOut[63]~22_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[63]~22_combout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[74]~23_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[73]~28\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[73]~28_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~27_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[62]~24_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[62]~24_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[62]~27_combout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[73]~28_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[72]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[72]~29_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_8~37_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[72]~29_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[72]~32\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[72]~32_combout\ = (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|StageOut[61]~31_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[61]~31_combout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[72]~32_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[71]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[71]~2_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[60]~1_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[71]~2_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|StageOut[70]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[70]~0_combout\ = (!\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_8~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	combout => \convert_binary|Mod5|auto_generated|divider|divider|StageOut[70]~0_combout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_10~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~5_sumout\ = SUM(( !\convert_binary|Div4|auto_generated|divider|divider|op_10~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~26_cout\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~6\ = CARRY(( !\convert_binary|Div4|auto_generated|divider|divider|op_10~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_10~26_cout\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~5_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~6\);

\convert_binary|Mod5|auto_generated|divider|divider|op_10~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~9_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~6\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~10\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_10~6\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~9_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~10\);

\convert_binary|Mod5|auto_generated|divider|divider|op_10~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~13_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[70]~0_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~10\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~14\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[70]~0_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_10~10\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~13_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~14\);

\convert_binary|Mod5|auto_generated|divider|divider|op_10~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~17_sumout\ = SUM(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[71]~2_combout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~14\ ))
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~18\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[71]~2_combout\)) ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_10~14\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~17_sumout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~18\);

\convert_binary|Mod5|auto_generated|divider|divider|op_10~46\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~46_cout\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_9~41_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[72]~32_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[72]~29_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[72]~29_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[72]~32_combout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_10~18\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~46_cout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_10~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~42_cout\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_9~37_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[73]~28_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~46_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[73]~28_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_10~46_cout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~42_cout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_9~33_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[74]~23_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[74]~18_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~42_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[74]~18_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[74]~23_combout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_10~42_cout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod5|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[75]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[75]~17_combout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_9~25_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[76]~13_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[76]~9_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[76]~9_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|op_9~17_sumout\)))) # 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod5|auto_generated|divider|divider|StageOut[77]~8_combout\)) # (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[77]~3_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[77]~8_combout\,
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Mod5|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod5|auto_generated|divider|divider|op_10~22_cout\,
	sumout => \convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mux30~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux30~2_combout\ = ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~5_sumout\ & ( (\Operation[0]~input_o\ & (((!\convert_binary|Div4|auto_generated|divider|divider|op_10~1_sumout\) # 
-- (!\convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\)) # (\Operation[1]~input_o\))) ) ) # ( !\convert_binary|Mod5|auto_generated|divider|divider|op_10~5_sumout\ & ( (\Operation[0]~input_o\ & 
-- (((!\convert_binary|Div4|auto_generated|divider|divider|op_10~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\)) # (\Operation[1]~input_o\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000101010001010101010101000100010001010100010101010101010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\,
	combout => \convert_binary|Mux30~2_combout\);

\convert_binary|Mux30~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux30~0_combout\ = (!\Operation[0]~input_o\ & (\Operation[1]~input_o\ & !\sub|cout_sub_overflow~q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010000000100000001000000010000000100000001000000010000000100000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \sub|ALT_INV_cout_sub_overflow~q\,
	combout => \convert_binary|Mux30~0_combout\);

\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\ = SUM(( \sub|sum\(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ = CARRY(( \sub|sum\(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(6),
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~6\,
	shareout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~7\);

\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\ = SUM(( \sub|sum\(7) ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ = CARRY(( \sub|sum\(7) ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(7),
	cin => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~6\,
	sharein => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~7\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~10\,
	shareout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~11\);

\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\ = SUM(( !\sub|sum\(8) ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ = CARRY(( !\sub|sum\(8) ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ = SHARE(\sub|sum\(8))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(8),
	cin => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~10\,
	sharein => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~11\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~18\,
	shareout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~19\);

\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\ = SUM(( \sub|sum\(9) ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ = CARRY(( \sub|sum\(9) ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(9),
	cin => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~18\,
	sharein => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~19\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~14\,
	shareout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~15\);

\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~14\,
	sharein => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~15\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~22_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~22_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~23_combout\ = (\sub|sum\(9) & \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(9),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~23_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18_combout\ = (\sub|sum\(7) & \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(7),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18_combout\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_5~22_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\ = SUM(( \sub|sum\(5) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_5~22_cout\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~6\ = CARRY(( \sub|sum\(5) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_5~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(5),
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_5~22_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_5~6\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) 
-- # (\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\sub|sum\(6))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_5~6\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~10\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\sub|sum\(6))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_5~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(6),
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_5~6\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_5~10\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\ = SUM(( (\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18_combout\) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~10\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~14\ = CARRY(( (\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18_combout\) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_5~10\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_5~14\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~25_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\))) # (\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\sub|sum\(8))) ) + ( GND ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~14\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~26\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\sub|sum\(8))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_5~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(8),
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_5~14\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_5~25_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_5~26\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~18_cout\ = CARRY(( (\convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~23_combout\) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~22_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_5~26\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_5~18_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_5~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_5~18_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~19_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~19_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~20_combout\ = (\sub|sum\(8) & \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(8),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~20_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\))) # (\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\sub|sum\(7)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(7),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) # (\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\sub|sum\(6)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(6),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_6~26_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( \sub|sum\(4) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~26_cout\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~6\ = CARRY(( \sub|sum\(4) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(4),
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_6~26_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_6~6\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\sub|sum\(5))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~6\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\sub|sum\(5))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(5),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_6~10\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_6~14\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_6~18\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~22_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|op_5~25_sumout\)))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~20_combout\)) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~19_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_6~18\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_6~22_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_6~22_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~12_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~12_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~14_combout\ = (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~14_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\sub|sum\(5)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(5),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_7~26_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( \sub|sum\(3) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~26_cout\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~22\ = CARRY(( \sub|sum\(3) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(3),
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_7~26_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_7~22\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\sub|sum\(4))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\sub|sum\(4))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(4),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_7~10\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~10\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~14\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_7~14\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~14\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_7~14\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_7~18\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~6_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|op_6~17_sumout\)))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~14_combout\)) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~12_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_7~18\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_7~6_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_7~6_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~8_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~8_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~11_combout\ = (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~11_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\sub|sum\(4)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(4),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_8~26_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( \sub|sum\(2) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~26_cout\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~22\ = CARRY(( \sub|sum\(2) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(2),
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_8~26_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_8~22\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\sub|sum\(3))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~18\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\sub|sum\(3))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(3),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_8~18\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~18\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_8~18\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_8~10\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_8~14\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~6_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~11_combout\)) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_8~14\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_8~6_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_8~6_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~4_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~4_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~7_combout\ = (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~7_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\sub|sum\(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(3),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_9~26_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~21_sumout\ = SUM(( \sub|sum\(1) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~26_cout\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~22\ = CARRY(( \sub|sum\(1) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(1),
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_9~26_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_9~21_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_9~22\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\sub|sum\(2))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~22\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\sub|sum\(2))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(2),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_9~22\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_9~18\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~18\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_9~14\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_9~10\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~6_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~7_combout\)) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_9~10\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_9~6_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_9~6_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~0_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~0_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~3_combout\ = (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~3_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[36]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[36]~16_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[36]~16_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[35]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[35]~21_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\sub|sum\(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(2),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[35]~21_combout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( \sub|sum\(0) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(0),
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_10~26_cout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~18_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_9~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & (\sub|sum\(1))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(1),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_10~22_cout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_10~18_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~14_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_9~17_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[35]~21_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_10~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_10~18_cout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_10~14_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~10_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[36]~16_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_10~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_10~14_cout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_10~10_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~6_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|op_9~9_sumout\)))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~3_combout\)) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~0_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~10_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_10~10_cout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_10~6_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_10~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_10~6_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~22\,
	shareout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~23\);

\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~22\,
	sharein => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~23\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~18\,
	shareout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~19\);

\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ = CARRY(( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~18\,
	sharein => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~19\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~14\,
	shareout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~15\);

\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ = SUM(( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ = CARRY(( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~14\,
	sharein => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~15\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~10\,
	shareout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~11\);

\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ = CARRY(( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~10\,
	sharein => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~11\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~6\,
	shareout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~7\);

\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~6\,
	sharein => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~7\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~30_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~30_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~30_cout\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~26\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~30_cout\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~26\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\)) ) 
-- + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~26\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~22\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~26\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~22\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~22\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~22\ 
-- ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011000011111100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~22\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~18\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\) ) 
-- + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~18\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\) ) + ( 
-- GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~18\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~14\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\) ) + 
-- ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\) ) + ( 
-- VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~10\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\) ) + 
-- ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~6\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\) ) + ( 
-- VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~6\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~20_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~20_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~25_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~25_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~14_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~14_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~14_cout\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~6\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~14_cout\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~6\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~6\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~34\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~6\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~34\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~25_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~34\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~30\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~25_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[40]~25_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~34\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~30\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~20_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~30\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~26\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~20_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[41]~20_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~30\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~26\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\))) ) + 
-- ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~26\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~22\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\))) ) + 
-- ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000010111010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~26\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~22\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010010101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~18\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~18\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010010101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~18\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~10\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~5_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~5_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~6_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ 
-- & \convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000000010000000100000001000000010000000100000001000000010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~6_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~10_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~10_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~11_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ 
-- & \convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000000010000000100000001000000010000000100000001000000010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~11_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~15_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001011110010000000101111001000000010111100100000001011110010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~15_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~19_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~19_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~20_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[41]~20_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~26_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~25_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[40]~25_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~26_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~30_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~30_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~18_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~18_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~18_cout\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~6\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~18_cout\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~6\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~6\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~6\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~10\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~30_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~38\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~30_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[50]~30_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~38\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~26_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~38\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~34\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~26_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[51]~26_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~38\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~34\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~19_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~19_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~19_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~30\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~26\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[53]~15_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~26\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~11_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~10_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~11_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~10_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~10_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~11_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~22\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~6_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~6_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~6_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~14\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~14\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~4_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~4_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~7_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~6_combout\) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~5_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~6_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~7_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~12_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~11_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~10_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~10_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~11_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~12_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~14_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~14_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~15_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[53]~15_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~22_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~19_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~19_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~22_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~24\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~24_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~24_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~27\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~27_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~26_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[51]~26_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~27_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~31\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~31_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~30_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[50]~30_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~31_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~1_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~1_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~22_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~22_cout\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~6\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~22_cout\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~6\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~6\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~6\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~10\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~10\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~10\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~14\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~41_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~31_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~42\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~31_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[61]~31_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~41_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~42\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~37_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~27_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~24_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~42\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~38\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~27_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~24_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~24_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~27_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~42\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~37_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~38\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~22_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~38\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~34\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~22_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[63]~22_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~38\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~34\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~14_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~30\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~12_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~12_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[65]~12_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~26\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~7_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~7_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~7_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~18\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~3_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~3_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~8_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~7_combout\) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~4_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~7_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~8_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~9_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~9_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~13_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~12_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[65]~12_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~13_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[75]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[75]~17_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~14_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~14_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[75]~17_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~18_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~18_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~23_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~22_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[63]~22_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~23_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[73]~28\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[73]~28_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~27_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~24_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~24_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~27_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[73]~28_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~29_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~29_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~32\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~32_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~31_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[61]~31_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~32_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~2_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~1_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~2_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~0_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~0_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~5_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~26_cout\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~6\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~26_cout\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~5_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~6\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~6\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~10\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~6\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~10\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~13_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~0_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~10\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~14\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~0_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~10\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~13_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~14\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~2_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~14\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~18\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~2_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~14\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~18\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~46\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~46_cout\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_9~41_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~32_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~29_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[72]~29_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[72]~32_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~18\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~46_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~42_cout\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~37_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[73]~28_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~46_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[73]~28_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~46_cout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~42_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_9~33_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~23_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~18_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~42_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[74]~18_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[74]~23_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~42_cout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[75]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[75]~17_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_9~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~13_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~9_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[76]~9_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_9~17_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~8_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~3_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[77]~8_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~22_cout\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mux30~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux30~3_combout\ = (\convert_binary|Mux30~0_combout\ & ((!\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_10~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000010001010100000001000101010000000100010101000000010001010100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_Mux30~0_combout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\,
	combout => \convert_binary|Mux30~3_combout\);

\convert_binary|Mux30~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux30~1_combout\ = ( \convert_binary|Mux30~2_combout\ & ( \convert_binary|Mux30~3_combout\ ) ) # ( !\convert_binary|Mux30~2_combout\ & ( \convert_binary|Mux30~3_combout\ ) ) # ( \convert_binary|Mux30~2_combout\ & ( 
-- !\convert_binary|Mux30~3_combout\ & ( (!\Operation[1]~input_o\) # ((!\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|op_10~5_sumout\)) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000101111111010111011111111111111111111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[1]~input_o\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|ALT_INV_Mux30~2_combout\,
	dataf => \convert_binary|ALT_INV_Mux30~3_combout\,
	combout => \convert_binary|Mux30~1_combout\);

\convert_binary|int_data_2[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux30~1_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_2\(0));

\convert_binary|int_data_2[3]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_data_2[3]~0_combout\ = (!\Operation[0]~input_o\ & (\Operation[1]~input_o\ & !\sub|cout_sub_overflow~q\)) # (\Operation[0]~input_o\ & (!\Operation[1]~input_o\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0110010001100100011001000110010001100100011001000110010001100100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \sub|ALT_INV_cout_sub_overflow~q\,
	combout => \convert_binary|int_data_2[3]~0_combout\);

\convert_binary|Mux33~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux33~1_combout\ = (\Operation[0]~input_o\ & !\Operation[1]~input_o\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	combout => \convert_binary|Mux33~1_combout\);

\convert_binary|Mux29~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux29~0_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & 
-- (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	combout => \convert_binary|Mux29~0_combout\);

\convert_binary|Mux29~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux29~1_combout\ = ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\ & ( \convert_binary|Mux29~0_combout\ & ( !\Operation[0]~input_o\ ) ) ) # ( !\convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\ & ( 
-- \convert_binary|Mux29~0_combout\ & ( (!\Operation[0]~input_o\ & ((!\Operation[1]~input_o\) # ((\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\) # (\sub|cout_sub_overflow~q\)))) ) ) ) # ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\ & ( !\convert_binary|Mux29~0_combout\ & ( (!\Operation[0]~input_o\ & ((!\Operation[1]~input_o\) # ((!\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\) # 
-- (\sub|cout_sub_overflow~q\)))) ) ) ) # ( !\convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\ & ( !\convert_binary|Mux29~0_combout\ & ( (!\Operation[0]~input_o\ & ((!\Operation[1]~input_o\) # (\sub|cout_sub_overflow~q\))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000101010001010101010101000101010001010101010101010101010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \sub|ALT_INV_cout_sub_overflow~q\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\,
	dataf => \convert_binary|ALT_INV_Mux29~0_combout\,
	combout => \convert_binary|Mux29~1_combout\);

\convert_binary|Mux29~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux29~2_combout\ = ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\ & ( (!\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\))) ) ) # ( 
-- !\convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\ & ( (\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000101110111111110010111000000000001011101111111100101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\,
	combout => \convert_binary|Mux29~2_combout\);

\convert_binary|Mux29~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux29~3_combout\ = ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~9_sumout\ & ( (!\convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod5|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\))) ) ) # ( 
-- !\convert_binary|Mod5|auto_generated|divider|divider|op_10~9_sumout\ & ( (\convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod5|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div4|auto_generated|divider|divider|op_9~1_sumout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000101110111111110010111000000000001011101111111100101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\,
	combout => \convert_binary|Mux29~3_combout\);

\convert_binary|Mux29~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux29~4_combout\ = ( \convert_binary|Mux29~3_combout\ & ( (((!\convert_binary|int_data_2[3]~0_combout\ & \convert_binary|Mux29~2_combout\)) # (\convert_binary|Mux29~1_combout\)) # (\convert_binary|Mux33~1_combout\) ) ) # ( 
-- !\convert_binary|Mux29~3_combout\ & ( ((!\convert_binary|int_data_2[3]~0_combout\ & \convert_binary|Mux29~2_combout\)) # (\convert_binary|Mux29~1_combout\) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111110101111001111111011111100001111101011110011111110111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2[3]~0_combout\,
	datab => \convert_binary|ALT_INV_Mux33~1_combout\,
	datac => \convert_binary|ALT_INV_Mux29~1_combout\,
	datad => \convert_binary|ALT_INV_Mux29~2_combout\,
	datae => \convert_binary|ALT_INV_Mux29~3_combout\,
	combout => \convert_binary|Mux29~4_combout\);

\convert_binary|int_data_2[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux29~4_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_2\(1));

\convert_binary|Mux28~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux28~0_combout\ = ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~13_sumout\ & ( (!\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~0_combout\))) ) ) # ( 
-- !\convert_binary|Mod3|auto_generated|divider|divider|op_10~13_sumout\ & ( (\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~0_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111110001101100000000000110111111111100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\,
	combout => \convert_binary|Mux28~0_combout\);

\convert_binary|Mux28~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux28~1_combout\ = (\Operation[0]~input_o\ & (!\Operation[1]~input_o\ & (!\convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_10~13_sumout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000001000000000000000100000000000000010000000000000001000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\,
	combout => \convert_binary|Mux28~1_combout\);

\convert_binary|Mux28~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux28~2_combout\ = (\Operation[0]~input_o\ & (\Operation[1]~input_o\ & (!\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_10~13_sumout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000010000000000000001000000000000000100000000000000010000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\,
	combout => \convert_binary|Mux28~2_combout\);

\convert_binary|Mux28~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux28~3_combout\ = ( \convert_binary|Mod5|auto_generated|divider|divider|StageOut[70]~0_combout\ & ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~9_sumout\ & ( (\Operation[0]~input_o\ & (!\Operation[1]~input_o\ & 
-- \convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\)) ) ) ) # ( !\convert_binary|Mod5|auto_generated|divider|divider|StageOut[70]~0_combout\ & ( \convert_binary|Mod5|auto_generated|divider|divider|op_9~9_sumout\ & ( (\Operation[0]~input_o\ 
-- & (!\Operation[1]~input_o\ & (\convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\ & !\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\))) ) ) ) # ( 
-- \convert_binary|Mod5|auto_generated|divider|divider|StageOut[70]~0_combout\ & ( !\convert_binary|Mod5|auto_generated|divider|divider|op_9~9_sumout\ & ( (\Operation[0]~input_o\ & (!\Operation[1]~input_o\ & 
-- (\convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\ & \convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000010000000100000000000000010000000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datae => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\,
	dataf => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	combout => \convert_binary|Mux28~3_combout\);

\convert_binary|Mux28~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux28~4_combout\ = ( \convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~0_combout\ & ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\ & ( (\Operation[0]~input_o\ & (\Operation[1]~input_o\ & 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\)) ) ) ) # ( !\convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~0_combout\ & ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\ & ( (\Operation[0]~input_o\ 
-- & (\Operation[1]~input_o\ & (\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & !\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\))) ) ) ) # ( \convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~0_combout\ 
-- & ( !\convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\ & ( (\Operation[0]~input_o\ & (\Operation[1]~input_o\ & (\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000100000001000000000000000100000001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datae => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\,
	dataf => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	combout => \convert_binary|Mux28~4_combout\);

\convert_binary|Mux28~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux28~5_combout\ = ( \convert_binary|Mux28~3_combout\ & ( \convert_binary|Mux28~4_combout\ ) ) # ( !\convert_binary|Mux28~3_combout\ & ( \convert_binary|Mux28~4_combout\ ) ) # ( \convert_binary|Mux28~3_combout\ & ( 
-- !\convert_binary|Mux28~4_combout\ ) ) # ( !\convert_binary|Mux28~3_combout\ & ( !\convert_binary|Mux28~4_combout\ & ( (((\convert_binary|Mux30~0_combout\ & \convert_binary|Mux28~0_combout\)) # (\convert_binary|Mux28~2_combout\)) # 
-- (\convert_binary|Mux28~1_combout\) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001111111111111111111111111111111111111111111111111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_Mux30~0_combout\,
	datab => \convert_binary|ALT_INV_Mux28~0_combout\,
	datac => \convert_binary|ALT_INV_Mux28~1_combout\,
	datad => \convert_binary|ALT_INV_Mux28~2_combout\,
	datae => \convert_binary|ALT_INV_Mux28~3_combout\,
	dataf => \convert_binary|ALT_INV_Mux28~4_combout\,
	combout => \convert_binary|Mux28~5_combout\);

\convert_binary|int_data_2[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux28~5_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_2\(2));

\convert_binary|Mux27~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux27~0_combout\ = ( \convert_binary|Mod5|auto_generated|divider|divider|op_10~17_sumout\ & ( (!\convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod5|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[71]~2_combout\))) ) ) # ( 
-- !\convert_binary|Mod5|auto_generated|divider|divider|op_10~17_sumout\ & ( (\convert_binary|Mod5|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod5|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod5|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod5|auto_generated|divider|divider|StageOut[71]~2_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111110001101100000000000110111111111100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\,
	datac => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datad => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod5|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\,
	combout => \convert_binary|Mux27~0_combout\);

\convert_binary|Mux27~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux27~1_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\,
	combout => \convert_binary|Mux27~1_combout\);

\convert_binary|Mux27~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux27~2_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~2_combout\))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011000000000001101100000000000110110000000000011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	combout => \convert_binary|Mux27~2_combout\);

\convert_binary|Mux27~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux27~3_combout\ = ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\ & ( (!\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~2_combout\))) ) ) # ( 
-- !\convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\ & ( (\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~2_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111110001101100000000000110111111111100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\,
	combout => \convert_binary|Mux27~3_combout\);

\convert_binary|Mux27~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux27~4_combout\ = ( \convert_binary|Mux27~2_combout\ & ( \convert_binary|Mux27~3_combout\ & ( (!\Operation[0]~input_o\) # ((!\convert_binary|int_data_2[3]~0_combout\) # (\convert_binary|Mux27~0_combout\)) ) ) ) # ( 
-- !\convert_binary|Mux27~2_combout\ & ( \convert_binary|Mux27~3_combout\ & ( (!\convert_binary|int_data_2[3]~0_combout\) # ((!\Operation[0]~input_o\ & ((\convert_binary|Mux27~1_combout\))) # (\Operation[0]~input_o\ & (\convert_binary|Mux27~0_combout\))) ) ) 
-- ) # ( \convert_binary|Mux27~2_combout\ & ( !\convert_binary|Mux27~3_combout\ & ( (!\Operation[0]~input_o\) # ((\convert_binary|int_data_2[3]~0_combout\ & \convert_binary|Mux27~0_combout\)) ) ) ) # ( !\convert_binary|Mux27~2_combout\ & ( 
-- !\convert_binary|Mux27~3_combout\ & ( (!\Operation[0]~input_o\ & ((!\convert_binary|int_data_2[3]~0_combout\) # ((\convert_binary|Mux27~1_combout\)))) # (\Operation[0]~input_o\ & (\convert_binary|int_data_2[3]~0_combout\ & 
-- (\convert_binary|Mux27~0_combout\))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000100110101011101010111010101111001101111011111110111111101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \convert_binary|ALT_INV_int_data_2[3]~0_combout\,
	datac => \convert_binary|ALT_INV_Mux27~0_combout\,
	datad => \convert_binary|ALT_INV_Mux27~1_combout\,
	datae => \convert_binary|ALT_INV_Mux27~2_combout\,
	dataf => \convert_binary|ALT_INV_Mux27~3_combout\,
	combout => \convert_binary|Mux27~4_combout\);

\convert_binary|int_data_2[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux27~4_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_2\(3));

\seven_seg_display_2|Mux6~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux6~0_combout\ = (!\convert_binary|int_data_2\(1) & (!\convert_binary|int_data_2\(2) $ (((!\convert_binary|int_data_2\(0)) # (\convert_binary|int_data_2\(3)))))) # (\convert_binary|int_data_2\(1) & 
-- (((\convert_binary|int_data_2\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100000111111010010000011111101001000001111110100100000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux6~0_combout\);

\seven_seg_display_2|seven_seg[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_2|Mux6~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(0));

\seven_seg_display_2|Mux5~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux5~0_combout\ = (!\convert_binary|int_data_2\(2) & (((\convert_binary|int_data_2\(1) & \convert_binary|int_data_2\(3))))) # (\convert_binary|int_data_2\(2) & ((!\convert_binary|int_data_2\(0) $ (!\convert_binary|int_data_2\(1))) # 
-- (\convert_binary|int_data_2\(3))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011000111111000001100011111100000110001111110000011000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux5~0_combout\);

\seven_seg_display_2|seven_seg[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_2|Mux5~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(1));

\seven_seg_display_2|Mux4~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux4~0_combout\ = (!\convert_binary|int_data_2\(2) & (\convert_binary|int_data_2\(1) & ((!\convert_binary|int_data_2\(0)) # (\convert_binary|int_data_2\(3))))) # (\convert_binary|int_data_2\(2) & (((\convert_binary|int_data_2\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010000000111111001000000011111100100000001111110010000000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux4~0_combout\);

\seven_seg_display_2|seven_seg[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_2|Mux4~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(2));

\seven_seg_display_2|Mux3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux3~0_combout\ = (!\convert_binary|int_data_2\(3) & ((!\convert_binary|int_data_2\(0) & (!\convert_binary|int_data_2\(1) & \convert_binary|int_data_2\(2))) # (\convert_binary|int_data_2\(0) & (!\convert_binary|int_data_2\(1) $ 
-- (\convert_binary|int_data_2\(2))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100100000000010010010000000001001001000000000100100100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux3~0_combout\);

\seven_seg_display_2|seven_seg[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_2|Mux3~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(3));

\seven_seg_display_2|Mux2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux2~0_combout\ = (!\convert_binary|int_data_2\(1) & ((!\convert_binary|int_data_2\(2) & (\convert_binary|int_data_2\(0))) # (\convert_binary|int_data_2\(2) & ((!\convert_binary|int_data_2\(3)))))) # (\convert_binary|int_data_2\(1) & 
-- (\convert_binary|int_data_2\(0) & ((!\convert_binary|int_data_2\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101110101000000010111010100000001011101010000000101110101000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux2~0_combout\);

\seven_seg_display_2|seven_seg[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_2|Mux2~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(4));

\seven_seg_display_2|Mux1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux1~0_combout\ = (!\convert_binary|int_data_2\(3) & ((!\convert_binary|int_data_2\(0) & (\convert_binary|int_data_2\(1) & !\convert_binary|int_data_2\(2))) # (\convert_binary|int_data_2\(0) & ((!\convert_binary|int_data_2\(2)) # 
-- (\convert_binary|int_data_2\(1))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111000100000000011100010000000001110001000000000111000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux1~0_combout\);

\seven_seg_display_2|seven_seg[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_2|Mux1~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(5));

\seven_seg_display_2|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux0~0_combout\ = (!\convert_binary|int_data_2\(3) & ((!\convert_binary|int_data_2\(1) & ((!\convert_binary|int_data_2\(2)))) # (\convert_binary|int_data_2\(1) & (\convert_binary|int_data_2\(0) & \convert_binary|int_data_2\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1100000100000000110000010000000011000001000000001100000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux0~0_combout\);

\seven_seg_display_2|seven_seg[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_2|Mux0~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(6));

\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\ = SUM(( \sub|sum\(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ = CARRY(( \sub|sum\(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(6),
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~18\,
	shareout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~19\);

\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\ = SUM(( \sub|sum\(7) ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ = CARRY(( \sub|sum\(7) ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(7),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~18\,
	sharein => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~19\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~14\,
	shareout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~15\);

\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\ = SUM(( !\sub|sum\(8) ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ = CARRY(( !\sub|sum\(8) ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ = SHARE(\sub|sum\(8))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(8),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~14\,
	sharein => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~15\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~10\,
	shareout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~11\);

\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ = SUM(( \sub|sum\(9) ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ = CARRY(( \sub|sum\(9) ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(9),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~10\,
	sharein => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~11\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~2\,
	shareout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~3\);

\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~2\,
	sharein => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~3\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~7_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ & !\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~7_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~8_combout\ = (\sub|sum\(9) & \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(9),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~8_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~28\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~28_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~28_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~29_combout\ = (\sub|sum\(7) & \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(7),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~29_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~26_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\ = SUM(( \sub|sum\(5) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_5~26_cout\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~22\ = CARRY(( \sub|sum\(5) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_5~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(5),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_5~26_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~22\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\sub|sum\(6))) ) + ( GND ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~22\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~18\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\sub|sum\(6))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_5~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(6),
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_5~22\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~18\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\ = SUM(( (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~29_combout\) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~28_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~18\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~14\ = CARRY(( (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~29_combout\) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~28_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~28_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~29_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_5~18\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~14\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\))) 
-- # (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\sub|sum\(8))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_5~14\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~10\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\sub|sum\(8))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_5~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(8),
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_5~14\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~10\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\ = SUM(( (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~8_combout\) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~6\ = CARRY(( (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~8_combout\) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_5~10\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~6\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_5~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_5~6\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~15_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~15_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~16_combout\ = (\sub|sum\(8) & \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(8),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~16_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~23_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\sub|sum\(7)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(7),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~23_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~32\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~32_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\sub|sum\(6)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(6),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~32_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~30_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~30_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\ = SUM(( \sub|sum\(4) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~30_cout\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~26\ = CARRY(( \sub|sum\(4) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(4),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~30_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~26\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\sub|sum\(5))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~26\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~22\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\sub|sum\(5))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(5),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~26\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~22\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~32_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~22\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~32_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[30]~32_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~22\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~18\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~23_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~18\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~23_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~23_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~18\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~14\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~16_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~15_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~16_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~15_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~15_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~16_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~10\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~7_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~6\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~7_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001010110111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~6\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~6_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~6_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~9_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~8_combout\) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~7_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011100000111000001110000011100000111000001110000011100000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~9_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~17_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~16_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~15_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~15_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~16_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~17_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~22_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~22_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~23_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~23_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~33_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~32_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[30]~32_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~33_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~38_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\sub|sum\(5)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(5),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~38_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~14_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~14_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\ = SUM(( \sub|sum\(3) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~14_cout\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~6\ = CARRY(( \sub|sum\(3) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(3),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~14_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~6\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\sub|sum\(4))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~6\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~34\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\sub|sum\(4))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(4),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~6\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~34\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~38_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~34\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~30\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~38_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[40]~38_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~34\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~30\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~33_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~30\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~26\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~33_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[41]~33_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~30\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~26\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~22_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~26\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~22\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~22_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~22_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~26\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~22\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[43]~17_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~18\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~9_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~18\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~9_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~6_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~9_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~18\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~10\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~5_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~5_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~10_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~9_combout\) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~6_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~6_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~9_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~10_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~14_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~14_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~18_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~17_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[43]~17_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~18_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~25_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~22_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~22_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~25_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~31\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~31_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~31_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~34_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~33_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[41]~33_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~34_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~39\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~39_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~38_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[40]~38_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~39_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~43\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~43_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\sub|sum\(4)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(4),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~43_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~18_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~18_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\ = SUM(( \sub|sum\(2) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~18_cout\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~6\ = CARRY(( \sub|sum\(2) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(2),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~18_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~6\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\sub|sum\(3))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~6\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\sub|sum\(3))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(3),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~6\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~10\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~43_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~38\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~43_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[50]~43_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~38\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~39_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~38\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~34\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~39_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[51]~39_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~38\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~34\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~34_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~31_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~34_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~31_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~31_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~34_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~30\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~25_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~26\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~25_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[53]~25_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~26\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~18_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~18_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~14_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~18_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~22\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~10_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~10_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~10_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~14\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~14\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~4_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~4_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~11_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~10_combout\) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~5_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~10_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~11_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~19_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~18_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~14_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~14_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~18_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~19_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~21_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~21_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~26_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~25_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[53]~25_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~26_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~35\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~35_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~34_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~31_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~31_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~34_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~35_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~37_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~37_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~40\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~40_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~39_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[51]~39_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~40_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~44\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~44_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~43_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[50]~43_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~44_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~1_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\sub|sum\(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(3),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~1_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~22_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\ = SUM(( \sub|sum\(1) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~22_cout\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~6\ = CARRY(( \sub|sum\(1) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(1),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~22_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~6\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\sub|sum\(2))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~6\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\sub|sum\(2))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(2),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~6\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~10\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~10\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~14\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~41_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~44_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~42\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~44_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[61]~44_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~41_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~42\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~37_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~40_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~37_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~42\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~38\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~40_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~37_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~37_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~40_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~42\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~37_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~38\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~35_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~38\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~34\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~35_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[63]~35_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~38\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~34\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~26_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~21_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~26_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~21_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~21_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~26_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~30\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~19_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~19_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[65]~19_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~26\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~11_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~11_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~11_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~18\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~3_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~3_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~12_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~11_combout\) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~4_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~11_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~12_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~13_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~13_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~20_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~19_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[65]~19_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~20_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[75]~27\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[75]~27_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~26_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~21_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~21_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~26_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[75]~27_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~30_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~30_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~36\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~36_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~35_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[63]~35_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~36_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[73]~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[73]~41_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~40_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~37_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~37_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~40_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[73]~41_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~42_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~42_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~45\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~45_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~44_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[61]~44_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~45_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~2_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~1_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~2_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~0_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\sub|sum\(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(2),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~0_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~5_sumout\ = SUM(( \sub|sum\(0) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~26_cout\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~6\ = CARRY(( \sub|sum\(0) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \sub|ALT_INV_sum\(0),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~26_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~5_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~6\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\sub|sum\(1))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~6\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~10\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\sub|sum\(1))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(1),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~6\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~10\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~13_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~0_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~14\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~0_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~10\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~13_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~14\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~2_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~14\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~18\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~2_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~14\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~18\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~46\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~46_cout\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_9~41_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~45_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~42_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[72]~42_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[72]~45_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~18\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~46_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~42_cout\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~37_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[73]~41_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~46_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[73]~41_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~46_cout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~42_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_9~33_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~36_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~30_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~42_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[74]~30_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[74]~36_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~42_cout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[75]~27_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[75]~27_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_9~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~20_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~13_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[76]~20_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_9~17_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~12_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~3_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[77]~12_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~22_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mux26~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux26~0_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_10~5_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & 
-- (\sub|sum\(0)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(0),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\,
	combout => \convert_binary|Mux26~0_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\ = SUM(( \multiplication|R\(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ = CARRY(( \multiplication|R\(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(6),
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~18\,
	shareout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~19\);

\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\ = SUM(( \multiplication|R\(7) ) + ( \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ = CARRY(( \multiplication|R\(7) ) + ( \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(7),
	cin => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~18\,
	sharein => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~19\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~14\,
	shareout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~15\);

\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\ = SUM(( !\multiplication|R\(8) ) + ( \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ = CARRY(( !\multiplication|R\(8) ) + ( \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ = SHARE(\multiplication|R\(8))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(8),
	cin => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~14\,
	sharein => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~15\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~10\,
	shareout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~11\);

\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ = SUM(( \multiplication|R\(9) ) + ( \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ = CARRY(( \multiplication|R\(9) ) + ( \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(9),
	cin => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~10\,
	sharein => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~11\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~2\,
	shareout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~3\);

\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~2\,
	sharein => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~3\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~7_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ & !\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~7_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~8_combout\ = (\multiplication|R\(9) & \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(9),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~8_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~28\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~28_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~28_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~29_combout\ = (\multiplication|R\(7) & \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(7),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~29_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_5~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_5~26_cout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_5~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~21_sumout\ = SUM(( \multiplication|R\(5) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_5~26_cout\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~22\ = CARRY(( \multiplication|R\(5) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_5~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(5),
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_5~26_cout\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_5~21_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_5~22\);

\convert_binary|Mod4|auto_generated|divider|divider|op_5~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~17_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # (\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\multiplication|R\(6))) ) + ( GND ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~22\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~18\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\multiplication|R\(6))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_5~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(6),
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_5~22\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_5~17_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_5~18\);

\convert_binary|Mod4|auto_generated|divider|divider|op_5~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~13_sumout\ = SUM(( (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~29_combout\) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~28_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~18\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~14\ = CARRY(( (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~29_combout\) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~28_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[31]~28_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[31]~29_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_5~18\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_5~13_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_5~14\);

\convert_binary|Mod4|auto_generated|divider|divider|op_5~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~9_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\))) 
-- # (\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\multiplication|R\(8))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_5~14\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~10\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\multiplication|R\(8))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_5~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(8),
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_5~14\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_5~9_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_5~10\);

\convert_binary|Mod4|auto_generated|divider|divider|op_5~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~5_sumout\ = SUM(( (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~8_combout\) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~10\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~6\ = CARRY(( (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~8_combout\) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_5~10\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_5~5_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_5~6\);

\convert_binary|Mod4|auto_generated|divider|divider|op_5~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_5~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_5~6\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~15_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~15_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~16_combout\ = (\multiplication|R\(8) & \convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(8),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~16_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~23_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\))) # (\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\multiplication|R\(7)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(7),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~23_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[30]~32\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[30]~32_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # (\convert_binary|Mod4|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\multiplication|R\(6)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(6),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[30]~32_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_6~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~30_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~30_cout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_6~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~25_sumout\ = SUM(( \multiplication|R\(4) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_6~30_cout\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~26\ = CARRY(( \multiplication|R\(4) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_6~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(4),
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_6~30_cout\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~25_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~26\);

\convert_binary|Mod4|auto_generated|divider|divider|op_6~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~21_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (\multiplication|R\(5))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_6~26\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~22\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (\multiplication|R\(5))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_6~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(5),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_6~26\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~21_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~22\);

\convert_binary|Mod4|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[30]~32_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_6~22\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[30]~32_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_6~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[30]~32_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_6~22\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~18\);

\convert_binary|Mod4|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~23_combout\)) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_6~18\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~23_combout\)) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[31]~23_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_6~18\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~14\);

\convert_binary|Mod4|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~16_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~15_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~16_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~15_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[32]~15_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[32]~16_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~10\);

\convert_binary|Mod4|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_5~5_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~7_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~6\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_5~5_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~7_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001010110111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~6\);

\convert_binary|Mod4|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~6_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|op_5~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~6_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~9_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~8_combout\) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[33]~7_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011100000111000001110000011100000111000001110000011100000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~9_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[43]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[43]~17_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~16_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[32]~15_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[32]~15_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[32]~16_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[43]~17_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~22_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|op_5~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~22_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~24\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~24_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|StageOut[31]~23_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[31]~23_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~24_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[41]~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[41]~33_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[30]~32_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[30]~32_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[41]~33_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[40]~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[40]~38_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_5~1_sumout\ & (\multiplication|R\(5)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(5),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[40]~38_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_7~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~14_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~14_cout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_7~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~5_sumout\ = SUM(( \multiplication|R\(3) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_7~14_cout\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~6\ = CARRY(( \multiplication|R\(3) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_7~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(3),
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_7~14_cout\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~5_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~6\);

\convert_binary|Mod4|auto_generated|divider|divider|op_7~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~33_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (\multiplication|R\(4))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_7~6\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~34\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (\multiplication|R\(4))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_7~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(4),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_7~6\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~33_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~34\);

\convert_binary|Mod4|auto_generated|divider|divider|op_7~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~29_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[40]~38_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_7~34\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~30\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[40]~38_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_7~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[40]~38_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_7~34\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~29_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~30\);

\convert_binary|Mod4|auto_generated|divider|divider|op_7~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~25_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[41]~33_combout\)) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_7~30\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~26\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[41]~33_combout\)) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_7~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[41]~33_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_7~30\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~25_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~26\);

\convert_binary|Mod4|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~24_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~22_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~26\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~22\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~24_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~22_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[42]~22_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_7~26\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~22\);

\convert_binary|Mod4|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[43]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[43]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[43]~17_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~18\);

\convert_binary|Mod4|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~9_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~18\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~9_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[44]~6_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[44]~9_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_7~18\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~10\);

\convert_binary|Mod4|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~5_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|op_6~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~5_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~10_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~9_combout\) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[44]~6_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[44]~6_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[44]~9_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~10_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~14_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|op_6~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~14_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~18_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|StageOut[43]~17_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[43]~17_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~18_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[53]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[53]~25_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~24_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[42]~22_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[42]~22_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[53]~25_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~31\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~31_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|op_6~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~31_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~34_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|StageOut[41]~33_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[41]~33_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~34_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[51]~39\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[51]~39_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[40]~38_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[40]~38_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[51]~39_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[50]~43\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[50]~43_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_6~1_sumout\ & (\multiplication|R\(4)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(4),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[50]~43_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_8~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~18_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~18_cout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_8~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~5_sumout\ = SUM(( \multiplication|R\(2) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_8~18_cout\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~6\ = CARRY(( \multiplication|R\(2) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_8~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(2),
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_8~18_cout\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~5_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~6\);

\convert_binary|Mod4|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (\multiplication|R\(3))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_8~6\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (\multiplication|R\(3))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_8~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(3),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_8~6\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~10\);

\convert_binary|Mod4|auto_generated|divider|divider|op_8~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~37_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[50]~43_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~38\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[50]~43_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[50]~43_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~37_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~38\);

\convert_binary|Mod4|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[51]~39_combout\)) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_8~38\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~34\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[51]~39_combout\)) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_8~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[51]~39_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_8~38\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~34\);

\convert_binary|Mod4|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~34_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~31_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~34_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~31_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[52]~31_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[52]~34_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~30\);

\convert_binary|Mod4|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[53]~25_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~26\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[53]~25_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[53]~25_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~26\);

\convert_binary|Mod4|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~18_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~18_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[54]~14_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[54]~18_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~22\);

\convert_binary|Mod4|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~10_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~10_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[55]~10_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~14\);

\convert_binary|Mod4|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_8~14\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~4_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|op_7~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~4_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~11_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~10_combout\) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[55]~5_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[55]~10_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~11_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[65]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[65]~19_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~18_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[54]~14_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[54]~14_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[54]~18_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[65]~19_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~21_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|op_7~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~21_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~26_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|StageOut[53]~25_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[53]~25_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~26_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[63]~35\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[63]~35_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~34_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[52]~31_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[52]~31_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[52]~34_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[63]~35_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~37_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|op_7~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~37_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~40\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~40_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|StageOut[51]~39_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[51]~39_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~40_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[61]~44\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[61]~44_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[50]~43_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[50]~43_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[61]~44_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[60]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[60]~1_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_7~1_sumout\ & (\multiplication|R\(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(3),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[60]~1_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_9~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~22_cout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_9~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~5_sumout\ = SUM(( \multiplication|R\(1) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~22_cout\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~6\ = CARRY(( \multiplication|R\(1) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(1),
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_9~22_cout\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~5_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~6\);

\convert_binary|Mod4|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (\multiplication|R\(2))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~6\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (\multiplication|R\(2))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(2),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_9~6\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~10\);

\convert_binary|Mod4|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[60]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~10\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[60]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_9~10\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~14\);

\convert_binary|Mod4|auto_generated|divider|divider|op_9~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~41_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[61]~44_combout\)) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~42\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[61]~44_combout\)) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[61]~44_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~41_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~42\);

\convert_binary|Mod4|auto_generated|divider|divider|op_9~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~37_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~40_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~37_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~42\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~38\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~40_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~37_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[62]~37_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[62]~40_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_9~42\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~37_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~38\);

\convert_binary|Mod4|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[63]~35_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~38\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~34\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[63]~35_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[63]~35_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_9~38\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~34\);

\convert_binary|Mod4|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~26_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~21_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~26_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~21_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[64]~21_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[64]~26_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~30\);

\convert_binary|Mod4|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[65]~19_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[65]~19_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[65]~19_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~26\);

\convert_binary|Mod4|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~11_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~11_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[66]~11_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~18\);

\convert_binary|Mod4|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[77]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[77]~3_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|op_8~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[77]~3_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[77]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[77]~12_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~11_combout\) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[66]~4_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[66]~11_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[77]~12_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[76]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[76]~13_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|op_8~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[76]~13_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[76]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[76]~20_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|StageOut[65]~19_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[65]~19_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[76]~20_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[75]~27\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[75]~27_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~26_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[64]~21_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[64]~21_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[64]~26_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[75]~27_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[74]~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[74]~30_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|op_8~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[74]~30_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[74]~36\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[74]~36_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|StageOut[63]~35_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[63]~35_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[74]~36_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[73]~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[73]~41_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~40_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[62]~37_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[62]~37_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[62]~40_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[73]~41_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[72]~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[72]~42_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|op_8~37_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[72]~42_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[72]~45\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[72]~45_combout\ = (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod4|auto_generated|divider|divider|StageOut[61]~44_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[61]~44_combout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[72]~45_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[71]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[71]~2_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[60]~1_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[71]~2_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|StageOut[70]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|StageOut[70]~0_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_8~1_sumout\ & (\multiplication|R\(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(2),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	combout => \convert_binary|Mod4|auto_generated|divider|divider|StageOut[70]~0_combout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_10~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~5_sumout\ = SUM(( \multiplication|R\(0) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~26_cout\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~6\ = CARRY(( \multiplication|R\(0) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication|ALT_INV_R\(0),
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_10~26_cout\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~5_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~6\);

\convert_binary|Mod4|auto_generated|divider|divider|op_10~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~9_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\multiplication|R\(1))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~6\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~10\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\multiplication|R\(1))) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(1),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_10~6\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~9_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~10\);

\convert_binary|Mod4|auto_generated|divider|divider|op_10~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~13_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[70]~0_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~10\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~14\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[70]~0_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_10~10\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~13_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~14\);

\convert_binary|Mod4|auto_generated|divider|divider|op_10~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~17_sumout\ = SUM(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[71]~2_combout\)) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~14\ ))
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~18\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[71]~2_combout\)) ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_10~14\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~17_sumout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~18\);

\convert_binary|Mod4|auto_generated|divider|divider|op_10~46\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~46_cout\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_9~41_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[72]~45_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[72]~42_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[72]~42_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[72]~45_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_10~18\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~46_cout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_10~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~42_cout\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~37_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[73]~41_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~46_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[73]~41_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_10~46_cout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~42_cout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_9~33_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[74]~36_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[74]~30_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~42_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[74]~30_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[74]~36_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_10~42_cout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[75]~27_combout\)) ) + ( VCC ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[75]~27_combout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_9~25_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[76]~20_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[76]~13_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[76]~20_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|op_9~17_sumout\)))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod4|auto_generated|divider|divider|StageOut[77]~12_combout\)) # (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[77]~3_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[77]~12_combout\,
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Mod4|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod4|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod4|auto_generated|divider|divider|op_10~22_cout\,
	sumout => \convert_binary|Mod4|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mux26~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux26~1_combout\ = (!\convert_binary|Mod4|auto_generated|divider|divider|op_10~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_10~5_sumout\))) # (\convert_binary|Mod4|auto_generated|divider|divider|op_10~1_sumout\ & 
-- (\multiplication|R\(0)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(0),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\,
	combout => \convert_binary|Mux26~1_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\ = SUM(( \add|sum\(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ = CARRY(( \add|sum\(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(6),
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~18\,
	shareout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~19\);

\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\ = SUM(( \add|sum\(7) ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ = CARRY(( \add|sum\(7) ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(7),
	cin => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~18\,
	sharein => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~19\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~14\,
	shareout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~15\);

\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\ = SUM(( !\add|sum\(8) ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ = CARRY(( !\add|sum\(8) ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ = SHARE(\add|sum\(8))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(8),
	cin => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~14\,
	sharein => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~15\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~10\,
	shareout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~11\);

\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ = SUM(( \add|sum\(9) ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ = CARRY(( \add|sum\(9) ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(9),
	cin => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~10\,
	sharein => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~11\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~2\,
	shareout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~3\);

\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~2\,
	sharein => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~3\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~7_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ & !\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~7_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~8_combout\ = (\add|sum\(9) & \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(9),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~8_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~28\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~28_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~28_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~29_combout\ = (\add|sum\(7) & \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(7),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~29_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~26_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\ = SUM(( \add|sum\(5) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_5~26_cout\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~22\ = CARRY(( \add|sum\(5) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_5~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(5),
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_5~26_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~22\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\add|sum\(6))) ) + ( GND ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~22\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~18\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\add|sum\(6))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_5~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(6),
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_5~22\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~18\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\ = SUM(( (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~29_combout\) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~28_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~18\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~14\ = CARRY(( (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~29_combout\) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~28_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~28_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~29_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_5~18\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~14\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\))) 
-- # (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\add|sum\(8))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_5~14\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~10\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\add|sum\(8))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_5~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(8),
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_5~14\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~10\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\ = SUM(( (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~8_combout\) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~6\ = CARRY(( (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~8_combout\) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_5~10\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~6\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_5~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_5~6\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~15_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~15_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~16_combout\ = (\add|sum\(8) & \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(8),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~16_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~23_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\add|sum\(7)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(7),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~23_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~32\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~32_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\add|sum\(6)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(6),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~32_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~30_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~30_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\ = SUM(( \add|sum\(4) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~30_cout\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~26\ = CARRY(( \add|sum\(4) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(4),
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~30_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~26\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\add|sum\(5))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~26\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~22\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\add|sum\(5))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(5),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~26\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~22\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~32_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~22\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~32_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[30]~32_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~22\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~18\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~23_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~18\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~23_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~23_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~18\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~14\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~16_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~15_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~16_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~15_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~15_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~16_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~10\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~7_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~6\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~7_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001010110111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~6\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~6_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~6_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~9_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~8_combout\) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~7_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011100000111000001110000011100000111000001110000011100000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~7_combout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~8_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~9_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~17_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~16_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~15_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~15_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~16_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~17_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~22_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~22_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~23_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~23_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~33_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~32_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[30]~32_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~33_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~38_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\add|sum\(5)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(5),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~38_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~14_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~14_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\ = SUM(( \add|sum\(3) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~14_cout\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~6\ = CARRY(( \add|sum\(3) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(3),
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~14_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~6\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\add|sum\(4))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~6\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~34\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\add|sum\(4))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(4),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~6\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~34\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~38_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~34\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~30\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~38_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[40]~38_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~34\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~30\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~33_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~30\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~26\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~33_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[41]~33_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~30\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~26\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~22_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~26\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~22\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~22_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~22_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~26\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~22\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[43]~17_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~18\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~9_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~18\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~9_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~6_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~9_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~18\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~10\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~5_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~5_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~10_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~9_combout\) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~6_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~6_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~9_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~10_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~14_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~14_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~18_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~17_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[43]~17_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~18_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~25_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~22_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~22_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~25_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~31\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~31_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~31_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~34_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~33_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[41]~33_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~34_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~39\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~39_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~38_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[40]~38_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~39_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~43\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~43_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\add|sum\(4)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(4),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~43_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~18_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~18_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\ = SUM(( \add|sum\(2) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~18_cout\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~6\ = CARRY(( \add|sum\(2) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(2),
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~18_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~6\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\add|sum\(3))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~6\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\add|sum\(3))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(3),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~6\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~10\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~43_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~38\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~43_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[50]~43_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~38\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~39_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~38\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~34\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~39_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[51]~39_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~38\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~34\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~34_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~31_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~34_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~31_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~31_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~34_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~30\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~25_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~26\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~25_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[53]~25_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~26\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~18_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~18_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~14_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~18_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~22\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~10_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~10_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~10_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~14\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~14\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~4_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~4_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~11_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~10_combout\) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~5_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~5_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~10_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~11_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~19_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~18_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~14_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~14_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~18_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~19_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~21_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~21_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~26_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~25_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[53]~25_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~26_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~35\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~35_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~34_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~31_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~31_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~34_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~35_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~37_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~37_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~40\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~40_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~39_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[51]~39_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~40_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~44\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~44_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~43_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[50]~43_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~44_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~1_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\add|sum\(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(3),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~1_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~22_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\ = SUM(( \add|sum\(1) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~22_cout\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~6\ = CARRY(( \add|sum\(1) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(1),
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~22_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~6\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\add|sum\(2))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~6\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\add|sum\(2))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(2),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~6\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~10\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~10\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~14\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~41_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~44_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~42\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~44_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[61]~44_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~41_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~42\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~37_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~40_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~37_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~42\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~38\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~40_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~37_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~37_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~40_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~42\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~37_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~38\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~35_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~38\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~34\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~35_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[63]~35_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~38\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~34\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~26_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~21_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~26_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~21_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~21_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~26_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~30\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~19_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~19_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[65]~19_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~26\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~11_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~11_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~11_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~18\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~3_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~3_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~12_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~11_combout\) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~4_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~4_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~11_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~12_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~13_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~13_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~20_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~19_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[65]~19_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~20_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[75]~27\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[75]~27_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~26_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~21_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~21_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~26_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[75]~27_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~30_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~30_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~36\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~36_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~35_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[63]~35_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~36_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[73]~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[73]~41_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~40_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~37_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~37_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~40_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[73]~41_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~42_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~42_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~45\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~45_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~44_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[61]~44_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~45_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~2_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~1_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[60]~1_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~2_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~0_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\add|sum\(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(2),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~0_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~5_sumout\ = SUM(( \add|sum\(0) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~26_cout\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~6\ = CARRY(( \add|sum\(0) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \add|ALT_INV_sum\(0),
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~26_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~5_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~6\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\add|sum\(1))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~6\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~10\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\add|sum\(1))) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(1),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~6\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~10\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~13_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~0_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~14\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~0_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~10\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~13_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~14\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~2_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~14\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~18\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~2_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~14\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~18\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~46\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~46_cout\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_9~41_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~45_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~42_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[72]~42_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[72]~45_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~18\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~46_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~42_cout\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~37_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[73]~41_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~46_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[73]~41_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~46_cout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~42_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_9~33_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~36_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~30_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~42_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[74]~30_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[74]~36_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~42_cout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[75]~27_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[75]~27_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_9~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~20_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~13_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[76]~13_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[76]~20_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_9~17_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~12_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~3_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[77]~3_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[77]~12_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~22_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mux26~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux26~2_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_10~5_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ & 
-- (\add|sum\(0)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(0),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\,
	combout => \convert_binary|Mux26~2_combout\);

\convert_binary|Mux26~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux26~3_combout\ = ( \convert_binary|Mux26~1_combout\ & ( \convert_binary|Mux26~2_combout\ & ( ((\Operation[1]~input_o\ & (!\sub|cout_sub_overflow~q\ & \convert_binary|Mux26~0_combout\))) # (\Operation[0]~input_o\) ) ) ) # ( 
-- !\convert_binary|Mux26~1_combout\ & ( \convert_binary|Mux26~2_combout\ & ( (\Operation[1]~input_o\ & (((!\sub|cout_sub_overflow~q\ & \convert_binary|Mux26~0_combout\)) # (\Operation[0]~input_o\))) ) ) ) # ( \convert_binary|Mux26~1_combout\ & ( 
-- !\convert_binary|Mux26~2_combout\ & ( (!\Operation[0]~input_o\ & (\Operation[1]~input_o\ & (!\sub|cout_sub_overflow~q\ & \convert_binary|Mux26~0_combout\))) # (\Operation[0]~input_o\ & (!\Operation[1]~input_o\)) ) ) ) # ( !\convert_binary|Mux26~1_combout\ 
-- & ( !\convert_binary|Mux26~2_combout\ & ( (!\Operation[0]~input_o\ & (\Operation[1]~input_o\ & (!\sub|cout_sub_overflow~q\ & \convert_binary|Mux26~0_combout\))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000100000010001000110010000010001001100010101010101110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \sub|ALT_INV_cout_sub_overflow~q\,
	datad => \convert_binary|ALT_INV_Mux26~0_combout\,
	datae => \convert_binary|ALT_INV_Mux26~1_combout\,
	dataf => \convert_binary|ALT_INV_Mux26~2_combout\,
	combout => \convert_binary|Mux26~3_combout\);

\convert_binary|int_data_3[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux26~3_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_3\(0));

\convert_binary|Mux25~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux25~0_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & 
-- (\sub|sum\(1)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \sub|ALT_INV_sum\(1),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	combout => \convert_binary|Mux25~0_combout\);

\convert_binary|Mux25~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux25~1_combout\ = ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\ & ( \convert_binary|Mux25~0_combout\ & ( !\Operation[0]~input_o\ ) ) ) # ( !\convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\ & ( 
-- \convert_binary|Mux25~0_combout\ & ( (!\Operation[0]~input_o\ & ((!\Operation[1]~input_o\) # ((\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\) # (\sub|cout_sub_overflow~q\)))) ) ) ) # ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\ & ( !\convert_binary|Mux25~0_combout\ & ( (!\Operation[0]~input_o\ & ((!\Operation[1]~input_o\) # ((!\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\) # 
-- (\sub|cout_sub_overflow~q\)))) ) ) ) # ( !\convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\ & ( !\convert_binary|Mux25~0_combout\ & ( (!\Operation[0]~input_o\ & ((!\Operation[1]~input_o\) # (\sub|cout_sub_overflow~q\))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000101010001010101010101000101010001010101010101010101010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \sub|ALT_INV_cout_sub_overflow~q\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\,
	dataf => \convert_binary|ALT_INV_Mux25~0_combout\,
	combout => \convert_binary|Mux25~1_combout\);

\convert_binary|Mux25~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux25~2_combout\ = ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\ & ( (!\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\add|sum\(1)))) ) ) # ( !\convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\ & ( 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\add|sum\(1))))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011101111111110001110100000000000111011111111100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \add|ALT_INV_sum\(1),
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\,
	combout => \convert_binary|Mux25~2_combout\);

\convert_binary|Mux25~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux25~3_combout\ = ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~9_sumout\ & ( (!\convert_binary|Mod4|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\multiplication|R\(1)))) ) ) # ( !\convert_binary|Mod4|auto_generated|divider|divider|op_10~9_sumout\ & ( 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\multiplication|R\(1))))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011101111111110001110100000000000111011111111100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication|ALT_INV_R\(1),
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\,
	combout => \convert_binary|Mux25~3_combout\);

\convert_binary|Mux25~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux25~4_combout\ = ( \convert_binary|Mux25~3_combout\ & ( (((!\convert_binary|int_data_2[3]~0_combout\ & \convert_binary|Mux25~2_combout\)) # (\convert_binary|Mux25~1_combout\)) # (\convert_binary|Mux33~1_combout\) ) ) # ( 
-- !\convert_binary|Mux25~3_combout\ & ( ((!\convert_binary|int_data_2[3]~0_combout\ & \convert_binary|Mux25~2_combout\)) # (\convert_binary|Mux25~1_combout\) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111110101111001111111011111100001111101011110011111110111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2[3]~0_combout\,
	datab => \convert_binary|ALT_INV_Mux33~1_combout\,
	datac => \convert_binary|ALT_INV_Mux25~1_combout\,
	datad => \convert_binary|ALT_INV_Mux25~2_combout\,
	datae => \convert_binary|ALT_INV_Mux25~3_combout\,
	combout => \convert_binary|Mux25~4_combout\);

\convert_binary|int_data_3[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux25~4_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_3\(1));

\convert_binary|Mux24~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux24~0_combout\ = ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~13_sumout\ & ( (!\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~0_combout\))) ) ) # ( 
-- !\convert_binary|Mod2|auto_generated|divider|divider|op_10~13_sumout\ & ( (\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~0_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111110001101100000000000110111111111100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\,
	combout => \convert_binary|Mux24~0_combout\);

\convert_binary|Mux24~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux24~1_combout\ = ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~13_sumout\ & ( (!\convert_binary|Mod4|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[70]~0_combout\))) ) ) # ( 
-- !\convert_binary|Mod4|auto_generated|divider|divider|op_10~13_sumout\ & ( (\convert_binary|Mod4|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[70]~0_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111110001101100000000000110111111111100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\,
	combout => \convert_binary|Mux24~1_combout\);

\convert_binary|Mux24~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux24~2_combout\ = ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~13_sumout\ & ( (!\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~0_combout\))) ) ) # ( 
-- !\convert_binary|Mod0|auto_generated|divider|divider|op_10~13_sumout\ & ( (\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~0_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111110001101100000000000110111111111100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[70]~0_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\,
	combout => \convert_binary|Mux24~2_combout\);

\convert_binary|Mux24~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux24~3_combout\ = ( \convert_binary|Mux24~1_combout\ & ( \convert_binary|Mux24~2_combout\ & ( ((\Operation[1]~input_o\ & (!\sub|cout_sub_overflow~q\ & \convert_binary|Mux24~0_combout\))) # (\Operation[0]~input_o\) ) ) ) # ( 
-- !\convert_binary|Mux24~1_combout\ & ( \convert_binary|Mux24~2_combout\ & ( (\Operation[1]~input_o\ & (((!\sub|cout_sub_overflow~q\ & \convert_binary|Mux24~0_combout\)) # (\Operation[0]~input_o\))) ) ) ) # ( \convert_binary|Mux24~1_combout\ & ( 
-- !\convert_binary|Mux24~2_combout\ & ( (!\Operation[0]~input_o\ & (\Operation[1]~input_o\ & (!\sub|cout_sub_overflow~q\ & \convert_binary|Mux24~0_combout\))) # (\Operation[0]~input_o\ & (!\Operation[1]~input_o\)) ) ) ) # ( !\convert_binary|Mux24~1_combout\ 
-- & ( !\convert_binary|Mux24~2_combout\ & ( (!\Operation[0]~input_o\ & (\Operation[1]~input_o\ & (!\sub|cout_sub_overflow~q\ & \convert_binary|Mux24~0_combout\))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000100000010001000110010000010001001100010101010101110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \sub|ALT_INV_cout_sub_overflow~q\,
	datad => \convert_binary|ALT_INV_Mux24~0_combout\,
	datae => \convert_binary|ALT_INV_Mux24~1_combout\,
	dataf => \convert_binary|ALT_INV_Mux24~2_combout\,
	combout => \convert_binary|Mux24~3_combout\);

\convert_binary|int_data_3[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux24~3_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_3\(2));

\convert_binary|Mux23~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux23~0_combout\ = ( \convert_binary|Mod4|auto_generated|divider|divider|op_10~17_sumout\ & ( (!\convert_binary|Mod4|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[71]~2_combout\))) ) ) # ( 
-- !\convert_binary|Mod4|auto_generated|divider|divider|op_10~17_sumout\ & ( (\convert_binary|Mod4|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod4|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod4|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod4|auto_generated|divider|divider|StageOut[71]~2_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111110001101100000000000110111111111100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\,
	datac => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datad => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod4|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\,
	combout => \convert_binary|Mux23~0_combout\);

\convert_binary|Mux23~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux23~1_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\,
	combout => \convert_binary|Mux23~1_combout\);

\convert_binary|Mux23~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux23~2_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~2_combout\))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011000000000001101100000000000110110000000000011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	combout => \convert_binary|Mux23~2_combout\);

\convert_binary|Mux23~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux23~3_combout\ = ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\ & ( (!\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~2_combout\))) ) ) # ( 
-- !\convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\ & ( (\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~2_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111110001101100000000000110111111111100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[71]~2_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\,
	combout => \convert_binary|Mux23~3_combout\);

\convert_binary|Mux23~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux23~4_combout\ = ( \convert_binary|Mux23~2_combout\ & ( \convert_binary|Mux23~3_combout\ & ( (!\Operation[0]~input_o\) # ((!\convert_binary|int_data_2[3]~0_combout\) # (\convert_binary|Mux23~0_combout\)) ) ) ) # ( 
-- !\convert_binary|Mux23~2_combout\ & ( \convert_binary|Mux23~3_combout\ & ( (!\convert_binary|int_data_2[3]~0_combout\) # ((!\Operation[0]~input_o\ & ((\convert_binary|Mux23~1_combout\))) # (\Operation[0]~input_o\ & (\convert_binary|Mux23~0_combout\))) ) ) 
-- ) # ( \convert_binary|Mux23~2_combout\ & ( !\convert_binary|Mux23~3_combout\ & ( (!\Operation[0]~input_o\) # ((\convert_binary|int_data_2[3]~0_combout\ & \convert_binary|Mux23~0_combout\)) ) ) ) # ( !\convert_binary|Mux23~2_combout\ & ( 
-- !\convert_binary|Mux23~3_combout\ & ( (!\Operation[0]~input_o\ & ((!\convert_binary|int_data_2[3]~0_combout\) # ((\convert_binary|Mux23~1_combout\)))) # (\Operation[0]~input_o\ & (\convert_binary|int_data_2[3]~0_combout\ & 
-- (\convert_binary|Mux23~0_combout\))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000100110101011101010111010101111001101111011111110111111101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \convert_binary|ALT_INV_int_data_2[3]~0_combout\,
	datac => \convert_binary|ALT_INV_Mux23~0_combout\,
	datad => \convert_binary|ALT_INV_Mux23~1_combout\,
	datae => \convert_binary|ALT_INV_Mux23~2_combout\,
	dataf => \convert_binary|ALT_INV_Mux23~3_combout\,
	combout => \convert_binary|Mux23~4_combout\);

\convert_binary|int_data_3[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux23~4_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_3\(3));

\seven_seg_display_3|Mux6~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux6~0_combout\ = (!\convert_binary|int_data_3\(1) & (!\convert_binary|int_data_3\(2) $ (((!\convert_binary|int_data_3\(0)) # (\convert_binary|int_data_3\(3)))))) # (\convert_binary|int_data_3\(1) & 
-- (((\convert_binary|int_data_3\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100000111111010010000011111101001000001111110100100000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux6~0_combout\);

\seven_seg_display_3|seven_seg[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_3|Mux6~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(0));

\seven_seg_display_3|Mux5~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux5~0_combout\ = (!\convert_binary|int_data_3\(2) & (((\convert_binary|int_data_3\(1) & \convert_binary|int_data_3\(3))))) # (\convert_binary|int_data_3\(2) & ((!\convert_binary|int_data_3\(0) $ (!\convert_binary|int_data_3\(1))) # 
-- (\convert_binary|int_data_3\(3))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011000111111000001100011111100000110001111110000011000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux5~0_combout\);

\seven_seg_display_3|seven_seg[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_3|Mux5~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(1));

\seven_seg_display_3|Mux4~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux4~0_combout\ = (!\convert_binary|int_data_3\(2) & (\convert_binary|int_data_3\(1) & ((!\convert_binary|int_data_3\(0)) # (\convert_binary|int_data_3\(3))))) # (\convert_binary|int_data_3\(2) & (((\convert_binary|int_data_3\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010000000111111001000000011111100100000001111110010000000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux4~0_combout\);

\seven_seg_display_3|seven_seg[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_3|Mux4~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(2));

\seven_seg_display_3|Mux3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux3~0_combout\ = (!\convert_binary|int_data_3\(3) & ((!\convert_binary|int_data_3\(0) & (!\convert_binary|int_data_3\(1) & \convert_binary|int_data_3\(2))) # (\convert_binary|int_data_3\(0) & (!\convert_binary|int_data_3\(1) $ 
-- (\convert_binary|int_data_3\(2))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100100000000010010010000000001001001000000000100100100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux3~0_combout\);

\seven_seg_display_3|seven_seg[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_3|Mux3~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(3));

\seven_seg_display_3|Mux2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux2~0_combout\ = (!\convert_binary|int_data_3\(1) & ((!\convert_binary|int_data_3\(2) & (\convert_binary|int_data_3\(0))) # (\convert_binary|int_data_3\(2) & ((!\convert_binary|int_data_3\(3)))))) # (\convert_binary|int_data_3\(1) & 
-- (\convert_binary|int_data_3\(0) & ((!\convert_binary|int_data_3\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101110101000000010111010100000001011101010000000101110101000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux2~0_combout\);

\seven_seg_display_3|seven_seg[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_3|Mux2~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(4));

\seven_seg_display_3|Mux1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux1~0_combout\ = (!\convert_binary|int_data_3\(3) & ((!\convert_binary|int_data_3\(0) & (\convert_binary|int_data_3\(1) & !\convert_binary|int_data_3\(2))) # (\convert_binary|int_data_3\(0) & ((!\convert_binary|int_data_3\(2)) # 
-- (\convert_binary|int_data_3\(1))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111000100000000011100010000000001110001000000000111000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux1~0_combout\);

\seven_seg_display_3|seven_seg[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_3|Mux1~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(5));

\seven_seg_display_3|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux0~0_combout\ = (!\convert_binary|int_data_3\(3) & ((!\convert_binary|int_data_3\(1) & ((!\convert_binary|int_data_3\(2)))) # (\convert_binary|int_data_3\(1) & (\convert_binary|int_data_3\(0) & \convert_binary|int_data_3\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1100000100000000110000010000000011000001000000001100000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux0~0_combout\);

\seven_seg_display_3|seven_seg[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_3|Mux0~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(6));

\convert_binary|Mux21~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mux21~0_combout\ = (!\Operation[0]~input_o\ & ((!\Operation[1]~input_o\) # (\sub|cout_sub_overflow~q\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000101010001010100010101000101010001010100010101000101010001010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \sub|ALT_INV_cout_sub_overflow~q\,
	combout => \convert_binary|Mux21~0_combout\);

\convert_binary|int_data_4r[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|Mux21~0_combout\,
	clrn => \ALT_INV_RST_N~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_4r\(1));

\seven_seg_display_4|seven_seg[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|int_data_4r\(1),
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_4|seven_seg\(0));

\seven_seg_display_4|seven_seg[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|int_data_4r\(1),
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_4|seven_seg\(1));

\seven_seg_display_4|seven_seg[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|int_data_4r\(1),
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_4|seven_seg\(2));

\seven_seg_display_4|seven_seg[6]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_4|seven_seg[6]~0_combout\ = !\convert_binary|int_data_4r\(1)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_4r\(1),
	combout => \seven_seg_display_4|seven_seg[6]~0_combout\);

\seven_seg_display_4|seven_seg[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_4|seven_seg[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_4|seven_seg\(6));

\seven_seg_display_5|seven_seg[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|int_data_4r\(1),
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_5|seven_seg\(0));

\seven_seg_display_5|seven_seg[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|int_data_4r\(1),
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_5|seven_seg\(1));

\seven_seg_display_5|seven_seg[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|int_data_4r\(1),
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_5|seven_seg\(2));

\seven_seg_display_5|seven_seg[6]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_5|seven_seg[6]~0_combout\ = !\convert_binary|int_data_4r\(1)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_4r\(1),
	combout => \seven_seg_display_5|seven_seg[6]~0_combout\);

\seven_seg_display_5|seven_seg[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_5|seven_seg[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_5|seven_seg\(6));

\seven_seg_display_6|seven_seg[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|int_data_4r\(1),
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_6|seven_seg\(0));

\seven_seg_display_6|seven_seg[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|int_data_4r\(1),
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_6|seven_seg\(1));

\seven_seg_display_6|seven_seg[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \convert_binary|int_data_4r\(1),
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_6|seven_seg\(2));

\seven_seg_display_6|seven_seg[6]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_6|seven_seg[6]~0_combout\ = !\convert_binary|int_data_4r\(1)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_4r\(1),
	combout => \seven_seg_display_6|seven_seg[6]~0_combout\);

\seven_seg_display_6|seven_seg[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK~input_o\,
	d => \seven_seg_display_6|seven_seg[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_6|seven_seg\(6));

ww_Result(0) <= \Result[0]~output_o\;

ww_Result(1) <= \Result[1]~output_o\;

ww_Result(2) <= \Result[2]~output_o\;

ww_Result(3) <= \Result[3]~output_o\;

ww_Result(4) <= \Result[4]~output_o\;

ww_Result(5) <= \Result[5]~output_o\;

ww_Result(6) <= \Result[6]~output_o\;

ww_Result(7) <= \Result[7]~output_o\;

ww_Result(8) <= \Result[8]~output_o\;

ww_Result(9) <= \Result[9]~output_o\;

ww_Remainder(0) <= \Remainder[0]~output_o\;

ww_Remainder(1) <= \Remainder[1]~output_o\;

ww_Remainder(2) <= \Remainder[2]~output_o\;

ww_Remainder(3) <= \Remainder[3]~output_o\;

ww_Remainder(4) <= \Remainder[4]~output_o\;

ww_Remainder(5) <= \Remainder[5]~output_o\;

ww_Remainder(6) <= \Remainder[6]~output_o\;

ww_Remainder(7) <= \Remainder[7]~output_o\;

ww_Remainder(8) <= \Remainder[8]~output_o\;

ww_Remainder(9) <= \Remainder[9]~output_o\;

ww_Done <= \Done~output_o\;

ww_seven_seg_digit_1(0) <= \seven_seg_digit_1[0]~output_o\;

ww_seven_seg_digit_1(1) <= \seven_seg_digit_1[1]~output_o\;

ww_seven_seg_digit_1(2) <= \seven_seg_digit_1[2]~output_o\;

ww_seven_seg_digit_1(3) <= \seven_seg_digit_1[3]~output_o\;

ww_seven_seg_digit_1(4) <= \seven_seg_digit_1[4]~output_o\;

ww_seven_seg_digit_1(5) <= \seven_seg_digit_1[5]~output_o\;

ww_seven_seg_digit_1(6) <= \seven_seg_digit_1[6]~output_o\;

ww_seven_seg_digit_2(0) <= \seven_seg_digit_2[0]~output_o\;

ww_seven_seg_digit_2(1) <= \seven_seg_digit_2[1]~output_o\;

ww_seven_seg_digit_2(2) <= \seven_seg_digit_2[2]~output_o\;

ww_seven_seg_digit_2(3) <= \seven_seg_digit_2[3]~output_o\;

ww_seven_seg_digit_2(4) <= \seven_seg_digit_2[4]~output_o\;

ww_seven_seg_digit_2(5) <= \seven_seg_digit_2[5]~output_o\;

ww_seven_seg_digit_2(6) <= \seven_seg_digit_2[6]~output_o\;

ww_seven_seg_digit_3(0) <= \seven_seg_digit_3[0]~output_o\;

ww_seven_seg_digit_3(1) <= \seven_seg_digit_3[1]~output_o\;

ww_seven_seg_digit_3(2) <= \seven_seg_digit_3[2]~output_o\;

ww_seven_seg_digit_3(3) <= \seven_seg_digit_3[3]~output_o\;

ww_seven_seg_digit_3(4) <= \seven_seg_digit_3[4]~output_o\;

ww_seven_seg_digit_3(5) <= \seven_seg_digit_3[5]~output_o\;

ww_seven_seg_digit_3(6) <= \seven_seg_digit_3[6]~output_o\;

ww_seven_seg_digit_4r(0) <= \seven_seg_digit_4r[0]~output_o\;

ww_seven_seg_digit_4r(1) <= \seven_seg_digit_4r[1]~output_o\;

ww_seven_seg_digit_4r(2) <= \seven_seg_digit_4r[2]~output_o\;

ww_seven_seg_digit_4r(3) <= \seven_seg_digit_4r[3]~output_o\;

ww_seven_seg_digit_4r(4) <= \seven_seg_digit_4r[4]~output_o\;

ww_seven_seg_digit_4r(5) <= \seven_seg_digit_4r[5]~output_o\;

ww_seven_seg_digit_4r(6) <= \seven_seg_digit_4r[6]~output_o\;

ww_seven_seg_digit_5r(0) <= \seven_seg_digit_5r[0]~output_o\;

ww_seven_seg_digit_5r(1) <= \seven_seg_digit_5r[1]~output_o\;

ww_seven_seg_digit_5r(2) <= \seven_seg_digit_5r[2]~output_o\;

ww_seven_seg_digit_5r(3) <= \seven_seg_digit_5r[3]~output_o\;

ww_seven_seg_digit_5r(4) <= \seven_seg_digit_5r[4]~output_o\;

ww_seven_seg_digit_5r(5) <= \seven_seg_digit_5r[5]~output_o\;

ww_seven_seg_digit_5r(6) <= \seven_seg_digit_5r[6]~output_o\;

ww_seven_seg_digit_6r(0) <= \seven_seg_digit_6r[0]~output_o\;

ww_seven_seg_digit_6r(1) <= \seven_seg_digit_6r[1]~output_o\;

ww_seven_seg_digit_6r(2) <= \seven_seg_digit_6r[2]~output_o\;

ww_seven_seg_digit_6r(3) <= \seven_seg_digit_6r[3]~output_o\;

ww_seven_seg_digit_6r(4) <= \seven_seg_digit_6r[4]~output_o\;

ww_seven_seg_digit_6r(5) <= \seven_seg_digit_6r[5]~output_o\;

ww_seven_seg_digit_6r(6) <= \seven_seg_digit_6r[6]~output_o\;
END structure;


